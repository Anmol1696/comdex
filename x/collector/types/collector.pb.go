// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/collector/v1beta1/collector.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Accumulator struct {
	AccumulatedStabilityFee  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=accumulated_stability_fee,json=accumulatedStabilityFee,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"accumulated_stability_fee" yaml:"auctioned_collateral"`
	AccumulatedClosingFee    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=accumulated_closing_fee,json=accumulatedClosingFee,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"accumulated_closing_fee" yaml:"auctioned_collateral"`
	AccumulatedOpeningFee    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=accumulated_opening_fee,json=accumulatedOpeningFee,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"accumulated_opening_fee" yaml:"auctioned_collateral"`
	NetFeesAcccumulated      github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=net_fees_acccumulated,json=netFeesAcccumulated,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"net_fees_acccumulated" yaml:"auctioned_collateral"`
	LockerRewardsAccumulated github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=locker_rewards_accumulated,json=lockerRewardsAccumulated,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"locker_rewards_accumulated" yaml:"auctioned_collateral"`
}

func (m *Accumulator) Reset()         { *m = Accumulator{} }
func (m *Accumulator) String() string { return proto.CompactTextString(m) }
func (*Accumulator) ProtoMessage()    {}
func (*Accumulator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{0}
}
func (m *Accumulator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Accumulator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Accumulator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Accumulator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Accumulator.Merge(m, src)
}
func (m *Accumulator) XXX_Size() int {
	return m.Size()
}
func (m *Accumulator) XXX_DiscardUnknown() {
	xxx_messageInfo_Accumulator.DiscardUnknown(m)
}

var xxx_messageInfo_Accumulator proto.InternalMessageInfo

func (m *Accumulator) GetAccumulatedStabilityFee() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AccumulatedStabilityFee
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Accumulator) GetAccumulatedClosingFee() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AccumulatedClosingFee
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Accumulator) GetAccumulatedOpeningFee() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AccumulatedOpeningFee
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Accumulator) GetNetFeesAcccumulated() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.NetFeesAcccumulated
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Accumulator) GetLockerRewardsAccumulated() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.LockerRewardsAccumulated
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

type AccumulatorLookupTable struct {
	AccumulatorTokenDenom string `protobuf:"bytes,1,opt,name=accumulator_token_denom,json=accumulatorTokenDenom,proto3" json:"accumulator_token_denom,omitempty" yaml:"accumulator_token_denom"`
	SecondaryTokenDenom   string `protobuf:"bytes,2,opt,name=secondary_token_denom,json=secondaryTokenDenom,proto3" json:"secondary_token_denom,omitempty" yaml:"secondary_token_denom"`
	SurplusThreshold      uint64 `protobuf:"varint,3,opt,name=surplus_threshold,json=surplusThreshold,proto3" json:"surplus_threshold,omitempty" yaml:"surplus_threshold"`
	DebtThreshold         uint64 `protobuf:"varint,4,opt,name=debt_threshold,json=debtThreshold,proto3" json:"debt_threshold,omitempty" yaml:"debt_threshold"`
	LockerSavingRate      uint64 `protobuf:"varint,5,opt,name=locker_saving_rate,json=lockerSavingRate,proto3" json:"locker_saving_rate,omitempty" yaml:"locker_saving_rate"`
}

func (m *AccumulatorLookupTable) Reset()         { *m = AccumulatorLookupTable{} }
func (m *AccumulatorLookupTable) String() string { return proto.CompactTextString(m) }
func (*AccumulatorLookupTable) ProtoMessage()    {}
func (*AccumulatorLookupTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{1}
}
func (m *AccumulatorLookupTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulatorLookupTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulatorLookupTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulatorLookupTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulatorLookupTable.Merge(m, src)
}
func (m *AccumulatorLookupTable) XXX_Size() int {
	return m.Size()
}
func (m *AccumulatorLookupTable) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulatorLookupTable.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulatorLookupTable proto.InternalMessageInfo

func (m *AccumulatorLookupTable) GetAccumulatorTokenDenom() string {
	if m != nil {
		return m.AccumulatorTokenDenom
	}
	return ""
}

func (m *AccumulatorLookupTable) GetSecondaryTokenDenom() string {
	if m != nil {
		return m.SecondaryTokenDenom
	}
	return ""
}

func (m *AccumulatorLookupTable) GetSurplusThreshold() uint64 {
	if m != nil {
		return m.SurplusThreshold
	}
	return 0
}

func (m *AccumulatorLookupTable) GetDebtThreshold() uint64 {
	if m != nil {
		return m.DebtThreshold
	}
	return 0
}

func (m *AccumulatorLookupTable) GetLockerSavingRate() uint64 {
	if m != nil {
		return m.LockerSavingRate
	}
	return 0
}

func init() {
	proto.RegisterType((*Accumulator)(nil), "comdex.collector.v1beta1.Accumulator")
	proto.RegisterType((*AccumulatorLookupTable)(nil), "comdex.collector.v1beta1.AccumulatorLookupTable")
}

func init() {
	proto.RegisterFile("comdex/collector/v1beta1/collector.proto", fileDescriptor_f18765a8dff2a43b)
}

var fileDescriptor_f18765a8dff2a43b = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xe3, 0x36, 0x5f, 0xa5, 0xcf, 0x15, 0xa8, 0xb8, 0x04, 0x92, 0x52, 0xec, 0xca, 0x1b,
	0xba, 0xa9, 0xad, 0xd2, 0x1d, 0x2b, 0x9a, 0xa2, 0x4a, 0x88, 0x3f, 0xc9, 0xcd, 0xaa, 0x1b, 0x6b,
	0x3c, 0x3e, 0x4d, 0xad, 0x8c, 0x7d, 0xa2, 0x99, 0x71, 0x21, 0x77, 0xc1, 0x0d, 0xb0, 0x40, 0x02,
	0x71, 0x29, 0x74, 0xd9, 0x25, 0x2b, 0x0b, 0xb5, 0x77, 0xe0, 0x25, 0x2b, 0xe4, 0x19, 0xa7, 0x71,
	0x20, 0xeb, 0xb0, 0x4a, 0xfc, 0x9e, 0x57, 0x8f, 0x1f, 0xc9, 0x67, 0xc6, 0xdc, 0xa5, 0x98, 0xc6,
	0xf0, 0xc1, 0xa7, 0xc8, 0x18, 0x50, 0x89, 0xdc, 0xbf, 0xd8, 0x8f, 0x40, 0x92, 0xfd, 0x59, 0xe2,
	0x8d, 0x39, 0x4a, 0xb4, 0xba, 0xba, 0xe9, 0xcd, 0xf2, 0xba, 0xb9, 0x75, 0x7f, 0x88, 0x43, 0x54,
	0x25, 0xbf, 0xfa, 0xa7, 0xfb, 0x5b, 0x36, 0x45, 0x91, 0xa2, 0xf0, 0x23, 0x22, 0xa0, 0x01, 0x4d,
	0x32, 0x3d, 0x77, 0xbf, 0xaf, 0x99, 0xeb, 0x87, 0x94, 0xe6, 0x69, 0xce, 0x88, 0x44, 0x6e, 0x7d,
	0x35, 0xcc, 0x1e, 0x99, 0x3e, 0x43, 0x1c, 0x0a, 0x49, 0xa2, 0x84, 0x25, 0x72, 0x12, 0x9e, 0x01,
	0x74, 0x8d, 0x1d, 0x63, 0x77, 0xfd, 0x69, 0xcf, 0xd3, 0x50, 0xaf, 0x82, 0x4e, 0xdf, 0xef, 0x1d,
	0x61, 0x92, 0xf5, 0xdf, 0x5e, 0x16, 0x4e, 0xab, 0x2c, 0x9c, 0x47, 0x13, 0x92, 0xb2, 0x67, 0x2e,
	0xc9, 0xa9, 0x4c, 0x30, 0x83, 0x38, 0xac, 0x7c, 0x89, 0x04, 0x4e, 0x98, 0xfb, 0xab, 0x70, 0x9e,
	0x0c, 0x13, 0x79, 0x9e, 0x47, 0x1e, 0xc5, 0xd4, 0xaf, 0x05, 0xf5, 0xcf, 0x9e, 0x88, 0x47, 0xbe,
	0x9c, 0x8c, 0x41, 0x28, 0x5e, 0xf0, 0xb0, 0xe1, 0x72, 0x32, 0x55, 0x39, 0x06, 0xb0, 0x3e, 0x1b,
	0x66, 0x73, 0x16, 0x52, 0x86, 0x22, 0xc9, 0x86, 0xca, 0x72, 0x65, 0xd9, 0x96, 0x9d, 0x86, 0xc9,
	0x91, 0x16, 0x59, 0xe4, 0x88, 0x63, 0xc8, 0xa6, 0x8e, 0xab, 0xff, 0xd2, 0xf1, 0x9d, 0x16, 0xa9,
	0x1c, 0x3f, 0x19, 0x66, 0x27, 0x03, 0x59, 0x39, 0x89, 0x90, 0xd0, 0x59, 0xa7, 0xdb, 0x5e, 0xb6,
	0xe1, 0x66, 0x06, 0xf2, 0x18, 0x40, 0x1c, 0x36, 0x2c, 0xac, 0x6f, 0x86, 0xb9, 0xc5, 0x90, 0x8e,
	0x80, 0x87, 0x1c, 0xde, 0x13, 0x1e, 0x2b, 0xcb, 0x5b, 0xc9, 0xff, 0x96, 0x2d, 0xd9, 0xd5, 0x32,
	0x81, 0x76, 0x39, 0x9c, 0xa9, 0xb8, 0x5f, 0x56, 0xcd, 0x07, 0x8d, 0x93, 0xf4, 0x1a, 0x71, 0x94,
	0x8f, 0x07, 0x24, 0x62, 0x60, 0x9d, 0x36, 0xf6, 0x00, 0x79, 0x28, 0x71, 0x04, 0x59, 0x18, 0x43,
	0x86, 0xa9, 0x3a, 0x51, 0xff, 0xf7, 0xdd, 0xb2, 0x70, 0xec, 0xda, 0x70, 0x71, 0xd1, 0x6d, 0x7c,
	0x40, 0xe4, 0x83, 0x6a, 0xf0, 0xa2, 0xca, 0xad, 0x81, 0xd9, 0x11, 0x40, 0x31, 0x8b, 0x09, 0x9f,
	0xcc, 0x91, 0x57, 0x14, 0x79, 0xa7, 0x2c, 0x9c, 0x6d, 0x4d, 0x5e, 0x58, 0x73, 0x83, 0xcd, 0xdb,
	0xbc, 0x41, 0x7d, 0x69, 0xde, 0x13, 0x39, 0x1f, 0xb3, 0x5c, 0x84, 0xf2, 0x9c, 0x83, 0x38, 0x47,
	0x16, 0xab, 0x9d, 0x6d, 0xf7, 0xb7, 0xcb, 0xc2, 0xe9, 0xd6, 0xc4, 0x3f, 0x2b, 0x6e, 0xb0, 0x51,
	0x67, 0x83, 0x69, 0x64, 0x3d, 0x37, 0xef, 0xc6, 0x10, 0xc9, 0x06, 0xa7, 0xad, 0x38, 0xbd, 0xb2,
	0x70, 0x3a, 0x9a, 0x33, 0x3f, 0x77, 0x83, 0x3b, 0x55, 0x30, 0x23, 0xbc, 0x32, 0xad, 0x7a, 0x05,
	0x04, 0xb9, 0xa8, 0x0e, 0x10, 0x27, 0x12, 0xd4, 0xa7, 0x6f, 0xf7, 0x1f, 0x97, 0x85, 0xd3, 0xd3,
	0x94, 0xbf, 0x3b, 0x6e, 0xb0, 0xa1, 0xc3, 0x13, 0x95, 0x05, 0x44, 0x42, 0xff, 0xcd, 0xe5, 0xb5,
	0x6d, 0x5c, 0x5d, 0xdb, 0xc6, 0xcf, 0x6b, 0xdb, 0xf8, 0x78, 0x63, 0xb7, 0xae, 0x6e, 0xec, 0xd6,
	0x8f, 0x1b, 0xbb, 0x75, 0x7a, 0x30, 0xb7, 0x03, 0xd5, 0x2d, 0xbb, 0x87, 0x67, 0x67, 0x09, 0x4d,
	0x08, 0xab, 0x9f, 0xfd, 0xe6, 0x0d, 0xad, 0x96, 0x22, 0x5a, 0x53, 0xd7, 0xe8, 0xc1, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0xe2, 0x84, 0x4c, 0xc2, 0x05, 0x00, 0x00,
}

func (m *Accumulator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Accumulator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Accumulator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockerRewardsAccumulated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.NetFeesAcccumulated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AccumulatedOpeningFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AccumulatedClosingFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AccumulatedStabilityFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AccumulatorLookupTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulatorLookupTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulatorLookupTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockerSavingRate != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.LockerSavingRate))
		i--
		dAtA[i] = 0x28
	}
	if m.DebtThreshold != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.DebtThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.SurplusThreshold != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.SurplusThreshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SecondaryTokenDenom) > 0 {
		i -= len(m.SecondaryTokenDenom)
		copy(dAtA[i:], m.SecondaryTokenDenom)
		i = encodeVarintCollector(dAtA, i, uint64(len(m.SecondaryTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccumulatorTokenDenom) > 0 {
		i -= len(m.AccumulatorTokenDenom)
		copy(dAtA[i:], m.AccumulatorTokenDenom)
		i = encodeVarintCollector(dAtA, i, uint64(len(m.AccumulatorTokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollector(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Accumulator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccumulatedStabilityFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.AccumulatedClosingFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.AccumulatedOpeningFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.NetFeesAcccumulated.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.LockerRewardsAccumulated.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *AccumulatorLookupTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccumulatorTokenDenom)
	if l > 0 {
		n += 1 + l + sovCollector(uint64(l))
	}
	l = len(m.SecondaryTokenDenom)
	if l > 0 {
		n += 1 + l + sovCollector(uint64(l))
	}
	if m.SurplusThreshold != 0 {
		n += 1 + sovCollector(uint64(m.SurplusThreshold))
	}
	if m.DebtThreshold != 0 {
		n += 1 + sovCollector(uint64(m.DebtThreshold))
	}
	if m.LockerSavingRate != 0 {
		n += 1 + sovCollector(uint64(m.LockerSavingRate))
	}
	return n
}

func sovCollector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollector(x uint64) (n int) {
	return sovCollector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Accumulator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Accumulator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Accumulator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedStabilityFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumulatedStabilityFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedClosingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumulatedClosingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedOpeningFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumulatedOpeningFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetFeesAcccumulated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetFeesAcccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerRewardsAccumulated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockerRewardsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumulatorLookupTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulatorLookupTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulatorLookupTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurplusThreshold", wireType)
			}
			m.SurplusThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurplusThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtThreshold", wireType)
			}
			m.DebtThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerSavingRate", wireType)
			}
			m.LockerSavingRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerSavingRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollector = fmt.Errorf("proto: unexpected end of group")
)
