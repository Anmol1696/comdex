// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/collector/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCollectorLookupByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryCollectorLookupByAppRequest) Reset()         { *m = QueryCollectorLookupByAppRequest{} }
func (m *QueryCollectorLookupByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectorLookupByAppRequest) ProtoMessage()    {}
func (*QueryCollectorLookupByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{2}
}
func (m *QueryCollectorLookupByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorLookupByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorLookupByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorLookupByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorLookupByAppRequest.Merge(m, src)
}
func (m *QueryCollectorLookupByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorLookupByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorLookupByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorLookupByAppRequest proto.InternalMessageInfo

func (m *QueryCollectorLookupByAppRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type QueryCollectorLookupByAppResponse struct {
	CollectorLookup []CollectorLookupTable `protobuf:"bytes,1,rep,name=collectorLookup,proto3" json:"collectorLookup" yaml:"collectorLookup"`
}

func (m *QueryCollectorLookupByAppResponse) Reset()         { *m = QueryCollectorLookupByAppResponse{} }
func (m *QueryCollectorLookupByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectorLookupByAppResponse) ProtoMessage()    {}
func (*QueryCollectorLookupByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{3}
}
func (m *QueryCollectorLookupByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorLookupByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorLookupByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorLookupByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorLookupByAppResponse.Merge(m, src)
}
func (m *QueryCollectorLookupByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorLookupByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorLookupByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorLookupByAppResponse proto.InternalMessageInfo

func (m *QueryCollectorLookupByAppResponse) GetCollectorLookup() []CollectorLookupTable {
	if m != nil {
		return m.CollectorLookup
	}
	return nil
}

type QueryCollectorLookupByAppAndAssetRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryCollectorLookupByAppAndAssetRequest) Reset() {
	*m = QueryCollectorLookupByAppAndAssetRequest{}
}
func (m *QueryCollectorLookupByAppAndAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectorLookupByAppAndAssetRequest) ProtoMessage()    {}
func (*QueryCollectorLookupByAppAndAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{4}
}
func (m *QueryCollectorLookupByAppAndAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorLookupByAppAndAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorLookupByAppAndAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorLookupByAppAndAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorLookupByAppAndAssetRequest.Merge(m, src)
}
func (m *QueryCollectorLookupByAppAndAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorLookupByAppAndAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorLookupByAppAndAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorLookupByAppAndAssetRequest proto.InternalMessageInfo

func (m *QueryCollectorLookupByAppAndAssetRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QueryCollectorLookupByAppAndAssetRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryCollectorLookupByAppAndAssetResponse struct {
	CollectorLookup CollectorLookupTable `protobuf:"bytes,1,opt,name=collectorLookup,proto3" json:"collectorLookup" yaml:"collectorLookup"`
}

func (m *QueryCollectorLookupByAppAndAssetResponse) Reset() {
	*m = QueryCollectorLookupByAppAndAssetResponse{}
}
func (m *QueryCollectorLookupByAppAndAssetResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCollectorLookupByAppAndAssetResponse) ProtoMessage() {}
func (*QueryCollectorLookupByAppAndAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{5}
}
func (m *QueryCollectorLookupByAppAndAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorLookupByAppAndAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorLookupByAppAndAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorLookupByAppAndAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorLookupByAppAndAssetResponse.Merge(m, src)
}
func (m *QueryCollectorLookupByAppAndAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorLookupByAppAndAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorLookupByAppAndAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorLookupByAppAndAssetResponse proto.InternalMessageInfo

func (m *QueryCollectorLookupByAppAndAssetResponse) GetCollectorLookup() CollectorLookupTable {
	if m != nil {
		return m.CollectorLookup
	}
	return CollectorLookupTable{}
}

type QueryCollectorDataByAppAndAssetRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryCollectorDataByAppAndAssetRequest) Reset() {
	*m = QueryCollectorDataByAppAndAssetRequest{}
}
func (m *QueryCollectorDataByAppAndAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectorDataByAppAndAssetRequest) ProtoMessage()    {}
func (*QueryCollectorDataByAppAndAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{6}
}
func (m *QueryCollectorDataByAppAndAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorDataByAppAndAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorDataByAppAndAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorDataByAppAndAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorDataByAppAndAssetRequest.Merge(m, src)
}
func (m *QueryCollectorDataByAppAndAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorDataByAppAndAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorDataByAppAndAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorDataByAppAndAssetRequest proto.InternalMessageInfo

func (m *QueryCollectorDataByAppAndAssetRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QueryCollectorDataByAppAndAssetRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryCollectorDataByAppAndAssetResponse struct {
	CollectorData CollectorData `protobuf:"bytes,1,opt,name=collectorData,proto3" json:"collectorData" yaml:"collectorData"`
}

func (m *QueryCollectorDataByAppAndAssetResponse) Reset() {
	*m = QueryCollectorDataByAppAndAssetResponse{}
}
func (m *QueryCollectorDataByAppAndAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectorDataByAppAndAssetResponse) ProtoMessage()    {}
func (*QueryCollectorDataByAppAndAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{7}
}
func (m *QueryCollectorDataByAppAndAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectorDataByAppAndAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectorDataByAppAndAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectorDataByAppAndAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectorDataByAppAndAssetResponse.Merge(m, src)
}
func (m *QueryCollectorDataByAppAndAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectorDataByAppAndAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectorDataByAppAndAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectorDataByAppAndAssetResponse proto.InternalMessageInfo

func (m *QueryCollectorDataByAppAndAssetResponse) GetCollectorData() CollectorData {
	if m != nil {
		return m.CollectorData
	}
	return CollectorData{}
}

type QueryAuctionMappingForAppAndAssetRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryAuctionMappingForAppAndAssetRequest) Reset() {
	*m = QueryAuctionMappingForAppAndAssetRequest{}
}
func (m *QueryAuctionMappingForAppAndAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionMappingForAppAndAssetRequest) ProtoMessage()    {}
func (*QueryAuctionMappingForAppAndAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{8}
}
func (m *QueryAuctionMappingForAppAndAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionMappingForAppAndAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionMappingForAppAndAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionMappingForAppAndAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionMappingForAppAndAssetRequest.Merge(m, src)
}
func (m *QueryAuctionMappingForAppAndAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionMappingForAppAndAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionMappingForAppAndAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionMappingForAppAndAssetRequest proto.InternalMessageInfo

func (m *QueryAuctionMappingForAppAndAssetRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QueryAuctionMappingForAppAndAssetRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryAuctionMappingForAppAndAssetResponse struct {
	AssetIdToAuctionLookupTable AssetIdToAuctionLookupTable `protobuf:"bytes,1,opt,name=assetIdToAuctionLookupTable,proto3" json:"assetIdToAuctionLookupTable" yaml:"assetIdToAuctionLookupTable"`
}

func (m *QueryAuctionMappingForAppAndAssetResponse) Reset() {
	*m = QueryAuctionMappingForAppAndAssetResponse{}
}
func (m *QueryAuctionMappingForAppAndAssetResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAuctionMappingForAppAndAssetResponse) ProtoMessage() {}
func (*QueryAuctionMappingForAppAndAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{9}
}
func (m *QueryAuctionMappingForAppAndAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionMappingForAppAndAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionMappingForAppAndAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionMappingForAppAndAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionMappingForAppAndAssetResponse.Merge(m, src)
}
func (m *QueryAuctionMappingForAppAndAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionMappingForAppAndAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionMappingForAppAndAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionMappingForAppAndAssetResponse proto.InternalMessageInfo

func (m *QueryAuctionMappingForAppAndAssetResponse) GetAssetIdToAuctionLookupTable() AssetIdToAuctionLookupTable {
	if m != nil {
		return m.AssetIdToAuctionLookupTable
	}
	return AssetIdToAuctionLookupTable{}
}

type QueryNetFeeCollectedForAppAndAssetRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) Reset() {
	*m = QueryNetFeeCollectedForAppAndAssetRequest{}
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryNetFeeCollectedForAppAndAssetRequest) ProtoMessage() {}
func (*QueryNetFeeCollectedForAppAndAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{10}
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetRequest.Merge(m, src)
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetRequest proto.InternalMessageInfo

func (m *QueryNetFeeCollectedForAppAndAssetRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type QueryNetFeeCollectedForAppAndAssetResponse struct {
	AssetIdToFeeCollected AssetIdToFeeCollected `protobuf:"bytes,1,opt,name=assetIdToFeeCollected,proto3" json:"assetIdToFeeCollected" yaml:"assetIdToFeeCollected"`
}

func (m *QueryNetFeeCollectedForAppAndAssetResponse) Reset() {
	*m = QueryNetFeeCollectedForAppAndAssetResponse{}
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryNetFeeCollectedForAppAndAssetResponse) ProtoMessage() {}
func (*QueryNetFeeCollectedForAppAndAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4bd1f010dddda3, []int{11}
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetResponse.Merge(m, src)
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetFeeCollectedForAppAndAssetResponse proto.InternalMessageInfo

func (m *QueryNetFeeCollectedForAppAndAssetResponse) GetAssetIdToFeeCollected() AssetIdToFeeCollected {
	if m != nil {
		return m.AssetIdToFeeCollected
	}
	return AssetIdToFeeCollected{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.collector.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.collector.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryCollectorLookupByAppRequest)(nil), "comdex.collector.v1beta1.QueryCollectorLookupByAppRequest")
	proto.RegisterType((*QueryCollectorLookupByAppResponse)(nil), "comdex.collector.v1beta1.QueryCollectorLookupByAppResponse")
	proto.RegisterType((*QueryCollectorLookupByAppAndAssetRequest)(nil), "comdex.collector.v1beta1.QueryCollectorLookupByAppAndAssetRequest")
	proto.RegisterType((*QueryCollectorLookupByAppAndAssetResponse)(nil), "comdex.collector.v1beta1.QueryCollectorLookupByAppAndAssetResponse")
	proto.RegisterType((*QueryCollectorDataByAppAndAssetRequest)(nil), "comdex.collector.v1beta1.QueryCollectorDataByAppAndAssetRequest")
	proto.RegisterType((*QueryCollectorDataByAppAndAssetResponse)(nil), "comdex.collector.v1beta1.QueryCollectorDataByAppAndAssetResponse")
	proto.RegisterType((*QueryAuctionMappingForAppAndAssetRequest)(nil), "comdex.collector.v1beta1.QueryAuctionMappingForAppAndAssetRequest")
	proto.RegisterType((*QueryAuctionMappingForAppAndAssetResponse)(nil), "comdex.collector.v1beta1.QueryAuctionMappingForAppAndAssetResponse")
	proto.RegisterType((*QueryNetFeeCollectedForAppAndAssetRequest)(nil), "comdex.collector.v1beta1.QueryNetFeeCollectedForAppAndAssetRequest")
	proto.RegisterType((*QueryNetFeeCollectedForAppAndAssetResponse)(nil), "comdex.collector.v1beta1.QueryNetFeeCollectedForAppAndAssetResponse")
}

func init() {
	proto.RegisterFile("comdex/collector/v1beta1/query.proto", fileDescriptor_1d4bd1f010dddda3)
}

var fileDescriptor_1d4bd1f010dddda3 = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xfd, 0x41, 0x7f, 0x66, 0x08, 0x21, 0x0e, 0x68, 0xb0, 0x92, 0xb6, 0x4e, 0x50,
	0x2a, 0x71, 0xbb, 0x02, 0xf1, 0x82, 0xc6, 0xd8, 0x85, 0x90, 0x10, 0xa9, 0xc8, 0x0a, 0x31, 0xf1,
	0x62, 0xa6, 0xdd, 0xa1, 0x36, 0x94, 0x9d, 0xa1, 0xdd, 0x1a, 0x1a, 0xc2, 0x41, 0x02, 0x27, 0x0f,
	0x9a, 0x98, 0xe8, 0xc9, 0x93, 0xf1, 0x4d, 0xf8, 0x0a, 0x38, 0x62, 0xbc, 0x70, 0x6a, 0x0c, 0xf8,
	0x0a, 0xb8, 0x9b, 0x98, 0x9d, 0x9d, 0xc2, 0xb6, 0xb0, 0x7f, 0x80, 0xa4, 0xb7, 0xa6, 0xf3, 0x7d,
	0x9e, 0xf9, 0x7e, 0x3f, 0x3c, 0xcc, 0x93, 0xc2, 0xe1, 0x02, 0x5b, 0x35, 0xe8, 0xba, 0x5a, 0x60,
	0xe5, 0x32, 0x2d, 0x58, 0xac, 0xa2, 0xbe, 0x1d, 0xcb, 0x53, 0x8b, 0x8c, 0xa9, 0x6b, 0x35, 0x5a,
	0xa9, 0x67, 0x78, 0x85, 0x59, 0x0c, 0x0d, 0x3a, 0xaa, 0xcc, 0xb1, 0x2a, 0x23, 0x55, 0xf1, 0x81,
	0x22, 0x2b, 0x32, 0x21, 0x52, 0xed, 0x4f, 0x8e, 0x3e, 0x3e, 0x54, 0x64, 0xac, 0x58, 0xa6, 0x2a,
	0xe1, 0x25, 0x95, 0x98, 0x26, 0xb3, 0x88, 0x55, 0x62, 0x66, 0x55, 0x9e, 0xde, 0xf6, 0xbc, 0x93,
	0x93, 0x0a, 0x59, 0x6d, 0xca, 0xd2, 0x9e, 0xb2, 0x13, 0x1b, 0x42, 0x89, 0x07, 0x20, 0x5a, 0xb0,
	0xdd, 0x3e, 0x17, 0xe5, 0x3a, 0x5d, 0xab, 0xd1, 0xaa, 0x85, 0x97, 0x60, 0x7f, 0xcb, 0xb7, 0x55,
	0xce, 0xcc, 0x2a, 0x45, 0x8f, 0x61, 0xcc, 0xb9, 0x66, 0x10, 0xa4, 0x40, 0xba, 0x67, 0x3c, 0x95,
	0xf1, 0x0a, 0x97, 0x71, 0x2a, 0xb5, 0xae, 0xdd, 0x46, 0x32, 0xa2, 0xcb, 0x2a, 0x3c, 0x07, 0x53,
	0xa2, 0xed, 0x54, 0x53, 0x3e, 0xc7, 0xd8, 0x4a, 0x8d, 0x6b, 0xf5, 0x2c, 0xe7, 0xf2, 0x6a, 0x94,
	0x86, 0x31, 0xc2, 0xf9, 0xeb, 0x92, 0x21, 0xee, 0xe8, 0xd2, 0xae, 0x1e, 0x35, 0x92, 0xbd, 0x75,
	0xb2, 0x5a, 0x9e, 0xc4, 0xce, 0xf7, 0x58, 0xef, 0x26, 0x9c, 0xcf, 0x1a, 0xf8, 0x2b, 0x80, 0xb7,
	0x7c, 0xda, 0x49, 0xcf, 0xeb, 0xb0, 0xaf, 0xd0, 0x7a, 0x3e, 0x08, 0x52, 0xff, 0xa5, 0x7b, 0xc6,
	0x33, 0xde, 0xe6, 0xdb, 0x1a, 0x2e, 0x92, 0x7c, 0x99, 0x6a, 0x09, 0x3b, 0xca, 0x51, 0x23, 0x79,
	0xdd, 0x31, 0xd3, 0xd6, 0x14, 0xeb, 0xed, 0xd7, 0xe0, 0x6d, 0x00, 0xd3, 0x9e, 0xfe, 0xb2, 0xa6,
	0x91, 0xad, 0x56, 0xa9, 0x75, 0xee, 0xd8, 0x28, 0x03, 0xaf, 0x10, 0xbb, 0xd2, 0xd6, 0x46, 0x85,
	0xb6, 0xff, 0xa8, 0x91, 0xec, 0x93, 0x5a, 0x79, 0x82, 0xf5, 0xff, 0xc5, 0xc7, 0x59, 0x03, 0x7f,
	0x07, 0xf0, 0x6e, 0x08, 0x1b, 0x7e, 0xb8, 0x40, 0x27, 0x70, 0x6d, 0x01, 0x78, 0xa7, 0xd5, 0xe7,
	0x34, 0xb1, 0x48, 0x87, 0x61, 0x7d, 0x06, 0x70, 0x24, 0xd0, 0x84, 0x44, 0xb5, 0x02, 0x7b, 0x0b,
	0x6e, 0x95, 0x04, 0x35, 0x12, 0x02, 0x94, 0x68, 0x3a, 0x24, 0x09, 0x0d, 0xb4, 0x11, 0xb2, 0x0f,
	0xb1, 0xde, 0xda, 0xfb, 0x64, 0x98, 0xb2, 0xb5, 0x82, 0xfd, 0x20, 0xe4, 0x08, 0xe7, 0x25, 0xb3,
	0x38, 0xc3, 0x2a, 0x1d, 0xe5, 0xf3, 0xb3, 0x39, 0x4c, 0xfe, 0x36, 0x24, 0xa1, 0x6f, 0x00, 0xde,
	0x94, 0x95, 0x8b, 0x4c, 0x56, 0xb8, 0x66, 0x44, 0x02, 0x7b, 0xe0, 0x0d, 0x2c, 0xeb, 0x5d, 0xac,
	0x8d, 0x4a, 0x7c, 0xd8, 0x65, 0xf6, 0x6c, 0x29, 0xd6, 0xfd, 0x5c, 0xe0, 0x9d, 0x66, 0xa6, 0x67,
	0xd4, 0x9a, 0xa1, 0x54, 0xfe, 0x91, 0xa8, 0xd1, 0x69, 0xb6, 0x3f, 0x00, 0x1c, 0x0d, 0xe3, 0x43,
	0xc2, 0x7d, 0x0f, 0xe0, 0xb5, 0xe3, 0x58, 0x6e, 0xbd, 0xc4, 0xaa, 0x86, 0xc0, 0xea, 0x2e, 0xd3,
	0x86, 0x25, 0xd0, 0xa1, 0x36, 0xa0, 0x6e, 0x11, 0xd6, 0xcf, 0xbe, 0x73, 0xfc, 0x43, 0x0f, 0xec,
	0x16, 0xe6, 0xd1, 0x17, 0x00, 0x63, 0xce, 0xeb, 0x8f, 0xee, 0x79, 0x5b, 0x38, 0xbd, 0x74, 0xe2,
	0x4a, 0x48, 0xb5, 0x93, 0x1f, 0xdf, 0xdf, 0xfa, 0xf5, 0xe7, 0x53, 0x74, 0x14, 0xa5, 0x55, 0xa7,
	0x4c, 0x61, 0xcb, 0xcb, 0xa5, 0x42, 0x89, 0x94, 0xd5, 0x53, 0xcb, 0xcf, 0x59, 0x3f, 0x68, 0x1f,
	0xc0, 0x1b, 0x9e, 0x2f, 0x21, 0x9a, 0x0c, 0xb8, 0xde, 0x67, 0x69, 0xc5, 0x1f, 0x5e, 0xa8, 0x56,
	0x06, 0xd1, 0x44, 0x90, 0x47, 0x68, 0x52, 0x0d, 0xde, 0xda, 0x4a, 0x59, 0x34, 0x50, 0xf2, 0x75,
	0x85, 0x70, 0xae, 0x6e, 0x38, 0x23, 0xb7, 0x89, 0x76, 0xa2, 0x3e, 0xbb, 0xb0, 0x39, 0x3a, 0x48,
	0xbb, 0x80, 0xcd, 0xb6, 0xf9, 0x8f, 0x4f, 0x5d, 0xaa, 0x87, 0x8c, 0xfc, 0x52, 0x44, 0x5e, 0x40,
	0xf3, 0xe7, 0x8e, 0xac, 0x10, 0xd3, 0x50, 0xc4, 0x08, 0x1e, 0x87, 0x57, 0x37, 0x9a, 0xff, 0x4c,
	0x9b, 0xe8, 0x2f, 0x80, 0xc9, 0x80, 0xf7, 0x1b, 0x3d, 0x09, 0x9b, 0xc0, 0x6b, 0xff, 0xc4, 0xb3,
	0x97, 0xe8, 0x20, 0x09, 0x2c, 0x09, 0x02, 0xf3, 0x28, 0x17, 0x86, 0x80, 0x41, 0x2c, 0x12, 0x2e,
	0xff, 0xbb, 0xe6, 0x1c, 0xf8, 0xbd, 0xcf, 0x81, 0x73, 0x10, 0x62, 0xc7, 0x04, 0xce, 0x41, 0x98,
	0x05, 0x81, 0x5f, 0x08, 0x0a, 0x39, 0xf4, 0xd4, 0x9b, 0x02, 0x71, 0xfa, 0x9c, 0x83, 0xc1, 0x76,
	0x14, 0xe2, 0xe0, 0x77, 0x14, 0x05, 0x05, 0x08, 0xb3, 0x0d, 0xe2, 0xd3, 0x97, 0x6b, 0x12, 0x1e,
	0x83, 0x49, 0x2d, 0x65, 0x99, 0xd2, 0xf0, 0x18, 0xb4, 0xdc, 0xee, 0x41, 0x02, 0xec, 0x1d, 0x24,
	0xc0, 0xef, 0x83, 0x04, 0xf8, 0x78, 0x98, 0x88, 0xec, 0x1d, 0x26, 0x22, 0xfb, 0x87, 0x89, 0xc8,
	0xab, 0x89, 0x62, 0xc9, 0x7a, 0x53, 0xcb, 0xdb, 0xd6, 0xbd, 0xde, 0x4e, 0xb7, 0x05, 0xab, 0xce,
	0x69, 0x35, 0x1f, 0x13, 0xbf, 0x17, 0x26, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x22, 0x76,
	0xc4, 0xf6, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryCollectorLookupByApp(ctx context.Context, in *QueryCollectorLookupByAppRequest, opts ...grpc.CallOption) (*QueryCollectorLookupByAppResponse, error)
	QueryCollectorLookupByAppAndAsset(ctx context.Context, in *QueryCollectorLookupByAppAndAssetRequest, opts ...grpc.CallOption) (*QueryCollectorLookupByAppAndAssetResponse, error)
	QueryCollectorDataByAppAndAsset(ctx context.Context, in *QueryCollectorDataByAppAndAssetRequest, opts ...grpc.CallOption) (*QueryCollectorDataByAppAndAssetResponse, error)
	QueryAuctionMappingForAppAndAsset(ctx context.Context, in *QueryAuctionMappingForAppAndAssetRequest, opts ...grpc.CallOption) (*QueryAuctionMappingForAppAndAssetResponse, error)
	QueryNetFeeCollectedForAppAndAsset(ctx context.Context, in *QueryNetFeeCollectedForAppAndAssetRequest, opts ...grpc.CallOption) (*QueryNetFeeCollectedForAppAndAssetResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollectorLookupByApp(ctx context.Context, in *QueryCollectorLookupByAppRequest, opts ...grpc.CallOption) (*QueryCollectorLookupByAppResponse, error) {
	out := new(QueryCollectorLookupByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollectorLookupByAppAndAsset(ctx context.Context, in *QueryCollectorLookupByAppAndAssetRequest, opts ...grpc.CallOption) (*QueryCollectorLookupByAppAndAssetResponse, error) {
	out := new(QueryCollectorLookupByAppAndAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollectorDataByAppAndAsset(ctx context.Context, in *QueryCollectorDataByAppAndAssetRequest, opts ...grpc.CallOption) (*QueryCollectorDataByAppAndAssetResponse, error) {
	out := new(QueryCollectorDataByAppAndAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAuctionMappingForAppAndAsset(ctx context.Context, in *QueryAuctionMappingForAppAndAssetRequest, opts ...grpc.CallOption) (*QueryAuctionMappingForAppAndAssetResponse, error) {
	out := new(QueryAuctionMappingForAppAndAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNetFeeCollectedForAppAndAsset(ctx context.Context, in *QueryNetFeeCollectedForAppAndAssetRequest, opts ...grpc.CallOption) (*QueryNetFeeCollectedForAppAndAssetResponse, error) {
	out := new(QueryNetFeeCollectedForAppAndAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryCollectorLookupByApp(context.Context, *QueryCollectorLookupByAppRequest) (*QueryCollectorLookupByAppResponse, error)
	QueryCollectorLookupByAppAndAsset(context.Context, *QueryCollectorLookupByAppAndAssetRequest) (*QueryCollectorLookupByAppAndAssetResponse, error)
	QueryCollectorDataByAppAndAsset(context.Context, *QueryCollectorDataByAppAndAssetRequest) (*QueryCollectorDataByAppAndAssetResponse, error)
	QueryAuctionMappingForAppAndAsset(context.Context, *QueryAuctionMappingForAppAndAssetRequest) (*QueryAuctionMappingForAppAndAssetResponse, error)
	QueryNetFeeCollectedForAppAndAsset(context.Context, *QueryNetFeeCollectedForAppAndAssetRequest) (*QueryNetFeeCollectedForAppAndAssetResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryCollectorLookupByApp(ctx context.Context, req *QueryCollectorLookupByAppRequest) (*QueryCollectorLookupByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollectorLookupByApp not implemented")
}
func (*UnimplementedQueryServer) QueryCollectorLookupByAppAndAsset(ctx context.Context, req *QueryCollectorLookupByAppAndAssetRequest) (*QueryCollectorLookupByAppAndAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollectorLookupByAppAndAsset not implemented")
}
func (*UnimplementedQueryServer) QueryCollectorDataByAppAndAsset(ctx context.Context, req *QueryCollectorDataByAppAndAssetRequest) (*QueryCollectorDataByAppAndAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollectorDataByAppAndAsset not implemented")
}
func (*UnimplementedQueryServer) QueryAuctionMappingForAppAndAsset(ctx context.Context, req *QueryAuctionMappingForAppAndAssetRequest) (*QueryAuctionMappingForAppAndAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuctionMappingForAppAndAsset not implemented")
}
func (*UnimplementedQueryServer) QueryNetFeeCollectedForAppAndAsset(ctx context.Context, req *QueryNetFeeCollectedForAppAndAssetRequest) (*QueryNetFeeCollectedForAppAndAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNetFeeCollectedForAppAndAsset not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollectorLookupByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectorLookupByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollectorLookupByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollectorLookupByApp(ctx, req.(*QueryCollectorLookupByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollectorLookupByAppAndAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectorLookupByAppAndAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollectorLookupByAppAndAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollectorLookupByAppAndAsset(ctx, req.(*QueryCollectorLookupByAppAndAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollectorDataByAppAndAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectorDataByAppAndAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollectorDataByAppAndAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollectorDataByAppAndAsset(ctx, req.(*QueryCollectorDataByAppAndAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAuctionMappingForAppAndAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionMappingForAppAndAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAuctionMappingForAppAndAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAuctionMappingForAppAndAsset(ctx, req.(*QueryAuctionMappingForAppAndAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNetFeeCollectedForAppAndAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetFeeCollectedForAppAndAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNetFeeCollectedForAppAndAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNetFeeCollectedForAppAndAsset(ctx, req.(*QueryNetFeeCollectedForAppAndAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.collector.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryCollectorLookupByApp",
			Handler:    _Query_QueryCollectorLookupByApp_Handler,
		},
		{
			MethodName: "QueryCollectorLookupByAppAndAsset",
			Handler:    _Query_QueryCollectorLookupByAppAndAsset_Handler,
		},
		{
			MethodName: "QueryCollectorDataByAppAndAsset",
			Handler:    _Query_QueryCollectorDataByAppAndAsset_Handler,
		},
		{
			MethodName: "QueryAuctionMappingForAppAndAsset",
			Handler:    _Query_QueryAuctionMappingForAppAndAsset_Handler,
		},
		{
			MethodName: "QueryNetFeeCollectedForAppAndAsset",
			Handler:    _Query_QueryNetFeeCollectedForAppAndAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/collector/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCollectorLookupByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorLookupByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorLookupByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectorLookupByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorLookupByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorLookupByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectorLookup) > 0 {
		for iNdEx := len(m.CollectorLookup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectorLookup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectorLookupByAppAndAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorLookupByAppAndAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorLookupByAppAndAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectorLookupByAppAndAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorLookupByAppAndAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorLookupByAppAndAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CollectorLookup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCollectorDataByAppAndAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorDataByAppAndAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorDataByAppAndAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectorDataByAppAndAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectorDataByAppAndAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectorDataByAppAndAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CollectorData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuctionMappingForAppAndAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionMappingForAppAndAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionMappingForAppAndAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionMappingForAppAndAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionMappingForAppAndAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionMappingForAppAndAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetIdToAuctionLookupTable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetFeeCollectedForAppAndAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetFeeCollectedForAppAndAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetFeeCollectedForAppAndAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetIdToFeeCollected.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCollectorLookupByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryCollectorLookupByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CollectorLookup) > 0 {
		for _, e := range m.CollectorLookup {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCollectorLookupByAppAndAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryCollectorLookupByAppAndAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollectorLookup.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCollectorDataByAppAndAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryCollectorDataByAppAndAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollectorData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuctionMappingForAppAndAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryAuctionMappingForAppAndAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetIdToAuctionLookupTable.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNetFeeCollectedForAppAndAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryNetFeeCollectedForAppAndAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetIdToFeeCollected.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorLookupByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorLookupByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorLookup = append(m.CollectorLookup, CollectorLookupTable{})
			if err := m.CollectorLookup[len(m.CollectorLookup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorLookupByAppAndAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppAndAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppAndAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorLookupByAppAndAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppAndAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorLookupByAppAndAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectorLookup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorDataByAppAndAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorDataByAppAndAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorDataByAppAndAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectorDataByAppAndAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectorDataByAppAndAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectorDataByAppAndAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectorData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionMappingForAppAndAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionMappingForAppAndAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionMappingForAppAndAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionMappingForAppAndAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionMappingForAppAndAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionMappingForAppAndAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIdToAuctionLookupTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetIdToAuctionLookupTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetFeeCollectedForAppAndAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetFeeCollectedForAppAndAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetFeeCollectedForAppAndAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetFeeCollectedForAppAndAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetFeeCollectedForAppAndAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetFeeCollectedForAppAndAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIdToFeeCollected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetIdToFeeCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
