// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/rewards/v1beta1/rewards.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InternalRewards struct {
	App_mapping_ID uint64 `protobuf:"varint,1,opt,name=app_mapping_ID,json=appMappingID,proto3" json:"app_mapping_ID,omitempty" yaml:"app_mapping_ID"`
	Asset_ID       uint64 `protobuf:"varint,2,opt,name=asset_ID,json=assetID,proto3" json:"asset_ID,omitempty" yaml:"asset_ID"`
}

func (m *InternalRewards) Reset()         { *m = InternalRewards{} }
func (m *InternalRewards) String() string { return proto.CompactTextString(m) }
func (*InternalRewards) ProtoMessage()    {}
func (*InternalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{0}
}
func (m *InternalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRewards.Merge(m, src)
}
func (m *InternalRewards) XXX_Size() int {
	return m.Size()
}
func (m *InternalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRewards proto.InternalMessageInfo

func (m *InternalRewards) GetApp_mapping_ID() uint64 {
	if m != nil {
		return m.App_mapping_ID
	}
	return 0
}

func (m *InternalRewards) GetAsset_ID() uint64 {
	if m != nil {
		return m.Asset_ID
	}
	return 0
}

type LockerRewardsTracker struct {
	LockerId           uint64                                 `protobuf:"varint,1,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	AppMappingId       uint64                                 `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	RewardsAccumulated github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=rewards_accumulated,json=rewardsAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewards_accumulated" yaml:"rewards_accumulated"`
}

func (m *LockerRewardsTracker) Reset()         { *m = LockerRewardsTracker{} }
func (m *LockerRewardsTracker) String() string { return proto.CompactTextString(m) }
func (*LockerRewardsTracker) ProtoMessage()    {}
func (*LockerRewardsTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{1}
}
func (m *LockerRewardsTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerRewardsTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerRewardsTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerRewardsTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerRewardsTracker.Merge(m, src)
}
func (m *LockerRewardsTracker) XXX_Size() int {
	return m.Size()
}
func (m *LockerRewardsTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerRewardsTracker.DiscardUnknown(m)
}

var xxx_messageInfo_LockerRewardsTracker proto.InternalMessageInfo

func (m *LockerRewardsTracker) GetLockerId() uint64 {
	if m != nil {
		return m.LockerId
	}
	return 0
}

func (m *LockerRewardsTracker) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

type VaultInterestTracker struct {
	VaultId             uint64                                 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty" yaml:"vault_id"`
	AppMappingId        uint64                                 `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	InterestAccumulated github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=interest_accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_accumulated" yaml:"interest_accumulated"`
}

func (m *VaultInterestTracker) Reset()         { *m = VaultInterestTracker{} }
func (m *VaultInterestTracker) String() string { return proto.CompactTextString(m) }
func (*VaultInterestTracker) ProtoMessage()    {}
func (*VaultInterestTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{2}
}
func (m *VaultInterestTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultInterestTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultInterestTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultInterestTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultInterestTracker.Merge(m, src)
}
func (m *VaultInterestTracker) XXX_Size() int {
	return m.Size()
}
func (m *VaultInterestTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultInterestTracker.DiscardUnknown(m)
}

var xxx_messageInfo_VaultInterestTracker proto.InternalMessageInfo

func (m *VaultInterestTracker) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *VaultInterestTracker) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

type LockerExternalRewards struct {
	Id                   uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppMappingId         uint64                                  `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	AssetId              uint64                                  `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	TotalRewards         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=total_rewards,json=totalRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_rewards" yaml:"total_rewards"`
	DurationDays         int64                                   `protobuf:"varint,5,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty" yaml:"duration_days"`
	IsActive             bool                                    `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" yaml:"is_active"`
	AvailableRewards     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=available_rewards,json=availableRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"available_rewards" yaml:"available_rewards"`
	Depositor            string                                  `protobuf:"bytes,8,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	StartTimestamp       time.Time                               `protobuf:"bytes,9,opt,name=start_timestamp,json=startTimestamp,proto3,stdtime" json:"start_timestamp" yaml:"start_timestamp"`
	EndTimestamp         time.Time                               `protobuf:"bytes,10,opt,name=end_timestamp,json=endTimestamp,proto3,stdtime" json:"end_timestamp" yaml:"end_timestamp"`
	MinLockupTimeSeconds int64                                   `protobuf:"varint,11,opt,name=min_lockup_time_seconds,json=minLockupTimeSeconds,proto3" json:"min_lockup_time_seconds,omitempty" yaml:"min_lockup_time_seconds"`
	EpochId              uint64                                  `protobuf:"varint,12,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty" yaml:"epoch_id"`
}

func (m *LockerExternalRewards) Reset()         { *m = LockerExternalRewards{} }
func (m *LockerExternalRewards) String() string { return proto.CompactTextString(m) }
func (*LockerExternalRewards) ProtoMessage()    {}
func (*LockerExternalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{3}
}
func (m *LockerExternalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerExternalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerExternalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerExternalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerExternalRewards.Merge(m, src)
}
func (m *LockerExternalRewards) XXX_Size() int {
	return m.Size()
}
func (m *LockerExternalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerExternalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_LockerExternalRewards proto.InternalMessageInfo

func (m *LockerExternalRewards) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LockerExternalRewards) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

func (m *LockerExternalRewards) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *LockerExternalRewards) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TotalRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LockerExternalRewards) GetDurationDays() int64 {
	if m != nil {
		return m.DurationDays
	}
	return 0
}

func (m *LockerExternalRewards) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *LockerExternalRewards) GetAvailableRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AvailableRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LockerExternalRewards) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *LockerExternalRewards) GetStartTimestamp() time.Time {
	if m != nil {
		return m.StartTimestamp
	}
	return time.Time{}
}

func (m *LockerExternalRewards) GetEndTimestamp() time.Time {
	if m != nil {
		return m.EndTimestamp
	}
	return time.Time{}
}

func (m *LockerExternalRewards) GetMinLockupTimeSeconds() int64 {
	if m != nil {
		return m.MinLockupTimeSeconds
	}
	return 0
}

func (m *LockerExternalRewards) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type VaultExternalRewards struct {
	Id                   uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppMappingId         uint64                                  `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	Extended_Pair_Id     uint64                                  `protobuf:"varint,3,opt,name=extended_Pair_Id,json=extendedPairId,proto3" json:"extended_Pair_Id,omitempty" yaml:"extended_Pair_Id"`
	TotalRewards         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=total_rewards,json=totalRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_rewards" yaml:"total_rewards"`
	DurationDays         int64                                   `protobuf:"varint,5,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty" yaml:"duration_days"`
	IsActive             bool                                    `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" yaml:"is_active"`
	AvailableRewards     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=available_rewards,json=availableRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"available_rewards" yaml:"available_rewards"`
	Depositor            string                                  `protobuf:"bytes,8,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	StartTimestamp       time.Time                               `protobuf:"bytes,9,opt,name=start_timestamp,json=startTimestamp,proto3,stdtime" json:"start_timestamp" yaml:"start_timestamp"`
	EndTimestamp         time.Time                               `protobuf:"bytes,10,opt,name=end_timestamp,json=endTimestamp,proto3,stdtime" json:"end_timestamp" yaml:"end_timestamp"`
	MinLockupTimeSeconds int64                                   `protobuf:"varint,11,opt,name=min_lockup_time_seconds,json=minLockupTimeSeconds,proto3" json:"min_lockup_time_seconds,omitempty" yaml:"min_lockup_time_seconds"`
	EpochId              uint64                                  `protobuf:"varint,12,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty" yaml:"epoch_id"`
}

func (m *VaultExternalRewards) Reset()         { *m = VaultExternalRewards{} }
func (m *VaultExternalRewards) String() string { return proto.CompactTextString(m) }
func (*VaultExternalRewards) ProtoMessage()    {}
func (*VaultExternalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{4}
}
func (m *VaultExternalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultExternalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultExternalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultExternalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultExternalRewards.Merge(m, src)
}
func (m *VaultExternalRewards) XXX_Size() int {
	return m.Size()
}
func (m *VaultExternalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultExternalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_VaultExternalRewards proto.InternalMessageInfo

func (m *VaultExternalRewards) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VaultExternalRewards) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

func (m *VaultExternalRewards) GetExtended_Pair_Id() uint64 {
	if m != nil {
		return m.Extended_Pair_Id
	}
	return 0
}

func (m *VaultExternalRewards) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TotalRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *VaultExternalRewards) GetDurationDays() int64 {
	if m != nil {
		return m.DurationDays
	}
	return 0
}

func (m *VaultExternalRewards) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *VaultExternalRewards) GetAvailableRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AvailableRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *VaultExternalRewards) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *VaultExternalRewards) GetStartTimestamp() time.Time {
	if m != nil {
		return m.StartTimestamp
	}
	return time.Time{}
}

func (m *VaultExternalRewards) GetEndTimestamp() time.Time {
	if m != nil {
		return m.EndTimestamp
	}
	return time.Time{}
}

func (m *VaultExternalRewards) GetMinLockupTimeSeconds() int64 {
	if m != nil {
		return m.MinLockupTimeSeconds
	}
	return 0
}

func (m *VaultExternalRewards) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type EpochTime struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppMappingId uint64 `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	StartingTime int64  `protobuf:"varint,3,opt,name=starting_time,json=startingTime,proto3" json:"starting_time,omitempty" yaml:"time"`
	Count        uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty" yaml:"count"`
}

func (m *EpochTime) Reset()         { *m = EpochTime{} }
func (m *EpochTime) String() string { return proto.CompactTextString(m) }
func (*EpochTime) ProtoMessage()    {}
func (*EpochTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{5}
}
func (m *EpochTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochTime.Merge(m, src)
}
func (m *EpochTime) XXX_Size() int {
	return m.Size()
}
func (m *EpochTime) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochTime.DiscardUnknown(m)
}

var xxx_messageInfo_EpochTime proto.InternalMessageInfo

func (m *EpochTime) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EpochTime) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

func (m *EpochTime) GetStartingTime() int64 {
	if m != nil {
		return m.StartingTime
	}
	return 0
}

func (m *EpochTime) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LendExternalRewards struct {
	Id                   uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppMappingId         uint64                                  `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	RewardsAssetPoolData *RewardsAssetPoolData                   `protobuf:"bytes,3,opt,name=rewards_asset_pool_data,json=rewardsAssetPoolData,proto3" json:"rewards_asset_pool_data,omitempty" yaml:"rewards_asset_pool_data"`
	TotalRewards         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=total_rewards,json=totalRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_rewards" yaml:"total_rewards"`
	MasterPoolId         uint64                                  `protobuf:"varint,5,opt,name=master_pool_id,json=masterPoolId,proto3" json:"master_pool_id,omitempty" yaml:"master_pool_id"`
	DurationDays         int64                                   `protobuf:"varint,6,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty" yaml:"duration_days"`
	IsActive             bool                                    `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" yaml:"is_active"`
	AvailableRewards     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,8,opt,name=available_rewards,json=availableRewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"available_rewards" yaml:"available_rewards"`
	Depositor            string                                  `protobuf:"bytes,9,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	StartTimestamp       time.Time                               `protobuf:"bytes,10,opt,name=start_timestamp,json=startTimestamp,proto3,stdtime" json:"start_timestamp" yaml:"start_timestamp"`
	EndTimestamp         time.Time                               `protobuf:"bytes,11,opt,name=end_timestamp,json=endTimestamp,proto3,stdtime" json:"end_timestamp" yaml:"end_timestamp"`
	MinLockupTimeSeconds int64                                   `protobuf:"varint,12,opt,name=min_lockup_time_seconds,json=minLockupTimeSeconds,proto3" json:"min_lockup_time_seconds,omitempty" yaml:"min_lockup_time_seconds"`
	EpochId              uint64                                  `protobuf:"varint,13,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty" yaml:"epoch_id"`
}

func (m *LendExternalRewards) Reset()         { *m = LendExternalRewards{} }
func (m *LendExternalRewards) String() string { return proto.CompactTextString(m) }
func (*LendExternalRewards) ProtoMessage()    {}
func (*LendExternalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{6}
}
func (m *LendExternalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendExternalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendExternalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendExternalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendExternalRewards.Merge(m, src)
}
func (m *LendExternalRewards) XXX_Size() int {
	return m.Size()
}
func (m *LendExternalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_LendExternalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_LendExternalRewards proto.InternalMessageInfo

func (m *LendExternalRewards) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LendExternalRewards) GetAppMappingId() uint64 {
	if m != nil {
		return m.AppMappingId
	}
	return 0
}

func (m *LendExternalRewards) GetRewardsAssetPoolData() *RewardsAssetPoolData {
	if m != nil {
		return m.RewardsAssetPoolData
	}
	return nil
}

func (m *LendExternalRewards) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TotalRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LendExternalRewards) GetMasterPoolId() uint64 {
	if m != nil {
		return m.MasterPoolId
	}
	return 0
}

func (m *LendExternalRewards) GetDurationDays() int64 {
	if m != nil {
		return m.DurationDays
	}
	return 0
}

func (m *LendExternalRewards) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *LendExternalRewards) GetAvailableRewards() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AvailableRewards
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LendExternalRewards) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *LendExternalRewards) GetStartTimestamp() time.Time {
	if m != nil {
		return m.StartTimestamp
	}
	return time.Time{}
}

func (m *LendExternalRewards) GetEndTimestamp() time.Time {
	if m != nil {
		return m.EndTimestamp
	}
	return time.Time{}
}

func (m *LendExternalRewards) GetMinLockupTimeSeconds() int64 {
	if m != nil {
		return m.MinLockupTimeSeconds
	}
	return 0
}

func (m *LendExternalRewards) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type RewardsAssetPoolData struct {
	CPoolId            uint64   `protobuf:"varint,1,opt,name=c_pool_id,json=cPoolId,proto3" json:"c_pool_id,omitempty" yaml:"c_pool_id"`
	AssetId            []uint64 `protobuf:"varint,2,rep,packed,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	CSwapAppId         uint64   `protobuf:"varint,3,opt,name=c_swap_app_id,json=cSwapAppId,proto3" json:"c_swap_app_id,omitempty" yaml:"c_swap_app_id"`
	CSwapMinLockAmount uint64   `protobuf:"varint,4,opt,name=c_swap_min_lock_amount,json=cSwapMinLockAmount,proto3" json:"c_swap_min_lock_amount,omitempty" yaml:"c_swap_min_lock_amount"`
}

func (m *RewardsAssetPoolData) Reset()         { *m = RewardsAssetPoolData{} }
func (m *RewardsAssetPoolData) String() string { return proto.CompactTextString(m) }
func (*RewardsAssetPoolData) ProtoMessage()    {}
func (*RewardsAssetPoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29f449503627a2b, []int{7}
}
func (m *RewardsAssetPoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAssetPoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAssetPoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAssetPoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAssetPoolData.Merge(m, src)
}
func (m *RewardsAssetPoolData) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAssetPoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAssetPoolData.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAssetPoolData proto.InternalMessageInfo

func (m *RewardsAssetPoolData) GetCPoolId() uint64 {
	if m != nil {
		return m.CPoolId
	}
	return 0
}

func (m *RewardsAssetPoolData) GetAssetId() []uint64 {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *RewardsAssetPoolData) GetCSwapAppId() uint64 {
	if m != nil {
		return m.CSwapAppId
	}
	return 0
}

func (m *RewardsAssetPoolData) GetCSwapMinLockAmount() uint64 {
	if m != nil {
		return m.CSwapMinLockAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*InternalRewards)(nil), "comdex.rewards.v1beta1.Internal_rewards")
	proto.RegisterType((*LockerRewardsTracker)(nil), "comdex.rewards.v1beta1.Locker_rewards_tracker")
	proto.RegisterType((*VaultInterestTracker)(nil), "comdex.rewards.v1beta1.Vault_interest_tracker")
	proto.RegisterType((*LockerExternalRewards)(nil), "comdex.rewards.v1beta1.Locker_external_rewards")
	proto.RegisterType((*VaultExternalRewards)(nil), "comdex.rewards.v1beta1.Vault_external_rewards")
	proto.RegisterType((*EpochTime)(nil), "comdex.rewards.v1beta1.EpochTime")
	proto.RegisterType((*LendExternalRewards)(nil), "comdex.rewards.v1beta1.Lend_external_rewards")
	proto.RegisterType((*RewardsAssetPoolData)(nil), "comdex.rewards.v1beta1.Rewards_asset_pool_data")
}

func init() {
	proto.RegisterFile("comdex/rewards/v1beta1/rewards.proto", fileDescriptor_d29f449503627a2b)
}

var fileDescriptor_d29f449503627a2b = []byte{
	// 1144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x69, 0x6c, 0x4f, 0xec, 0x24, 0x6c, 0xdc, 0xc4, 0x4d, 0x55, 0xaf, 0x19, 0xa1,
	0x12, 0x09, 0x75, 0x4d, 0x02, 0xa7, 0x22, 0x54, 0xd9, 0xb8, 0x42, 0x56, 0x13, 0xa9, 0x4c, 0x01,
	0x09, 0x2e, 0xab, 0xf1, 0xce, 0xc4, 0x1d, 0xd5, 0xbb, 0xb3, 0xf2, 0x8e, 0x93, 0xe6, 0x80, 0xc4,
	0x0d, 0x09, 0x90, 0xa8, 0xc4, 0x2f, 0xe0, 0xcf, 0xa0, 0x72, 0xeb, 0x11, 0x21, 0xb4, 0x20, 0xe7,
	0x1f, 0xf8, 0xc8, 0x09, 0xcd, 0xcc, 0xee, 0xda, 0xeb, 0x24, 0x4a, 0x5b, 0x42, 0xd4, 0x43, 0x4e,
	0x99, 0x79, 0xef, 0xcd, 0x7b, 0xf3, 0x3e, 0xbf, 0xef, 0xd3, 0x4e, 0xc0, 0x3b, 0x2e, 0xf7, 0x08,
	0x7d, 0xda, 0x18, 0xd0, 0x43, 0x3c, 0x20, 0x61, 0xe3, 0x60, 0xbb, 0x4b, 0x05, 0xde, 0x4e, 0xf6,
	0x76, 0x30, 0xe0, 0x82, 0x9b, 0xeb, 0x3a, 0xca, 0x4e, 0xac, 0x71, 0xd4, 0x66, 0xa5, 0xc7, 0x7b,
	0x5c, 0x85, 0x34, 0xe4, 0x4a, 0x47, 0x6f, 0x5a, 0x3d, 0xce, 0x7b, 0x7d, 0xda, 0x50, 0xbb, 0xee,
	0x70, 0xbf, 0x21, 0x98, 0x47, 0x43, 0x81, 0xbd, 0x20, 0x0e, 0xa8, 0xb9, 0x3c, 0xf4, 0x78, 0xd8,
	0xe8, 0xe2, 0x90, 0xa6, 0x15, 0x5d, 0xce, 0x7c, 0xed, 0x87, 0xbf, 0x18, 0x60, 0xb5, 0xe3, 0x0b,
	0x3a, 0xf0, 0x71, 0xdf, 0x89, 0x6b, 0x9a, 0x9f, 0x81, 0x65, 0x1c, 0x04, 0x8e, 0x87, 0x83, 0x80,
	0xf9, 0x3d, 0xa7, 0xd3, 0xae, 0x1a, 0x75, 0x63, 0x6b, 0xa1, 0xf5, 0xde, 0x28, 0xb2, 0x96, 0x9b,
	0x19, 0xcf, 0x38, 0xb2, 0xae, 0x1f, 0x61, 0xaf, 0x7f, 0x17, 0x66, 0x4f, 0x40, 0x54, 0xc2, 0x41,
	0xb0, 0xa7, 0xf7, 0x9d, 0xb6, 0x79, 0x17, 0x14, 0x70, 0x18, 0x52, 0x21, 0x93, 0xe5, 0x54, 0x32,
	0x6b, 0x14, 0x59, 0x85, 0x66, 0x6c, 0x1b, 0x47, 0xd6, 0x4a, 0x9c, 0x26, 0xb6, 0x40, 0x94, 0x57,
	0xcb, 0x4e, 0x1b, 0xfe, 0x90, 0x03, 0xeb, 0xbb, 0xdc, 0x7d, 0x42, 0x07, 0xc9, 0x0d, 0x1d, 0x31,
	0xc0, 0x72, 0x6f, 0x6e, 0x83, 0x62, 0x5f, 0x7b, 0x18, 0x89, 0x2f, 0x59, 0x19, 0x47, 0xd6, 0xaa,
	0xce, 0x95, 0xba, 0x20, 0x2a, 0xe8, 0x75, 0x87, 0x98, 0xf7, 0xb2, 0xcd, 0x31, 0x12, 0xdf, 0xe7,
	0xc6, 0xe9, 0xad, 0xc8, 0xc3, 0xd3, 0xad, 0x10, 0xf3, 0x1b, 0xb0, 0x96, 0x5c, 0x03, 0xbb, 0xee,
	0xd0, 0x1b, 0xf6, 0xb1, 0xa0, 0xa4, 0x3a, 0x5f, 0x37, 0xb6, 0x8a, 0xad, 0xdd, 0xe7, 0x91, 0x35,
	0xf7, 0x47, 0x64, 0xdd, 0xee, 0x31, 0xf1, 0x78, 0xd8, 0xb5, 0x5d, 0xee, 0x35, 0xe2, 0x9f, 0x40,
	0xff, 0xb9, 0x13, 0x92, 0x27, 0x0d, 0x71, 0x14, 0xd0, 0xd0, 0x6e, 0x53, 0x77, 0x1c, 0x59, 0x9b,
	0xba, 0xe6, 0x29, 0x29, 0x21, 0x32, 0x63, 0x6b, 0x73, 0xca, 0xf8, 0x63, 0x0e, 0xac, 0x7f, 0x89,
	0x87, 0x7d, 0xe1, 0x30, 0xf9, 0xbb, 0xd1, 0x50, 0xa4, 0x68, 0xd8, 0xa0, 0x70, 0xa0, 0x3d, 0x09,
	0x18, 0x6b, 0x13, 0x60, 0x13, 0x0f, 0x44, 0x79, 0xb5, 0xbc, 0x08, 0x28, 0xbe, 0x35, 0x40, 0x25,
	0xbd, 0xc5, 0x49, 0x30, 0xf6, 0x5e, 0x19, 0x8c, 0x9b, 0xba, 0xea, 0x69, 0x39, 0x21, 0x5a, 0x4b,
	0xcc, 0xd3, 0x70, 0xfc, 0x9a, 0x07, 0x1b, 0xf1, 0x70, 0xd0, 0xa7, 0x33, 0x73, 0x7c, 0x0b, 0xe4,
	0x52, 0x24, 0xca, 0xe3, 0xc8, 0x2a, 0xc6, 0xd9, 0x09, 0x44, 0x39, 0x76, 0x01, 0xed, 0xdb, 0xc9,
	0x50, 0x33, 0xdd, 0x71, 0x06, 0xef, 0xc4, 0x93, 0x0e, 0x32, 0x31, 0xbf, 0x33, 0x40, 0x59, 0x70,
	0x31, 0xb9, 0x61, 0x75, 0xa1, 0x6e, 0x6c, 0x2d, 0xed, 0xdc, 0xb0, 0x35, 0x1c, 0xb6, 0x64, 0x69,
	0xc2, 0x78, 0xfb, 0x13, 0xce, 0xfc, 0xd6, 0xa7, 0x12, 0xc2, 0x71, 0x64, 0x55, 0x74, 0xd2, 0xcc,
	0x69, 0xf8, 0x4f, 0x64, 0xbd, 0xfb, 0x12, 0xd0, 0xca, 0x44, 0xa8, 0xa4, 0x8e, 0xa2, 0x18, 0x99,
	0x8f, 0x41, 0x99, 0x0c, 0x07, 0x58, 0x30, 0xee, 0x3b, 0x04, 0x1f, 0x85, 0xd5, 0x6b, 0x75, 0x63,
	0x6b, 0xbe, 0x55, 0x9d, 0x54, 0xca, 0xb8, 0x21, 0x2a, 0x25, 0xfb, 0x36, 0x3e, 0x0a, 0x25, 0xed,
	0x98, 0x1c, 0x55, 0xc1, 0x0e, 0x68, 0x75, 0xb1, 0x6e, 0x6c, 0x15, 0xa6, 0x69, 0x97, 0xba, 0x20,
	0x2a, 0xb0, 0xb0, 0xa9, 0x96, 0xe6, 0xcf, 0x06, 0x78, 0x0b, 0x1f, 0x60, 0xd6, 0xc7, 0xdd, 0x3e,
	0x4d, 0xfb, 0xcf, 0x9f, 0xd7, 0xff, 0x83, 0xb8, 0xff, 0x6a, 0x0c, 0xea, 0x6c, 0x86, 0x57, 0xc2,
	0x60, 0x35, 0x3d, 0x9e, 0xe0, 0xb0, 0x03, 0x8a, 0x84, 0x06, 0x3c, 0x64, 0x82, 0x0f, 0xaa, 0x05,
	0x35, 0xb4, 0x53, 0x8d, 0xa4, 0x2e, 0x88, 0x26, 0x61, 0x66, 0x0f, 0xac, 0x84, 0x02, 0x0f, 0x84,
	0x93, 0x6a, 0x6d, 0xb5, 0xa8, 0xda, 0xd8, 0xb4, 0xb5, 0x1a, 0xdb, 0x89, 0x1a, 0xdb, 0x9f, 0x27,
	0x11, 0x2d, 0x18, 0xf7, 0xb1, 0xae, 0x33, 0xcf, 0x24, 0x80, 0xcf, 0xfe, 0xb2, 0x0c, 0xb4, 0xac,
	0xac, 0xe9, 0x19, 0x13, 0x83, 0x32, 0xf5, 0xc9, 0x54, 0x19, 0x70, 0x6e, 0x99, 0x7a, 0x76, 0x5c,
	0x32, 0xc7, 0x75, 0x91, 0x12, 0xf5, 0xc9, 0xa4, 0xc4, 0x57, 0x60, 0xc3, 0x63, 0xbe, 0x23, 0xc5,
	0x71, 0x18, 0xa8, 0x50, 0x27, 0xa4, 0x2e, 0xf7, 0x49, 0x58, 0x5d, 0x52, 0x13, 0x01, 0xc7, 0x91,
	0x55, 0xd3, 0xc9, 0xce, 0x08, 0x84, 0xa8, 0xe2, 0x31, 0x7f, 0x57, 0x39, 0x64, 0xe2, 0x47, 0xda,
	0x2c, 0xc9, 0x41, 0x03, 0xee, 0x3e, 0x96, 0xe4, 0x28, 0xcd, 0x92, 0x23, 0xf1, 0x40, 0x94, 0x57,
	0xcb, 0x0e, 0x81, 0x7f, 0xe6, 0x13, 0x5d, 0xbb, 0x74, 0x1e, 0xdf, 0x07, 0xab, 0xb2, 0xa6, 0x4f,
	0x28, 0x71, 0x1e, 0x62, 0x36, 0x70, 0x3a, 0x09, 0x9f, 0x6f, 0x8e, 0x23, 0x6b, 0x23, 0xbe, 0xf2,
	0x4c, 0x04, 0x44, 0xcb, 0x89, 0x49, 0x5a, 0xae, 0xe8, 0x7d, 0x45, 0xef, 0x2b, 0x7a, 0x9f, 0x4d,
	0xef, 0xdf, 0x0c, 0x50, 0xbc, 0x2f, 0xd7, 0x32, 0xc9, 0xff, 0xce, 0xe8, 0x0f, 0x41, 0x59, 0xa1,
	0x2d, 0xbd, 0xb2, 0x1b, 0x45, 0xe7, 0xf9, 0xd6, 0xca, 0x38, 0xb2, 0x96, 0x62, 0xaa, 0x31, 0x8f,
	0x42, 0x54, 0x4a, 0xa2, 0xd4, 0xad, 0x6e, 0x83, 0x6b, 0x2e, 0x1f, 0xfa, 0x42, 0xf1, 0x76, 0xa1,
	0xb5, 0x3a, 0x8e, 0xac, 0x92, 0x8e, 0x56, 0x66, 0x88, 0xb4, 0x1b, 0x8e, 0x0a, 0xe0, 0xfa, 0xae,
	0x04, 0xff, 0xd2, 0x95, 0xea, 0x7b, 0x03, 0x6c, 0xa4, 0x5f, 0x8a, 0xea, 0x03, 0x23, 0xe0, 0xbc,
	0xef, 0x10, 0x2c, 0xb0, 0x6a, 0x71, 0x69, 0xa7, 0x61, 0x9f, 0xfe, 0x80, 0xb0, 0xd1, 0xe9, 0xc7,
	0xa6, 0x47, 0xe0, 0x8c, 0xcc, 0x10, 0x55, 0x92, 0xef, 0x50, 0xe9, 0x78, 0xc8, 0x79, 0xbf, 0x8d,
	0x05, 0x7e, 0x83, 0xf4, 0xee, 0x1e, 0x58, 0xf6, 0x70, 0x28, 0xe8, 0x40, 0x5f, 0x9a, 0x11, 0x25,
	0x78, 0x19, 0x5c, 0xb3, 0x7e, 0x88, 0x4a, 0xda, 0x20, 0x9b, 0xe9, 0x90, 0x93, 0x82, 0xb9, 0xf8,
	0xfa, 0x82, 0x99, 0xff, 0x0f, 0x82, 0x59, 0x78, 0x93, 0x04, 0xb3, 0xf8, 0xda, 0x82, 0x09, 0x2e,
	0x47, 0x30, 0x97, 0x2e, 0x53, 0x30, 0x4b, 0x17, 0x28, 0x98, 0xe5, 0x97, 0x10, 0xcc, 0x9f, 0x72,
	0x60, 0xe3, 0x0c, 0xce, 0x9a, 0xef, 0x83, 0xa2, 0x9b, 0x8e, 0xfa, 0x89, 0x67, 0xaf, 0x3b, 0x99,
	0xf2, 0xbc, 0x1b, 0x0f, 0xf8, 0xf4, 0x53, 0x25, 0x57, 0x9f, 0x3f, 0xf7, 0xa9, 0xf2, 0x11, 0x28,
	0xbb, 0x4e, 0x78, 0x88, 0x03, 0x47, 0x0a, 0x52, 0xfa, 0xbe, 0x99, 0x22, 0x44, 0xc6, 0x0d, 0x11,
	0x70, 0x1f, 0x1d, 0xe2, 0xa0, 0x19, 0x04, 0x1d, 0x62, 0x7e, 0x01, 0xd6, 0x63, 0x6f, 0x82, 0x91,
	0x83, 0xbd, 0x29, 0x61, 0x7d, 0x7b, 0x1c, 0x59, 0xb7, 0x32, 0x59, 0x66, 0xe2, 0x20, 0x32, 0x55,
	0xba, 0x3d, 0x0d, 0x64, 0x53, 0x19, 0x5b, 0x0f, 0x9e, 0x8f, 0x6a, 0xc6, 0x8b, 0x51, 0xcd, 0xf8,
	0x7b, 0x54, 0x33, 0x9e, 0x1d, 0xd7, 0xe6, 0x5e, 0x1c, 0xd7, 0xe6, 0x7e, 0x3f, 0xae, 0xcd, 0x7d,
	0xbd, 0x9d, 0x99, 0x78, 0x29, 0x7f, 0x77, 0xf8, 0xfe, 0x3e, 0x73, 0x19, 0xee, 0xc7, 0xfb, 0xc6,
	0xe4, 0xff, 0x2e, 0x8a, 0x00, 0xdd, 0x45, 0x35, 0x2d, 0x1f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x68, 0x74, 0xd0, 0xbb, 0x96, 0x11, 0x00, 0x00,
}

func (m *InternalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset_ID != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Asset_ID))
		i--
		dAtA[i] = 0x10
	}
	if m.App_mapping_ID != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.App_mapping_ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerRewardsTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerRewardsTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerRewardsTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardsAccumulated.Size()
		i -= size
		if _, err := m.RewardsAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.LockerId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.LockerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VaultInterestTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultInterestTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultInterestTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InterestAccumulated.Size()
		i -= size
		if _, err := m.InterestAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.VaultId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerExternalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerExternalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerExternalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x60
	}
	if m.MinLockupTimeSeconds != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MinLockupTimeSeconds))
		i--
		dAtA[i] = 0x58
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRewards(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintRewards(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.AvailableRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DurationDays != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.DurationDays))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.AssetId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VaultExternalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultExternalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultExternalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x60
	}
	if m.MinLockupTimeSeconds != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MinLockupTimeSeconds))
		i--
		dAtA[i] = 0x58
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintRewards(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x52
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintRewards(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x4a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.AvailableRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DurationDays != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.DurationDays))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Extended_Pair_Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Extended_Pair_Id))
		i--
		dAtA[i] = 0x18
	}
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.StartingTime != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.StartingTime))
		i--
		dAtA[i] = 0x18
	}
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LendExternalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendExternalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendExternalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x68
	}
	if m.MinLockupTimeSeconds != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MinLockupTimeSeconds))
		i--
		dAtA[i] = 0x60
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintRewards(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x5a
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintRewards(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x52
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintRewards(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.AvailableRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DurationDays != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.DurationDays))
		i--
		dAtA[i] = 0x30
	}
	if m.MasterPoolId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.MasterPoolId))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRewards(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardsAssetPoolData != nil {
		{
			size, err := m.RewardsAssetPoolData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRewards(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AppMappingId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAssetPoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAssetPoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAssetPoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CSwapMinLockAmount != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.CSwapMinLockAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.CSwapAppId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.CSwapAppId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssetId) > 0 {
		dAtA15 := make([]byte, len(m.AssetId)*10)
		var j14 int
		for _, num := range m.AssetId {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintRewards(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x12
	}
	if m.CPoolId != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.CPoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InternalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.App_mapping_ID != 0 {
		n += 1 + sovRewards(uint64(m.App_mapping_ID))
	}
	if m.Asset_ID != 0 {
		n += 1 + sovRewards(uint64(m.Asset_ID))
	}
	return n
}

func (m *LockerRewardsTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerId != 0 {
		n += 1 + sovRewards(uint64(m.LockerId))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	l = m.RewardsAccumulated.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *VaultInterestTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovRewards(uint64(m.VaultId))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	l = m.InterestAccumulated.Size()
	n += 1 + l + sovRewards(uint64(l))
	return n
}

func (m *LockerExternalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRewards(uint64(m.Id))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	if m.AssetId != 0 {
		n += 1 + sovRewards(uint64(m.AssetId))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	if m.DurationDays != 0 {
		n += 1 + sovRewards(uint64(m.DurationDays))
	}
	if m.IsActive {
		n += 2
	}
	l = m.AvailableRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	if m.MinLockupTimeSeconds != 0 {
		n += 1 + sovRewards(uint64(m.MinLockupTimeSeconds))
	}
	if m.EpochId != 0 {
		n += 1 + sovRewards(uint64(m.EpochId))
	}
	return n
}

func (m *VaultExternalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRewards(uint64(m.Id))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	if m.Extended_Pair_Id != 0 {
		n += 1 + sovRewards(uint64(m.Extended_Pair_Id))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	if m.DurationDays != 0 {
		n += 1 + sovRewards(uint64(m.DurationDays))
	}
	if m.IsActive {
		n += 2
	}
	l = m.AvailableRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	if m.MinLockupTimeSeconds != 0 {
		n += 1 + sovRewards(uint64(m.MinLockupTimeSeconds))
	}
	if m.EpochId != 0 {
		n += 1 + sovRewards(uint64(m.EpochId))
	}
	return n
}

func (m *EpochTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRewards(uint64(m.Id))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	if m.StartingTime != 0 {
		n += 1 + sovRewards(uint64(m.StartingTime))
	}
	if m.Count != 0 {
		n += 1 + sovRewards(uint64(m.Count))
	}
	return n
}

func (m *LendExternalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRewards(uint64(m.Id))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovRewards(uint64(m.AppMappingId))
	}
	if m.RewardsAssetPoolData != nil {
		l = m.RewardsAssetPoolData.Size()
		n += 1 + l + sovRewards(uint64(l))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	if m.MasterPoolId != 0 {
		n += 1 + sovRewards(uint64(m.MasterPoolId))
	}
	if m.DurationDays != 0 {
		n += 1 + sovRewards(uint64(m.DurationDays))
	}
	if m.IsActive {
		n += 2
	}
	l = m.AvailableRewards.Size()
	n += 1 + l + sovRewards(uint64(l))
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovRewards(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimestamp)
	n += 1 + l + sovRewards(uint64(l))
	if m.MinLockupTimeSeconds != 0 {
		n += 1 + sovRewards(uint64(m.MinLockupTimeSeconds))
	}
	if m.EpochId != 0 {
		n += 1 + sovRewards(uint64(m.EpochId))
	}
	return n
}

func (m *RewardsAssetPoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CPoolId != 0 {
		n += 1 + sovRewards(uint64(m.CPoolId))
	}
	if len(m.AssetId) > 0 {
		l = 0
		for _, e := range m.AssetId {
			l += sovRewards(uint64(e))
		}
		n += 1 + sovRewards(uint64(l)) + l
	}
	if m.CSwapAppId != 0 {
		n += 1 + sovRewards(uint64(m.CSwapAppId))
	}
	if m.CSwapMinLockAmount != 0 {
		n += 1 + sovRewards(uint64(m.CSwapMinLockAmount))
	}
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InternalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Internal_rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Internal_rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field App_mapping_ID", wireType)
			}
			m.App_mapping_ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.App_mapping_ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset_ID", wireType)
			}
			m.Asset_ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asset_ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerRewardsTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locker_rewards_tracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locker_rewards_tracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			m.LockerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultInterestTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault_interest_tracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault_interest_tracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerExternalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locker_external_rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locker_external_rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationDays", wireType)
			}
			m.DurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationDays |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockupTimeSeconds", wireType)
			}
			m.MinLockupTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLockupTimeSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultExternalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault_external_rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault_external_rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extended_Pair_Id", wireType)
			}
			m.Extended_Pair_Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extended_Pair_Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationDays", wireType)
			}
			m.DurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationDays |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockupTimeSeconds", wireType)
			}
			m.MinLockupTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLockupTimeSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingTime", wireType)
			}
			m.StartingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendExternalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lend_external_rewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lend_external_rewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAssetPoolData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardsAssetPoolData == nil {
				m.RewardsAssetPoolData = &RewardsAssetPoolData{}
			}
			if err := m.RewardsAssetPoolData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPoolId", wireType)
			}
			m.MasterPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationDays", wireType)
			}
			m.DurationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationDays |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockupTimeSeconds", wireType)
			}
			m.MinLockupTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLockupTimeSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAssetPoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rewards_asset_pool_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rewards_asset_pool_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolId", wireType)
			}
			m.CPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRewards
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetId = append(m.AssetId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRewards
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRewards
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRewards
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetId) == 0 {
					m.AssetId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRewards
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetId = append(m.AssetId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSwapAppId", wireType)
			}
			m.CSwapAppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CSwapAppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSwapMinLockAmount", wireType)
			}
			m.CSwapMinLockAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CSwapMinLockAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
