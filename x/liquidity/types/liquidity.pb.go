// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidity/v1beta1/liquidity.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderDirection enumerates order directions.
type OrderDirection int32

const (
	// ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
	OrderDirectionUnspecified OrderDirection = 0
	// ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
	OrderDirectionBuy OrderDirection = 1
	// ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
	OrderDirectionSell OrderDirection = 2
)

var OrderDirection_name = map[int32]string{
	0: "ORDER_DIRECTION_UNSPECIFIED",
	1: "ORDER_DIRECTION_BUY",
	2: "ORDER_DIRECTION_SELL",
}

var OrderDirection_value = map[string]int32{
	"ORDER_DIRECTION_UNSPECIFIED": 0,
	"ORDER_DIRECTION_BUY":         1,
	"ORDER_DIRECTION_SELL":        2,
}

func (x OrderDirection) String() string {
	return proto.EnumName(OrderDirection_name, int32(x))
}

func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{0}
}

// RequestStatus enumerates request statuses.
type RequestStatus int32

const (
	// REQUEST_STATUS_UNSPECIFIED specifies unknown request status
	RequestStatusUnspecified RequestStatus = 0
	// REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
	RequestStatusNotExecuted RequestStatus = 1
	// REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
	RequestStatusSucceeded RequestStatus = 2
	// REQUEST_STATUS_FAILED indicates the request is failed
	RequestStatusFailed RequestStatus = 3
)

var RequestStatus_name = map[int32]string{
	0: "REQUEST_STATUS_UNSPECIFIED",
	1: "REQUEST_STATUS_NOT_EXECUTED",
	2: "REQUEST_STATUS_SUCCEEDED",
	3: "REQUEST_STATUS_FAILED",
}

var RequestStatus_value = map[string]int32{
	"REQUEST_STATUS_UNSPECIFIED":  0,
	"REQUEST_STATUS_NOT_EXECUTED": 1,
	"REQUEST_STATUS_SUCCEEDED":    2,
	"REQUEST_STATUS_FAILED":       3,
}

func (x RequestStatus) String() string {
	return proto.EnumName(RequestStatus_name, int32(x))
}

func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{1}
}

// OrderStatus enumerates order statuses.
type OrderStatus int32

const (
	// ORDER_STATUS_UNSPECIFIED specifies unknown order status
	OrderStatusUnspecified OrderStatus = 0
	// ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
	OrderStatusNotExecuted OrderStatus = 1
	// ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
	OrderStatusNotMatched OrderStatus = 2
	// ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
	OrderStatusPartiallyMatched OrderStatus = 3
	// ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
	OrderStatusCompleted OrderStatus = 4
	// ORDER_STATUS_CANCELED indicates the order has been canceled
	OrderStatusCanceled OrderStatus = 5
	// ORDER_STATUS_EXPIRED indicates the order has been expired
	OrderStatusExpired OrderStatus = 6
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_STATUS_NOT_EXECUTED",
	2: "ORDER_STATUS_NOT_MATCHED",
	3: "ORDER_STATUS_PARTIALLY_MATCHED",
	4: "ORDER_STATUS_COMPLETED",
	5: "ORDER_STATUS_CANCELED",
	6: "ORDER_STATUS_EXPIRED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED":       0,
	"ORDER_STATUS_NOT_EXECUTED":      1,
	"ORDER_STATUS_NOT_MATCHED":       2,
	"ORDER_STATUS_PARTIALLY_MATCHED": 3,
	"ORDER_STATUS_COMPLETED":         4,
	"ORDER_STATUS_CANCELED":          5,
	"ORDER_STATUS_EXPIRED":           6,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{2}
}

// AddressType enumerates the available types of a address.
type AddressType int32

const (
	// the 32 bytes length address type of ADR 028.
	AddressType32Bytes AddressType = 0
	// the default 20 bytes length address type.
	AddressType20Bytes AddressType = 1
)

var AddressType_name = map[int32]string{
	0: "ADDRESS_TYPE_32_BYTES",
	1: "ADDRESS_TYPE_20_BYTES",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_32_BYTES": 0,
	"ADDRESS_TYPE_20_BYTES": 1,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{3}
}

// Pair defines a coin pair.
type Pair struct {
	Id                      uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseCoinDenom           string                                  `protobuf:"bytes,2,opt,name=base_coin_denom,json=baseCoinDenom,proto3" json:"base_coin_denom,omitempty"`
	QuoteCoinDenom          string                                  `protobuf:"bytes,3,opt,name=quote_coin_denom,json=quoteCoinDenom,proto3" json:"quote_coin_denom,omitempty"`
	EscrowAddress           string                                  `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	LastOrderId             uint64                                  `protobuf:"varint,5,opt,name=last_order_id,json=lastOrderId,proto3" json:"last_order_id,omitempty"`
	LastPrice               *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=last_price,json=lastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_price,omitempty"`
	CurrentBatchId          uint64                                  `protobuf:"varint,7,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty"`
	SwapFeeCollectorAddress string                                  `protobuf:"bytes,8,opt,name=swap_fee_collector_address,json=swapFeeCollectorAddress,proto3" json:"swap_fee_collector_address,omitempty"`
	AppId                   uint64                                  `protobuf:"varint,9,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{0}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return m.Size()
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

// Pool defines a basic liquidity pool with no min-price and max-price.
type Pool struct {
	Id                    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PairId                uint64 `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	ReserveAddress        string `protobuf:"bytes,3,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	PoolCoinDenom         string `protobuf:"bytes,4,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty"`
	LastDepositRequestId  uint64 `protobuf:"varint,5,opt,name=last_deposit_request_id,json=lastDepositRequestId,proto3" json:"last_deposit_request_id,omitempty"`
	LastWithdrawRequestId uint64 `protobuf:"varint,6,opt,name=last_withdraw_request_id,json=lastWithdrawRequestId,proto3" json:"last_withdraw_request_id,omitempty"`
	Disabled              bool   `protobuf:"varint,7,opt,name=disabled,proto3" json:"disabled,omitempty"`
	AppId                 uint64 `protobuf:"varint,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// DepositRequest defines a deposit request.
type DepositRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// depositor specifies the bech32-encoded address that makes a deposit to the pool
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// deposit_coins specifies the amount of coins to deposit.
	DepositCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=deposit_coins,json=depositCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit_coins"`
	// accepted_coins specifies the amount of coins that are accepted.
	AcceptedCoins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=accepted_coins,json=acceptedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"accepted_coins"`
	MintedPoolCoin types.Coin                               `protobuf:"bytes,7,opt,name=minted_pool_coin,json=mintedPoolCoin,proto3" json:"minted_pool_coin"`
	Status         RequestStatus                            `protobuf:"varint,8,opt,name=status,proto3,enum=comdex.liquidity.v1beta1.RequestStatus" json:"status,omitempty"`
	AppId          uint64                                   `protobuf:"varint,9,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{2}
}
func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

// WithdrawRequest defines a withdraw request.
type WithdrawRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
	Withdrawer string `protobuf:"bytes,4,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	// pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
	PoolCoin types.Coin `protobuf:"bytes,5,opt,name=pool_coin,json=poolCoin,proto3" json:"pool_coin"`
	// withdrawn_coins specifies the amount of coins that are withdrawn.
	WithdrawnCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=withdrawn_coins,json=withdrawnCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_coins"`
	Status         RequestStatus                            `protobuf:"varint,7,opt,name=status,proto3,enum=comdex.liquidity.v1beta1.RequestStatus" json:"status,omitempty"`
	AppId          uint64                                   `protobuf:"varint,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{3}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

// Order defines an order.
type Order struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pair_id specifies the pair id
	PairId uint64 `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// orderer specifies the bech32-encoded address that makes an order
	Orderer string `protobuf:"bytes,4,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// direction specifies the order direction; either buy or sell
	Direction OrderDirection `protobuf:"varint,5,opt,name=direction,proto3,enum=comdex.liquidity.v1beta1.OrderDirection" json:"direction,omitempty"`
	OfferCoin types.Coin     `protobuf:"bytes,6,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin"`
	// remaining_offer_coin specifies the remaining offer coin
	RemainingOfferCoin types.Coin `protobuf:"bytes,7,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin"`
	// received_coin specifies the received coin after the swap
	ReceivedCoin types.Coin `protobuf:"bytes,8,opt,name=received_coin,json=receivedCoin,proto3" json:"received_coin"`
	// price specifies the price that an orderer is willing to swap
	Price      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	OpenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=open_amount,json=openAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"open_amount"`
	// batch_id specifies the pair's batch id when the request is stored
	BatchId  uint64      `protobuf:"varint,12,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	ExpireAt time.Time   `protobuf:"bytes,13,opt,name=expire_at,json=expireAt,proto3,stdtime" json:"expire_at"`
	Status   OrderStatus `protobuf:"varint,14,opt,name=status,proto3,enum=comdex.liquidity.v1beta1.OrderStatus" json:"status,omitempty"`
	AppId    uint64      `protobuf:"varint,15,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{4}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

type DepositsMade struct {
	Coins []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=coins,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coins"`
}

func (m *DepositsMade) Reset()         { *m = DepositsMade{} }
func (m *DepositsMade) String() string { return proto.CompactTextString(m) }
func (*DepositsMade) ProtoMessage()    {}
func (*DepositsMade) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{5}
}
func (m *DepositsMade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositsMade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositsMade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositsMade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositsMade.Merge(m, src)
}
func (m *DepositsMade) XXX_Size() int {
	return m.Size()
}
func (m *DepositsMade) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositsMade.DiscardUnknown(m)
}

var xxx_messageInfo_DepositsMade proto.InternalMessageInfo

type QueuedLiquidityProvider struct {
	Address        string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SupplyProvided []*types.Coin `protobuf:"bytes,2,rep,name=supply_provided,json=supplyProvided,proto3" json:"supply_provided,omitempty"`
	CreatedAt      time.Time     `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
}

func (m *QueuedLiquidityProvider) Reset()         { *m = QueuedLiquidityProvider{} }
func (m *QueuedLiquidityProvider) String() string { return proto.CompactTextString(m) }
func (*QueuedLiquidityProvider) ProtoMessage()    {}
func (*QueuedLiquidityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{6}
}
func (m *QueuedLiquidityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedLiquidityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedLiquidityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedLiquidityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedLiquidityProvider.Merge(m, src)
}
func (m *QueuedLiquidityProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueuedLiquidityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedLiquidityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedLiquidityProvider proto.InternalMessageInfo

type PoolLiquidityProvidersData struct {
	PoolId                   uint64                     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BondedLockIds            []uint64                   `protobuf:"varint,2,rep,packed,name=bonded_lock_ids,json=bondedLockIds,proto3" json:"bonded_lock_ids,omitempty" yaml:"bonded_lock_ids"`
	LiquidityProviders       map[string]*DepositsMade   `protobuf:"bytes,3,rep,name=liquidity_providers,json=liquidityProviders,proto3" json:"liquidity_providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueuedLiquidityProviders []*QueuedLiquidityProvider `protobuf:"bytes,4,rep,name=queued_liquidity_providers,json=queuedLiquidityProviders,proto3" json:"queued_liquidity_providers,omitempty"`
	AppId                    uint64                     `protobuf:"varint,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *PoolLiquidityProvidersData) Reset()         { *m = PoolLiquidityProvidersData{} }
func (m *PoolLiquidityProvidersData) String() string { return proto.CompactTextString(m) }
func (*PoolLiquidityProvidersData) ProtoMessage()    {}
func (*PoolLiquidityProvidersData) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{7}
}
func (m *PoolLiquidityProvidersData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolLiquidityProvidersData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolLiquidityProvidersData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolLiquidityProvidersData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolLiquidityProvidersData.Merge(m, src)
}
func (m *PoolLiquidityProvidersData) XXX_Size() int {
	return m.Size()
}
func (m *PoolLiquidityProvidersData) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolLiquidityProvidersData.DiscardUnknown(m)
}

var xxx_messageInfo_PoolLiquidityProvidersData proto.InternalMessageInfo

type ActiveFarmer struct {
	AppId          uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PoolId         uint64                                  `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Farmer         string                                  `protobuf:"bytes,3,opt,name=farmer,proto3" json:"farmer,omitempty"`
	FarmedPoolCoin github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=farmed_pool_coin,json=farmedPoolCoin,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"farmed_pool_coin"`
}

func (m *ActiveFarmer) Reset()         { *m = ActiveFarmer{} }
func (m *ActiveFarmer) String() string { return proto.CompactTextString(m) }
func (*ActiveFarmer) ProtoMessage()    {}
func (*ActiveFarmer) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{8}
}
func (m *ActiveFarmer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveFarmer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveFarmer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveFarmer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveFarmer.Merge(m, src)
}
func (m *ActiveFarmer) XXX_Size() int {
	return m.Size()
}
func (m *ActiveFarmer) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveFarmer.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveFarmer proto.InternalMessageInfo

type QueuedCoin struct {
	FarmedPoolCoin github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=farmed_pool_coin,json=farmedPoolCoin,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"farmed_pool_coin"`
	CreatedAt      time.Time                               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
}

func (m *QueuedCoin) Reset()         { *m = QueuedCoin{} }
func (m *QueuedCoin) String() string { return proto.CompactTextString(m) }
func (*QueuedCoin) ProtoMessage()    {}
func (*QueuedCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{9}
}
func (m *QueuedCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedCoin.Merge(m, src)
}
func (m *QueuedCoin) XXX_Size() int {
	return m.Size()
}
func (m *QueuedCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedCoin.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedCoin proto.InternalMessageInfo

type QueuedFarmer struct {
	AppId      uint64        `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PoolId     uint64        `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Farmer     string        `protobuf:"bytes,3,opt,name=farmer,proto3" json:"farmer,omitempty"`
	QueudCoins []*QueuedCoin `protobuf:"bytes,4,rep,name=queud_coins,json=queudCoins,proto3" json:"queud_coins,omitempty"`
}

func (m *QueuedFarmer) Reset()         { *m = QueuedFarmer{} }
func (m *QueuedFarmer) String() string { return proto.CompactTextString(m) }
func (*QueuedFarmer) ProtoMessage()    {}
func (*QueuedFarmer) Descriptor() ([]byte, []int) {
	return fileDescriptor_579dcc42096fa86d, []int{10}
}
func (m *QueuedFarmer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedFarmer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedFarmer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedFarmer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedFarmer.Merge(m, src)
}
func (m *QueuedFarmer) XXX_Size() int {
	return m.Size()
}
func (m *QueuedFarmer) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedFarmer.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedFarmer proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("comdex.liquidity.v1beta1.OrderDirection", OrderDirection_name, OrderDirection_value)
	proto.RegisterEnum("comdex.liquidity.v1beta1.RequestStatus", RequestStatus_name, RequestStatus_value)
	proto.RegisterEnum("comdex.liquidity.v1beta1.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("comdex.liquidity.v1beta1.AddressType", AddressType_name, AddressType_value)
	proto.RegisterType((*Pair)(nil), "comdex.liquidity.v1beta1.Pair")
	proto.RegisterType((*Pool)(nil), "comdex.liquidity.v1beta1.Pool")
	proto.RegisterType((*DepositRequest)(nil), "comdex.liquidity.v1beta1.DepositRequest")
	proto.RegisterType((*WithdrawRequest)(nil), "comdex.liquidity.v1beta1.WithdrawRequest")
	proto.RegisterType((*Order)(nil), "comdex.liquidity.v1beta1.Order")
	proto.RegisterType((*DepositsMade)(nil), "comdex.liquidity.v1beta1.DepositsMade")
	proto.RegisterType((*QueuedLiquidityProvider)(nil), "comdex.liquidity.v1beta1.QueuedLiquidityProvider")
	proto.RegisterType((*PoolLiquidityProvidersData)(nil), "comdex.liquidity.v1beta1.PoolLiquidityProvidersData")
	proto.RegisterMapType((map[string]*DepositsMade)(nil), "comdex.liquidity.v1beta1.PoolLiquidityProvidersData.LiquidityProvidersEntry")
	proto.RegisterType((*ActiveFarmer)(nil), "comdex.liquidity.v1beta1.ActiveFarmer")
	proto.RegisterType((*QueuedCoin)(nil), "comdex.liquidity.v1beta1.QueuedCoin")
	proto.RegisterType((*QueuedFarmer)(nil), "comdex.liquidity.v1beta1.QueuedFarmer")
}

func init() {
	proto.RegisterFile("comdex/liquidity/v1beta1/liquidity.proto", fileDescriptor_579dcc42096fa86d)
}

var fileDescriptor_579dcc42096fa86d = []byte{
	// 1818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6e, 0xdb, 0xd8,
	0x15, 0x36, 0xf5, 0x67, 0xeb, 0xd8, 0x96, 0x35, 0x37, 0xfe, 0x91, 0x99, 0x89, 0x24, 0x08, 0x9d,
	0xc4, 0x08, 0x30, 0x52, 0xa2, 0xb4, 0x98, 0xe9, 0x34, 0x33, 0x85, 0x7e, 0x68, 0x8c, 0x00, 0xc5,
	0x56, 0x28, 0x19, 0x4d, 0xba, 0x61, 0x29, 0xf2, 0x5a, 0x26, 0x42, 0xe9, 0xd2, 0x24, 0xe5, 0x44,
	0x8b, 0x02, 0xdd, 0x14, 0x28, 0xb4, 0x9a, 0x17, 0xd0, 0xa6, 0xb3, 0xeb, 0x13, 0xf4, 0x11, 0xb2,
	0xe8, 0x62, 0xba, 0x2b, 0x8a, 0xc2, 0xd3, 0x26, 0x0f, 0x50, 0x60, 0x96, 0x45, 0x81, 0x16, 0xf7,
	0x5e, 0x52, 0x22, 0x65, 0x2b, 0x76, 0x5a, 0x67, 0x15, 0xf1, 0xdc, 0xf3, 0x9d, 0x9f, 0xef, 0x9c,
	0x73, 0xef, 0x89, 0x61, 0x4f, 0x23, 0x7d, 0x1d, 0xbf, 0x2a, 0x99, 0xc6, 0xe9, 0xd0, 0xd0, 0x0d,
	0x77, 0x54, 0x3a, 0x7b, 0xd8, 0xc5, 0xae, 0xfa, 0x70, 0x26, 0x29, 0x5a, 0x36, 0x71, 0x09, 0xca,
	0x70, 0xcd, 0xe2, 0x4c, 0xee, 0x69, 0x8a, 0x9b, 0x3d, 0xd2, 0x23, 0x4c, 0xa9, 0x44, 0x7f, 0x71,
	0x7d, 0x31, 0xab, 0x11, 0xa7, 0x4f, 0x9c, 0x52, 0x57, 0x75, 0xf0, 0xd4, 0xa8, 0x46, 0x8c, 0x81,
	0x77, 0x9e, 0xeb, 0x11, 0xd2, 0x33, 0x71, 0x89, 0x7d, 0x75, 0x87, 0xc7, 0x25, 0xd7, 0xe8, 0x63,
	0xc7, 0x55, 0xfb, 0x16, 0x57, 0x28, 0xfc, 0x3b, 0x02, 0xb1, 0x96, 0x6a, 0xd8, 0x28, 0x05, 0x11,
	0x43, 0xcf, 0x08, 0x79, 0x61, 0x2f, 0x26, 0x47, 0x0c, 0x1d, 0xdd, 0x85, 0x0d, 0x6a, 0x54, 0xa1,
	0xc6, 0x14, 0x1d, 0x0f, 0x48, 0x3f, 0x13, 0xc9, 0x0b, 0x7b, 0x49, 0x79, 0x9d, 0x8a, 0x6b, 0xc4,
	0x18, 0xd4, 0xa9, 0x10, 0xed, 0x41, 0xfa, 0x74, 0x48, 0xdc, 0x90, 0x62, 0x94, 0x29, 0xa6, 0x98,
	0x7c, 0xa6, 0xf9, 0x09, 0xa4, 0xb0, 0xa3, 0xd9, 0xe4, 0xa5, 0xa2, 0xea, 0xba, 0x8d, 0x1d, 0x27,
	0x13, 0xe3, 0x06, 0xb9, 0xb4, 0xc2, 0x85, 0xa8, 0x00, 0xeb, 0xa6, 0xea, 0xb8, 0x0a, 0xb1, 0x75,
	0x6c, 0x2b, 0x86, 0x9e, 0x89, 0xb3, 0x98, 0x56, 0xa9, 0xf0, 0x90, 0xca, 0x1a, 0x3a, 0x6a, 0x00,
	0x30, 0x1d, 0xcb, 0x36, 0x34, 0x9c, 0x49, 0x50, 0x33, 0xd5, 0xfb, 0x7f, 0x3d, 0xcf, 0xdd, 0xed,
	0x19, 0xee, 0xc9, 0xb0, 0x5b, 0xd4, 0x48, 0xbf, 0xe4, 0x31, 0xc3, 0xff, 0xf9, 0xd4, 0xd1, 0x5f,
	0x94, 0xdc, 0x91, 0x85, 0x9d, 0x62, 0x1d, 0x6b, 0x72, 0x92, 0xa2, 0x5b, 0x14, 0x4c, 0xe3, 0xd7,
	0x86, 0xb6, 0x8d, 0x07, 0xae, 0xd2, 0x55, 0x5d, 0xed, 0x84, 0x7a, 0x5c, 0x66, 0x1e, 0x53, 0x9e,
	0xbc, 0x4a, 0xc5, 0x0d, 0x1d, 0xfd, 0x0c, 0x44, 0xe7, 0xa5, 0x6a, 0x29, 0xc7, 0x98, 0x26, 0x6b,
	0x9a, 0x58, 0x73, 0x89, 0x3d, 0xcd, 0x65, 0x85, 0xe5, 0xb2, 0x43, 0x35, 0xf6, 0x31, 0xae, 0xf9,
	0xe7, 0x7e, 0x56, 0x5b, 0x90, 0x50, 0x2d, 0x8b, 0x1a, 0x4f, 0x32, 0xe3, 0x71, 0xd5, 0xb2, 0x1a,
	0x7a, 0xe1, 0x5b, 0x4a, 0x3f, 0x21, 0xe6, 0x05, 0xfa, 0x77, 0x60, 0xd9, 0x52, 0x0d, 0x96, 0x7f,
	0x84, 0x09, 0x13, 0xf4, 0xb3, 0xa1, 0xa3, 0x7b, 0xb0, 0x61, 0x63, 0x07, 0xdb, 0x67, 0x78, 0xea,
	0xda, 0xa3, 0xdb, 0x13, 0xfb, 0x1e, 0xef, 0xc2, 0x86, 0x45, 0x88, 0x19, 0xac, 0x8b, 0xc7, 0x37,
	0x15, 0xcf, 0xca, 0xf2, 0x13, 0xd8, 0x61, 0x5c, 0xea, 0xd8, 0x22, 0x8e, 0xe1, 0x2a, 0x36, 0x3e,
	0x1d, 0x62, 0xc7, 0x9d, 0x31, 0xbf, 0x49, 0x8f, 0xeb, 0xfc, 0x54, 0xe6, 0x87, 0x0d, 0x1d, 0x7d,
	0x06, 0x19, 0x06, 0x7b, 0x69, 0xb8, 0x27, 0xba, 0xad, 0xbe, 0x0c, 0xe2, 0x12, 0x0c, 0xb7, 0x45,
	0xcf, 0x7f, 0xe1, 0x1d, 0xcf, 0x80, 0x22, 0xac, 0xe8, 0x86, 0xa3, 0x76, 0x4d, 0xcc, 0x89, 0x5e,
	0x91, 0xa7, 0xdf, 0x01, 0x96, 0x56, 0x82, 0x2c, 0xfd, 0x27, 0x0a, 0xa9, 0x70, 0x00, 0x97, 0xf2,
	0x45, 0xb3, 0x0d, 0xf0, 0x45, 0x88, 0xd9, 0xd0, 0xd1, 0x1d, 0x80, 0xbe, 0xd3, 0x53, 0x4e, 0xb0,
	0xd1, 0x3b, 0x71, 0x19, 0x55, 0x51, 0x39, 0xd9, 0x77, 0x7a, 0x5f, 0x33, 0x01, 0xfa, 0x18, 0x92,
	0x5e, 0xe2, 0xc4, 0xf6, 0xf8, 0x99, 0x09, 0x90, 0x05, 0xeb, 0x3e, 0x2d, 0x94, 0x46, 0x27, 0x13,
	0xcf, 0x47, 0xf7, 0x56, 0xcb, 0xbb, 0x45, 0xde, 0x55, 0x45, 0x3a, 0x0a, 0xfe, 0x84, 0x16, 0x29,
	0xa5, 0xd5, 0x07, 0xaf, 0xcf, 0x73, 0x4b, 0x7f, 0xf8, 0x3e, 0xb7, 0x77, 0x8d, 0x4e, 0xa4, 0x00,
	0x47, 0x5e, 0xf3, 0x3c, 0xb0, 0x2f, 0x64, 0x43, 0x4a, 0xd5, 0x34, 0x6c, 0xb9, 0x58, 0xf7, 0x5c,
	0x26, 0x6e, 0xde, 0xe5, 0xba, 0xef, 0x82, 0xfb, 0x6c, 0x40, 0xba, 0x6f, 0x0c, 0xa8, 0xc7, 0x69,
	0xc3, 0xb0, 0xca, 0xbc, 0xd3, 0x6b, 0x8c, 0x7a, 0x95, 0x53, 0x1c, 0xd8, 0xf2, 0x3a, 0x0a, 0xfd,
	0x1c, 0x12, 0x8e, 0xab, 0xba, 0x43, 0x3e, 0x0f, 0xa9, 0xf2, 0xbd, 0xe2, 0xa2, 0x0b, 0xad, 0xe8,
	0x55, 0xb2, 0xcd, 0xd4, 0x65, 0x0f, 0xb6, 0x68, 0x4e, 0x7e, 0x1b, 0x85, 0x8d, 0xb9, 0x56, 0xba,
	0xb1, 0x16, 0xc8, 0x02, 0xf8, 0x4d, 0x8c, 0xfd, 0x1e, 0x08, 0x48, 0xd0, 0x63, 0x48, 0xce, 0x78,
	0x89, 0x5f, 0x8f, 0x97, 0x15, 0x7f, 0xc6, 0x90, 0x0b, 0x1b, 0xbe, 0xad, 0xc1, 0x87, 0xab, 0x68,
	0x6a, 0xea, 0x83, 0x97, 0x74, 0x56, 0x87, 0xe5, 0xff, 0xb7, 0x0e, 0xa1, 0x49, 0x9c, 0x24, 0x20,
	0xce, 0x2e, 0xe1, 0xeb, 0x5f, 0x58, 0x57, 0xb0, 0x9f, 0x81, 0x65, 0x76, 0xd3, 0x4f, 0xa9, 0xf7,
	0x3f, 0xd1, 0x3e, 0x24, 0x75, 0xc3, 0xc6, 0x9a, 0x6b, 0x10, 0xce, 0x7b, 0xaa, 0xbc, 0xb7, 0x38,
	0x0d, 0x16, 0x55, 0xdd, 0xd7, 0x97, 0x67, 0x50, 0xf4, 0x15, 0x00, 0x39, 0x3e, 0xc6, 0x36, 0x2f,
	0x60, 0xe2, 0x7a, 0x05, 0x4c, 0x32, 0x08, 0xab, 0xe0, 0x53, 0xd8, 0xb4, 0x71, 0x5f, 0x35, 0x06,
	0xc6, 0xa0, 0xa7, 0x04, 0x2c, 0x5d, 0x73, 0x44, 0xd0, 0x14, 0x7c, 0x38, 0x35, 0x59, 0x87, 0x75,
	0x1b, 0x6b, 0xd8, 0x38, 0xf3, 0xa6, 0x9c, 0x91, 0x7c, 0x0d, 0x5b, 0x6b, 0x3e, 0xca, 0xb3, 0x12,
	0xe7, 0x0f, 0x60, 0x92, 0x3d, 0x80, 0x45, 0xaa, 0xf2, 0x1e, 0x8f, 0x20, 0x07, 0xa3, 0x7d, 0x48,
	0xa8, 0x7d, 0x32, 0x1c, 0xb8, 0x19, 0x78, 0x6f, 0x33, 0x8d, 0x81, 0x2b, 0x7b, 0x68, 0x74, 0x08,
	0xab, 0xc4, 0xc2, 0x03, 0xc5, 0x33, 0xb6, 0xfa, 0x3f, 0x19, 0x03, 0x6a, 0xa2, 0xc2, 0x0d, 0xee,
	0xc2, 0xca, 0xf4, 0x45, 0x5e, 0x63, 0x2d, 0xb5, 0xdc, 0xf5, 0x9e, 0xe2, 0x0a, 0x24, 0xf1, 0x2b,
	0xcb, 0xb0, 0xb1, 0xa2, 0xba, 0x99, 0x75, 0xc6, 0x9d, 0x58, 0xe4, 0xab, 0x4e, 0xd1, 0x5f, 0x75,
	0x8a, 0x1d, 0x7f, 0xd5, 0xa9, 0xae, 0xd0, 0x28, 0xbe, 0xf9, 0x3e, 0x27, 0xc8, 0x2b, 0x1c, 0x56,
	0x71, 0xd1, 0x97, 0xd3, 0x09, 0x49, 0xb1, 0xd6, 0xfa, 0xe4, 0x8a, 0xd6, 0x5a, 0x38, 0x1f, 0x1b,
	0xc1, 0xf9, 0xb0, 0x60, 0xcd, 0x7b, 0xa8, 0x9c, 0x27, 0xaa, 0x8e, 0xd1, 0xaf, 0x20, 0xce, 0x67,
	0x5e, 0xb8, 0x6a, 0xe6, 0x4b, 0x34, 0xc6, 0x7f, 0x9d, 0xe7, 0xee, 0x5d, 0x73, 0xe6, 0x65, 0x6e,
	0xb8, 0xf0, 0x67, 0x01, 0x76, 0x9e, 0x0e, 0xf1, 0x10, 0xeb, 0x4d, 0x3f, 0xf0, 0x96, 0x4d, 0xce,
	0x0c, 0x3a, 0xa3, 0x19, 0x58, 0xf6, 0x77, 0x04, 0x81, 0xcf, 0x96, 0xf7, 0x89, 0xaa, 0xb0, 0xe1,
	0x0c, 0x2d, 0xcb, 0x1c, 0x29, 0x16, 0x57, 0xa6, 0x53, 0xfb, 0xee, 0x08, 0xe5, 0x14, 0x47, 0x78,
	0xd6, 0x75, 0xf4, 0x0c, 0x40, 0xb3, 0xb1, 0x4a, 0xdf, 0x0d, 0x95, 0x0f, 0xf6, 0xbb, 0xab, 0x70,
	0x87, 0x66, 0xf8, 0xc3, 0x79, 0xee, 0xa3, 0x91, 0xda, 0x37, 0xbf, 0x28, 0xcc, 0xb0, 0x05, 0x56,
	0x9a, 0xa4, 0x27, 0xa8, 0xb8, 0x85, 0x7f, 0x46, 0x41, 0xa4, 0x4f, 0xca, 0x85, 0x8c, 0x9c, 0xba,
	0xea, 0xaa, 0xc1, 0x8b, 0x5e, 0x08, 0x5d, 0xf4, 0x55, 0xd8, 0xe8, 0x92, 0x81, 0x8e, 0x75, 0xc5,
	0x24, 0xda, 0x0b, 0xc5, 0xd0, 0x1d, 0x96, 0x55, 0xac, 0x2a, 0xfe, 0x70, 0x9e, 0xdb, 0xe6, 0x6e,
	0xe7, 0x14, 0x0a, 0xf2, 0x3a, 0x97, 0x34, 0x89, 0xf6, 0xa2, 0xa1, 0x3b, 0xe8, 0xd7, 0x70, 0x6b,
	0xda, 0x01, 0x3e, 0x39, 0x36, 0xdd, 0xb1, 0x28, 0x3b, 0xcd, 0xc5, 0x4d, 0xb2, 0x38, 0xde, 0xe2,
	0x45, 0xb1, 0x34, 0x70, 0xed, 0x91, 0x8c, 0xcc, 0x0b, 0x07, 0x88, 0x80, 0x78, 0xca, 0xaa, 0xa9,
	0x5c, 0x16, 0x45, 0x8c, 0x45, 0xf1, 0x70, 0x71, 0x14, 0x0b, 0x3a, 0x41, 0xce, 0x9c, 0x5e, 0x7e,
	0x10, 0x6c, 0xe4, 0x78, 0xa0, 0x91, 0xc5, 0x3e, 0xec, 0x2c, 0x08, 0x1b, 0xa5, 0x21, 0xfa, 0x02,
	0x8f, 0xbc, 0x8e, 0xa2, 0x3f, 0xd1, 0x63, 0x88, 0x9f, 0xa9, 0xe6, 0x10, 0xb3, 0x9b, 0x7f, 0xb5,
	0x7c, 0x77, 0x71, 0x7c, 0xc1, 0xe1, 0x90, 0x39, 0xe8, 0x8b, 0xc8, 0xe7, 0x42, 0xe1, 0x4f, 0x02,
	0xac, 0x55, 0x34, 0xd7, 0x38, 0xc3, 0xfb, 0xaa, 0xdd, 0xc7, 0x76, 0x20, 0x2c, 0x21, 0x10, 0xd6,
	0xe2, 0x37, 0x7e, 0x1b, 0x12, 0xc7, 0x0c, 0xe9, 0x6d, 0xc3, 0xde, 0x17, 0x72, 0x21, 0xcd, 0x7e,
	0x05, 0x77, 0x9b, 0xd8, 0x55, 0x97, 0xed, 0x7b, 0xcf, 0x62, 0x8a, 0xfb, 0xf0, 0xd7, 0xa0, 0xc2,
	0xdf, 0x04, 0x00, 0x5e, 0x0a, 0x6f, 0x07, 0xb8, 0x18, 0x84, 0xf0, 0xa1, 0x83, 0x98, 0x9b, 0xcf,
	0xc8, 0x0d, 0xce, 0xe7, 0x44, 0x80, 0x35, 0x9e, 0xde, 0x0d, 0x57, 0x4b, 0x82, 0x55, 0xda, 0xa8,
	0xfe, 0xea, 0xcb, 0xdb, 0xfd, 0x47, 0x57, 0xb5, 0x3b, 0xcb, 0x1e, 0x18, 0x90, 0x6d, 0x3f, 0xf7,
	0xff, 0x28, 0x40, 0x2a, 0xbc, 0x0f, 0xa0, 0xaf, 0xe0, 0xf6, 0xa1, 0x5c, 0x97, 0x64, 0xa5, 0xde,
	0x90, 0xa5, 0x5a, 0xa7, 0x71, 0x78, 0xa0, 0x1c, 0x1d, 0xb4, 0x5b, 0x52, 0xad, 0xb1, 0xdf, 0x90,
	0xea, 0xe9, 0x25, 0xf1, 0xce, 0x78, 0x92, 0xdf, 0x0d, 0x83, 0x8e, 0x06, 0x8e, 0x85, 0x35, 0xe3,
	0xd8, 0xc0, 0x3a, 0x2a, 0xc2, 0xad, 0x79, 0x7c, 0xf5, 0xe8, 0x79, 0x5a, 0x10, 0xb7, 0xc6, 0x93,
	0xfc, 0x47, 0x61, 0x5c, 0x75, 0x38, 0x42, 0x0f, 0x60, 0x73, 0x5e, 0xbf, 0x2d, 0x35, 0x9b, 0xe9,
	0x88, 0xb8, 0x3d, 0x9e, 0xe4, 0x51, 0x18, 0xd0, 0xc6, 0xa6, 0x29, 0xc6, 0x7e, 0xf7, 0x6d, 0x76,
	0xe9, 0xfe, 0x6f, 0x22, 0xb0, 0x1e, 0xda, 0xc8, 0xd0, 0x63, 0x10, 0x65, 0xe9, 0xe9, 0x91, 0xd4,
	0xee, 0x28, 0xed, 0x4e, 0xa5, 0x73, 0xd4, 0x9e, 0x0b, 0xfc, 0xe3, 0xf1, 0x24, 0x9f, 0x09, 0x41,
	0x82, 0x71, 0x7f, 0x09, 0xb7, 0xe7, 0xd0, 0x07, 0x87, 0x1d, 0x45, 0x7a, 0x26, 0xd5, 0x8e, 0x3a,
	0x52, 0x3d, 0x2d, 0x5c, 0x02, 0x3f, 0x20, 0xae, 0xf4, 0x0a, 0x6b, 0x43, 0x17, 0xeb, 0xe8, 0x73,
	0xc8, 0xcc, 0xc1, 0xdb, 0x47, 0xb5, 0x9a, 0x24, 0xd5, 0xa5, 0x7a, 0x3a, 0x22, 0x8a, 0xe3, 0x49,
	0x7e, 0x3b, 0x84, 0x6d, 0x0f, 0x35, 0x0d, 0x63, 0xfa, 0x3a, 0x94, 0x61, 0x6b, 0x0e, 0xb9, 0x5f,
	0x69, 0x34, 0xa5, 0x7a, 0x3a, 0x2a, 0xee, 0x8c, 0x27, 0xf9, 0x5b, 0x21, 0xd8, 0xbe, 0x6a, 0x98,
	0x58, 0xf7, 0x28, 0xf8, 0x7d, 0x14, 0x56, 0x03, 0x4f, 0x2e, 0x8d, 0x81, 0x53, 0x79, 0x69, 0xfa,
	0x2c, 0x86, 0x80, 0x7a, 0x30, 0xf9, 0x9f, 0xc2, 0x6e, 0x08, 0x39, 0x97, 0xfa, 0x3c, 0x34, 0x98,
	0xf8, 0x67, 0x73, 0x4e, 0x29, 0xf4, 0x49, 0xa5, 0x53, 0xfb, 0x9a, 0x25, 0xbe, 0x3b, 0x9e, 0xe4,
	0xb7, 0xc2, 0xc8, 0x27, 0x74, 0x35, 0xc1, 0x3a, 0xaa, 0x41, 0x36, 0x04, 0x6c, 0x55, 0xe4, 0x4e,
	0xa3, 0xd2, 0x6c, 0x3e, 0x9f, 0xc2, 0xa3, 0x62, 0x6e, 0x3c, 0xc9, 0xdf, 0x0e, 0xc0, 0x5b, 0xaa,
	0xed, 0x1a, 0xaa, 0x69, 0x8e, 0x7c, 0x23, 0x3f, 0x86, 0xed, 0x90, 0x91, 0xda, 0xe1, 0x93, 0x56,
	0x53, 0xa2, 0x51, 0xc7, 0xc4, 0xcc, 0x78, 0x92, 0xdf, 0x0c, 0x80, 0x6b, 0xa4, 0x6f, 0x99, 0xd8,
	0xe5, 0x94, 0x87, 0x51, 0x95, 0x83, 0x9a, 0x44, 0x29, 0x8f, 0x73, 0xca, 0x83, 0x20, 0x75, 0xa0,
	0x61, 0xfa, 0x3f, 0xee, 0x69, 0x9f, 0x7a, 0x18, 0xe9, 0x59, 0xab, 0x21, 0x4b, 0xf5, 0x74, 0x22,
	0xd0, 0xa7, 0x1c, 0x22, 0xb1, 0xcd, 0xc9, 0x2f, 0xd2, 0x08, 0x56, 0xbd, 0x3f, 0x34, 0x74, 0x46,
	0x16, 0x46, 0x0f, 0x61, 0xab, 0x52, 0xaf, 0xcb, 0x52, 0xbb, 0xad, 0x74, 0x9e, 0xb7, 0x24, 0xe5,
	0x51, 0x59, 0xa9, 0x3e, 0xef, 0x48, 0xed, 0xf4, 0x12, 0xb7, 0x13, 0xd0, 0x7d, 0x54, 0xae, 0x8e,
	0x5c, 0xec, 0x5c, 0x80, 0x94, 0x1f, 0x78, 0x10, 0xe1, 0x02, 0xa4, 0xfc, 0x80, 0x41, 0xb8, 0xeb,
	0xea, 0xd3, 0xd7, 0xff, 0xc8, 0x2e, 0xbd, 0x7e, 0x93, 0x15, 0xbe, 0x7b, 0x93, 0x15, 0xfe, 0xfe,
	0x26, 0x2b, 0x7c, 0xf3, 0x36, 0xbb, 0xf4, 0xdd, 0xdb, 0xec, 0xd2, 0x5f, 0xde, 0x66, 0x97, 0x7e,
	0xf9, 0x28, 0x74, 0x5d, 0xd2, 0x7b, 0xe3, 0x53, 0x72, 0x7c, 0x6c, 0x68, 0x86, 0x6a, 0x7a, 0xdf,
	0xa5, 0xe0, 0x1f, 0xe2, 0xd8, 0xfd, 0xd9, 0x4d, 0xb0, 0xeb, 0xf0, 0xd1, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x62, 0xf3, 0xe7, 0x97, 0xa9, 0x13, 0x00, 0x00,
}

func (m *Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SwapFeeCollectorAddress) > 0 {
		i -= len(m.SwapFeeCollectorAddress)
		copy(dAtA[i:], m.SwapFeeCollectorAddress)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.SwapFeeCollectorAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurrentBatchId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.CurrentBatchId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastPrice != nil {
		{
			size := m.LastPrice.Size()
			i -= size
			if _, err := m.LastPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastOrderId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.LastOrderId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteCoinDenom) > 0 {
		i -= len(m.QuoteCoinDenom)
		copy(dAtA[i:], m.QuoteCoinDenom)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.QuoteCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseCoinDenom) > 0 {
		i -= len(m.BaseCoinDenom)
		copy(dAtA[i:], m.BaseCoinDenom)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.BaseCoinDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x40
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.LastWithdrawRequestId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.LastWithdrawRequestId))
		i--
		dAtA[i] = 0x30
	}
	if m.LastDepositRequestId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.LastDepositRequestId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.MintedPoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.AcceptedCoins) > 0 {
		for iNdEx := len(m.AcceptedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DepositCoins) > 0 {
		for iNdEx := len(m.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.WithdrawnCoins) > 0 {
		for iNdEx := len(m.WithdrawnCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.PoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x78
	}
	if m.Status != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpireAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLiquidity(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x6a
	if m.BatchId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.OpenAmount.Size()
		i -= size
		if _, err := m.OpenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.ReceivedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.RemainingOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Direction != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PairId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositsMade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositsMade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositsMade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueuedLiquidityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedLiquidityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedLiquidityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintLiquidity(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	if len(m.SupplyProvided) > 0 {
		for iNdEx := len(m.SupplyProvided) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupplyProvided[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolLiquidityProvidersData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolLiquidityProvidersData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolLiquidityProvidersData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.QueuedLiquidityProviders) > 0 {
		for iNdEx := len(m.QueuedLiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueuedLiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for k := range m.LiquidityProviders {
			v := m.LiquidityProviders[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLiquidity(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLiquidity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLiquidity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BondedLockIds) > 0 {
		dAtA10 := make([]byte, len(m.BondedLockIds)*10)
		var j9 int
		for _, num := range m.BondedLockIds {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintLiquidity(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActiveFarmer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveFarmer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveFarmer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FarmedPoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueuedCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintLiquidity(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FarmedPoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueuedFarmer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedFarmer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedFarmer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueudCoins) > 0 {
		for iNdEx := len(m.QueudCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueudCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	l = len(m.BaseCoinDenom)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = len(m.QuoteCoinDenom)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.LastOrderId != 0 {
		n += 1 + sovLiquidity(uint64(m.LastOrderId))
	}
	if m.LastPrice != nil {
		l = m.LastPrice.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.CurrentBatchId != 0 {
		n += 1 + sovLiquidity(uint64(m.CurrentBatchId))
	}
	l = len(m.SwapFeeCollectorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PairId != 0 {
		n += 1 + sovLiquidity(uint64(m.PairId))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.LastDepositRequestId != 0 {
		n += 1 + sovLiquidity(uint64(m.LastDepositRequestId))
	}
	if m.LastWithdrawRequestId != 0 {
		n += 1 + sovLiquidity(uint64(m.LastWithdrawRequestId))
	}
	if m.Disabled {
		n += 2
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *DepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if len(m.DepositCoins) > 0 {
		for _, e := range m.DepositCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if len(m.AcceptedCoins) > 0 {
		for _, e := range m.AcceptedCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	l = m.MintedPoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidity(uint64(m.Status))
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *WithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = m.PoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if len(m.WithdrawnCoins) > 0 {
		for _, e := range m.WithdrawnCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovLiquidity(uint64(m.Status))
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PairId != 0 {
		n += 1 + sovLiquidity(uint64(m.PairId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovLiquidity(uint64(m.Direction))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.RemainingOfferCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.ReceivedCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.OpenAmount.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if m.BatchId != 0 {
		n += 1 + sovLiquidity(uint64(m.BatchId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt)
	n += 1 + l + sovLiquidity(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidity(uint64(m.Status))
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *DepositsMade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	return n
}

func (m *QueuedLiquidityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if len(m.SupplyProvided) > 0 {
		for _, e := range m.SupplyProvided {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovLiquidity(uint64(l))
	return n
}

func (m *PoolLiquidityProvidersData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	if len(m.BondedLockIds) > 0 {
		l = 0
		for _, e := range m.BondedLockIds {
			l += sovLiquidity(uint64(e))
		}
		n += 1 + sovLiquidity(uint64(l)) + l
	}
	if len(m.LiquidityProviders) > 0 {
		for k, v := range m.LiquidityProviders {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLiquidity(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLiquidity(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLiquidity(uint64(mapEntrySize))
		}
	}
	if len(m.QueuedLiquidityProviders) > 0 {
		for _, e := range m.QueuedLiquidityProviders {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	return n
}

func (m *ActiveFarmer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = m.FarmedPoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	return n
}

func (m *QueuedCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FarmedPoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovLiquidity(uint64(l))
	return n
}

func (m *QueuedFarmer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLiquidity(uint64(m.AppId))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if len(m.QueudCoins) > 0 {
		for _, e := range m.QueudCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	return n
}

func sovLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidity(x uint64) (n int) {
	return sovLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOrderId", wireType)
			}
			m.LastOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LastPrice = &v
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBatchId", wireType)
			}
			m.CurrentBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapFeeCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDepositRequestId", wireType)
			}
			m.LastDepositRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDepositRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawRequestId", wireType)
			}
			m.LastWithdrawRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCoins = append(m.DepositCoins, types.Coin{})
			if err := m.DepositCoins[len(m.DepositCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedCoins = append(m.AcceptedCoins, types.Coin{})
			if err := m.AcceptedCoins[len(m.AcceptedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedPoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnCoins = append(m.WithdrawnCoins, types.Coin{})
			if err := m.WithdrawnCoins[len(m.WithdrawnCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpireAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositsMade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositsMade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositsMade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedLiquidityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedLiquidityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedLiquidityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyProvided", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyProvided = append(m.SupplyProvided, &types.Coin{})
			if err := m.SupplyProvided[len(m.SupplyProvided)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolLiquidityProvidersData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolLiquidityProvidersData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolLiquidityProvidersData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiquidity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BondedLockIds = append(m.BondedLockIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiquidity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLiquidity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLiquidity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BondedLockIds) == 0 {
					m.BondedLockIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiquidity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BondedLockIds = append(m.BondedLockIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedLockIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidityProviders == nil {
				m.LiquidityProviders = make(map[string]*DepositsMade)
			}
			var mapkey string
			var mapvalue *DepositsMade
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLiquidity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiquidity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLiquidity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLiquidity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLiquidity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLiquidity
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLiquidity
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DepositsMade{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLiquidity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLiquidity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LiquidityProviders[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedLiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedLiquidityProviders = append(m.QueuedLiquidityProviders, &QueuedLiquidityProvider{})
			if err := m.QueuedLiquidityProviders[len(m.QueuedLiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveFarmer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveFarmer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveFarmer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmedPoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FarmedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmedPoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FarmedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedFarmer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedFarmer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedFarmer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueudCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueudCoins = append(m.QueudCoins, &QueuedCoin{})
			if err := m.QueudCoins[len(m.QueudCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidity = fmt.Errorf("proto: unexpected end of group")
)
