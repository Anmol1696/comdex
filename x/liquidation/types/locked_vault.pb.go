// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidation/v1beta1/locked_vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LockedVault struct {
	LockedVaultId   uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppId           uint64                                 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	AppVaultTypeId  string                                 `protobuf:"bytes,3,opt,name=app_vault_type_id,json=appVaultTypeId,proto3" json:"app_vault_type_id,omitempty"`
	OriginalVaultId string                                 `protobuf:"bytes,4,opt,name=original_vault_id,json=originalVaultId,proto3" json:"original_vault_id,omitempty" yaml:"id"`
	ExtendedPairId  uint64                                 `protobuf:"varint,5,opt,name=extended_pair_vault_id,json=extendedPairVaultId,proto3" json:"extended_pair_vault_id,omitempty" yaml:"extended_pair_vault_id"`
	Owner           string                                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	//updated_amount_out = amount_out + interest_accumulated + opening_fee_accumulated
	// + closing_fee_accumulated
	UpdatedAmountOut             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=updated_amount_out,json=updatedAmountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"updated_amount_out" yaml:"updated_amount_out"`
	Initiator                    string                                 `protobuf:"bytes,10,opt,name=initiator,proto3" json:"initiator,omitempty" yaml:"admin"`
	IsAuctionComplete            bool                                   `protobuf:"varint,11,opt,name=is_auction_complete,json=isAuctionComplete,proto3" json:"is_auction_complete,omitempty" yaml:"is_auction_complete"`
	IsAuctionInProgress          bool                                   `protobuf:"varint,12,opt,name=is_auction_in_progress,json=isAuctionInProgress,proto3" json:"is_auction_in_progress,omitempty" yaml:"is_auction_in_progress"`
	CrAtLiquidation              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=cr_at_liquidation,json=crAtLiquidation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cr_at_liquidation" yaml:"cr_at_liquidation"`
	CurrentCollaterlisationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=current_collateralisation_ratio,json=currentCollateralisationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_collateralisation_ratio" yaml:"current_collateralisation_ratio"`
	CollateralToBeAuctioned      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=collateral_to_be_auctioned,json=collateralToBeAuctioned,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_to_be_auctioned" yaml:"collateral_to_be_auctioned"`
	LiquidationTimestamp         time.Time                              `protobuf:"bytes,16,opt,name=liquidation_timestamp,json=liquidationTimestamp,proto3,stdtime" json:"liquidation_timestamp" yaml:"liquidation_timestamp"`
	SellOffHistory               []string                               `protobuf:"bytes,17,rep,name=selloff_history,json=selloffHistory,proto3" json:"selloff_history,omitempty" yaml:"selloff_history"`
	InterestAccumulated          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,18,opt,name=interest_accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"interest_accumulated" yaml:"interest_accumulated"`
	// Types that are valid to be assigned to Kind:
	//	*LockedVault_BorrowMetaData
	Kind isLockedVault_Kind `protobuf_oneof:"kind"`
}

func (m *LockedVault) Reset()         { *m = LockedVault{} }
func (m *LockedVault) String() string { return proto.CompactTextString(m) }
func (*LockedVault) ProtoMessage()    {}
func (*LockedVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e1145b6fa4b74d3, []int{0}
}
func (m *LockedVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedVault.Merge(m, src)
}
func (m *LockedVault) XXX_Size() int {
	return m.Size()
}
func (m *LockedVault) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedVault.DiscardUnknown(m)
}

var xxx_messageInfo_LockedVault proto.InternalMessageInfo

type isLockedVault_Kind interface {
	isLockedVault_Kind()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LockedVault_BorrowMetaData struct {
	BorrowMetaData *BorrowMetaData `protobuf:"bytes,19,opt,name=borrow_meta_data,json=borrowMetaData,proto3,oneof" json:"borrow_meta_data,omitempty"`
}

func (*LockedVault_BorrowMetaData) isLockedVault_Kind() {}

func (m *LockedVault) GetKind() isLockedVault_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *LockedVault) GetBorrowMetaData() *BorrowMetaData {
	if x, ok := m.GetKind().(*LockedVault_BorrowMetaData); ok {
		return x.BorrowMetaData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LockedVault) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LockedVault_BorrowMetaData)(nil),
	}
}

type BorrowMetaData struct {
	LendingId          uint64                                  `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty"`
	IsStableBorrow     bool                                    `protobuf:"varint,2,opt,name=is_stable_borrow,json=isStableBorrow,proto3" json:"is_stable_borrow,omitempty"`
	StableBorrowRate   github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,3,opt,name=stable_borrow_rate,json=stableBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_rate" yaml:"stable_borrow_rate"`
	BridgedAssetAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=bridged_asset_amount,json=bridgedAssetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bridged_asset_amount" yaml:"bridged_asset_amount"`
}

func (m *BorrowMetaData) isLockedVault_Kind() {}

func (m *BorrowMetaData) Reset()         { *m = BorrowMetaData{} }
func (m *BorrowMetaData) String() string { return proto.CompactTextString(m) }
func (*BorrowMetaData) ProtoMessage()    {}
func (*BorrowMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e1145b6fa4b74d3, []int{1}
}
func (m *BorrowMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowMetaData.Merge(m, src)
}
func (m *BorrowMetaData) XXX_Size() int {
	return m.Size()
}
func (m *BorrowMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowMetaData proto.InternalMessageInfo

type LockedVaultToAppMapping struct {
	AppId       uint64         `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	LockedVault []*LockedVault `protobuf:"bytes,2,rep,name=locked_vault,json=lockedVault,proto3" json:"locked_vault,omitempty" yaml:"locked_vault_id"`
}

func (m *LockedVaultToAppMapping) Reset()         { *m = LockedVaultToAppMapping{} }
func (m *LockedVaultToAppMapping) String() string { return proto.CompactTextString(m) }
func (*LockedVaultToAppMapping) ProtoMessage()    {}
func (*LockedVaultToAppMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e1145b6fa4b74d3, []int{2}
}
func (m *LockedVaultToAppMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedVaultToAppMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedVaultToAppMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedVaultToAppMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedVaultToAppMapping.Merge(m, src)
}
func (m *LockedVaultToAppMapping) XXX_Size() int {
	return m.Size()
}
func (m *LockedVaultToAppMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedVaultToAppMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LockedVaultToAppMapping proto.InternalMessageInfo

type WhitelistedAppIds struct {
	WhitelistedAppIds []uint64 `protobuf:"varint,1,rep,packed,name=whitelisted_app_ids,json=whitelistedAppIds,proto3" json:"whitelisted_app_ids,omitempty" yaml:"whitelisted_app_ids"`
}

func (m *WhitelistedAppIds) Reset()         { *m = WhitelistedAppIds{} }
func (m *WhitelistedAppIds) String() string { return proto.CompactTextString(m) }
func (*WhitelistedAppIds) ProtoMessage()    {}
func (*WhitelistedAppIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e1145b6fa4b74d3, []int{3}
}
func (m *WhitelistedAppIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistedAppIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistedAppIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistedAppIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistedAppIds.Merge(m, src)
}
func (m *WhitelistedAppIds) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistedAppIds) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistedAppIds.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistedAppIds proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LockedVault)(nil), "comdex.liquidation.v1beta1.LockedVault")
	proto.RegisterType((*BorrowMetaData)(nil), "comdex.liquidation.v1beta1.BorrowMetaData")
	proto.RegisterType((*LockedVaultToAppMapping)(nil), "comdex.liquidation.v1beta1.LockedVaultToAppMapping")
	proto.RegisterType((*WhitelistedAppIds)(nil), "comdex.liquidation.v1beta1.WhitelistedAppIds")
}

func init() {
	proto.RegisterFile("comdex/liquidation/v1beta1/locked_vault.proto", fileDescriptor_6e1145b6fa4b74d3)
}

var fileDescriptor_6e1145b6fa4b74d3 = []byte{
	// 1234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0xdb, 0x36,
	0x14, 0xb6, 0x92, 0x26, 0x8b, 0x99, 0xd6, 0xb1, 0xe9, 0x34, 0x55, 0xbd, 0xc6, 0xf2, 0x74, 0x68,
	0xbd, 0x61, 0x91, 0xd1, 0x16, 0x03, 0x86, 0xed, 0x32, 0x3b, 0x1d, 0x50, 0x63, 0x6d, 0x53, 0xa8,
	0x69, 0x0b, 0x0c, 0x18, 0x08, 0x5a, 0xa2, 0x1d, 0x22, 0xb2, 0xa8, 0x49, 0x54, 0xd3, 0xdc, 0x76,
	0xdd, 0x61, 0x40, 0x77, 0x1b, 0xb0, 0x3f, 0x30, 0x60, 0x7f, 0x62, 0xc7, 0x62, 0xa7, 0x1e, 0x87,
	0x1d, 0xb4, 0xcd, 0xf9, 0x07, 0x3a, 0xee, 0x34, 0x90, 0x94, 0x2d, 0x39, 0x71, 0x8b, 0xf9, 0x12,
	0x47, 0xef, 0x7d, 0xef, 0xfb, 0x3e, 0x3d, 0x52, 0x7c, 0x04, 0x7b, 0x0e, 0x1b, 0xbb, 0xe4, 0x65,
	0xc7, 0xa3, 0xdf, 0xc6, 0xd4, 0xc5, 0x9c, 0x32, 0xbf, 0xf3, 0xe2, 0xf6, 0x80, 0x70, 0x7c, 0xbb,
	0xe3, 0x31, 0xe7, 0x98, 0xb8, 0xe8, 0x05, 0x8e, 0x3d, 0x6e, 0x05, 0x21, 0xe3, 0x0c, 0x36, 0x14,
	0xdc, 0x2a, 0xc0, 0xad, 0x0c, 0xde, 0xd8, 0x1e, 0xb1, 0x11, 0x93, 0xb0, 0x8e, 0xf8, 0x4f, 0x55,
	0x34, 0x8c, 0x11, 0x63, 0x23, 0x8f, 0x74, 0xe4, 0xd3, 0x20, 0x1e, 0x76, 0x38, 0x1d, 0x93, 0x88,
	0xe3, 0x71, 0x90, 0x01, 0x9a, 0x0e, 0x8b, 0xc6, 0x2c, 0xea, 0x0c, 0x70, 0x44, 0x66, 0xd2, 0x0e,
	0xa3, 0xbe, 0xca, 0x9b, 0xbf, 0x6f, 0x81, 0xcd, 0x07, 0xd2, 0xc9, 0x33, 0x61, 0x04, 0x5a, 0x60,
	0x85, 0xba, 0xba, 0xd6, 0xd2, 0xda, 0x97, 0x7a, 0xcd, 0x49, 0x62, 0x5c, 0x29, 0x24, 0xfb, 0x6e,
	0x9a, 0x18, 0xe5, 0x53, 0x3c, 0xf6, 0x3e, 0x33, 0xa9, 0x6b, 0xda, 0x2b, 0xd4, 0x85, 0x7b, 0x60,
	0x1d, 0x07, 0x01, 0xa2, 0xae, 0xbe, 0x22, 0x6b, 0x76, 0x26, 0x89, 0xb1, 0xd6, 0x0d, 0x82, 0xf3,
	0xd8, 0x35, 0x2c, 0x62, 0xf0, 0x43, 0x50, 0x13, 0x70, 0xf9, 0xd2, 0x88, 0x9f, 0x06, 0x44, 0x54,
	0xae, 0xb6, 0xb4, 0x76, 0xd9, 0xae, 0xe0, 0x20, 0x90, 0x32, 0x87, 0xa7, 0x01, 0xe9, 0xbb, 0xf0,
	0x01, 0xa8, 0xb1, 0x90, 0x8e, 0xa8, 0x8f, 0xbd, 0x0c, 0x4f, 0x5d, 0xfd, 0x92, 0x80, 0xf6, 0x5a,
	0x93, 0xc4, 0xd8, 0x3a, 0xc8, 0x92, 0x0b, 0xad, 0x6d, 0xb1, 0xf9, 0x2c, 0x3c, 0x02, 0x3b, 0xe4,
	0x25, 0x27, 0xbe, 0x4b, 0x5c, 0x14, 0x60, 0x1a, 0xe6, 0x94, 0x6b, 0xd2, 0xf7, 0xdd, 0x49, 0x62,
	0x54, 0xbe, 0xcc, 0x10, 0x8f, 0x31, 0x0d, 0x25, 0xe3, 0xae, 0x62, 0x5c, 0x5c, 0x69, 0xda, 0x75,
	0x52, 0x28, 0x98, 0x2a, 0x75, 0xc0, 0x1a, 0x3b, 0xf1, 0x49, 0xa8, 0xaf, 0x4b, 0xaf, 0xd7, 0x45,
	0x43, 0x0e, 0x44, 0x20, 0x4d, 0x8c, 0xcb, 0x8a, 0x4f, 0xe6, 0x4d, 0x5b, 0xe1, 0xe0, 0x31, 0x28,
	0xe3, 0x31, 0x8b, 0x7d, 0x8e, 0xa8, 0xaf, 0xbf, 0x27, 0x8b, 0x1e, 0xbd, 0x4e, 0x8c, 0xd2, 0x9f,
	0x89, 0x71, 0x73, 0x44, 0xf9, 0x51, 0x3c, 0xb0, 0x1c, 0x36, 0xee, 0x64, 0x0b, 0xa9, 0x7e, 0xf6,
	0x22, 0xf7, 0xb8, 0x23, 0xfa, 0x17, 0x59, 0x7d, 0x9f, 0x4f, 0x12, 0x63, 0xa3, 0x2b, 0x29, 0xfa,
	0x7e, 0x9a, 0x18, 0x55, 0xa5, 0x32, 0x23, 0x35, 0xed, 0x0d, 0x9c, 0x65, 0x21, 0x03, 0x20, 0x8b,
	0xb3, 0x98, 0xeb, 0x1b, 0x52, 0xed, 0xf1, 0xd2, 0x6a, 0x65, 0xa5, 0x76, 0x10, 0xf3, 0x34, 0x31,
	0x6a, 0x73, 0x72, 0x2c, 0xe6, 0xa6, 0x9d, 0xbd, 0xd0, 0x41, 0xcc, 0xe1, 0x0f, 0x1a, 0x80, 0x71,
	0xe0, 0x62, 0x4e, 0x5c, 0x54, 0x50, 0x2e, 0x4b, 0x65, 0xb4, 0xb4, 0x72, 0xf5, 0xa9, 0xe2, 0x2a,
	0x1a, 0xb8, 0xae, 0x0c, 0x5c, 0x54, 0x31, 0xed, 0x6a, 0x7c, 0x0e, 0x0e, 0x3f, 0x07, 0x65, 0xea,
	0x53, 0x4e, 0x31, 0x67, 0xa1, 0x0e, 0xa4, 0x8b, 0x5d, 0xf1, 0x46, 0xfd, 0x69, 0x30, 0x5f, 0x26,
	0xec, 0x8e, 0x45, 0xf3, 0x72, 0x3c, 0x74, 0x40, 0x9d, 0x46, 0x08, 0xc7, 0x8e, 0xf8, 0x34, 0x91,
	0xc3, 0xc6, 0x81, 0x47, 0x38, 0xd1, 0x37, 0x5b, 0x5a, 0x7b, 0x43, 0x6e, 0xa1, 0x5a, 0x3f, 0xea,
	0xaa, 0xec, 0x7e, 0x96, 0x4c, 0x13, 0xa3, 0x91, 0xed, 0xcb, 0x8b, 0x95, 0xa6, 0x5d, 0xa3, 0xe7,
	0x0b, 0xe0, 0x18, 0xec, 0x14, 0xa0, 0xd4, 0x47, 0x41, 0xc8, 0x46, 0x21, 0x89, 0x22, 0xfd, 0xb2,
	0xd4, 0xf9, 0x74, 0x92, 0x18, 0xf5, 0x99, 0x4e, 0xdf, 0x7f, 0x9c, 0xa5, 0xf3, 0xfd, 0xba, 0xb8,
	0xdc, 0xb4, 0xeb, 0xf4, 0x62, 0x15, 0xfc, 0x5e, 0x03, 0x35, 0x27, 0x44, 0x98, 0xa3, 0xc2, 0xb1,
	0xa3, 0x5f, 0x91, 0x9d, 0xf9, 0x66, 0x89, 0xf5, 0xb9, 0x47, 0x1c, 0xf1, 0x59, 0xee, 0x87, 0x5d,
	0xfe, 0x20, 0x27, 0x4a, 0x13, 0x43, 0x57, 0xa6, 0x2e, 0x68, 0x98, 0xf6, 0x96, 0x33, 0x0f, 0x86,
	0xbf, 0x69, 0xc0, 0x70, 0xe2, 0x30, 0x24, 0x3e, 0x47, 0x0e, 0xf3, 0x3c, 0xcc, 0x49, 0x88, 0x3d,
	0x1a, 0xc9, 0x2c, 0x0a, 0xc5, 0x8f, 0x5e, 0x91, 0xce, 0x5e, 0x2e, 0xed, 0xec, 0xc6, 0xbe, 0x22,
	0xde, 0xcf, 0x78, 0xa7, 0xb4, 0xb6, 0xf8, 0x9b, 0x26, 0xc6, 0xcd, 0xcc, 0xe6, 0xbb, 0xe5, 0x4d,
	0x7b, 0xd7, 0x99, 0xe7, 0xc1, 0x73, 0x44, 0xf0, 0x57, 0x0d, 0x34, 0xf2, 0x5a, 0xc4, 0x19, 0x1a,
	0x90, 0xe9, 0x6a, 0x10, 0x57, 0xdf, 0x92, 0xee, 0xfd, 0xa5, 0xdd, 0x5f, 0xcb, 0xe5, 0x0e, 0x59,
	0x8f, 0x74, 0xa7, 0x84, 0x69, 0x62, 0x7c, 0x90, 0x19, 0x7f, 0xab, 0xa8, 0x69, 0x5f, 0x73, 0x16,
	0x57, 0xc3, 0x1f, 0x35, 0x70, 0xb5, 0xb0, 0x24, 0x68, 0x36, 0x3e, 0xf4, 0x6a, 0x4b, 0x6b, 0x6f,
	0xde, 0x69, 0x58, 0x6a, 0xc0, 0x58, 0xd3, 0x01, 0x63, 0x1d, 0x4e, 0x11, 0xbd, 0x2f, 0xc4, 0x4b,
	0x4c, 0x12, 0x63, 0xbb, 0xb0, 0x82, 0xb3, 0x6c, 0x9a, 0x18, 0x37, 0x94, 0xaf, 0x85, 0xf4, 0xe6,
	0xab, 0xbf, 0x0c, 0xcd, 0xde, 0xf6, 0x16, 0x54, 0xc2, 0xa7, 0x60, 0x2b, 0x22, 0x9e, 0xc7, 0x86,
	0x43, 0x74, 0x44, 0x23, 0xce, 0xc2, 0x53, 0xbd, 0xd6, 0x5a, 0x6d, 0x97, 0x7b, 0x1f, 0x8b, 0x33,
	0xfa, 0x09, 0xf1, 0xbc, 0x83, 0xe1, 0xf0, 0xbe, 0xca, 0xa4, 0x89, 0xb1, 0xa3, 0x64, 0xce, 0x95,
	0x98, 0x76, 0x25, 0x8b, 0x64, 0x48, 0xf8, 0x9d, 0x06, 0xb6, 0xa9, 0xcf, 0x49, 0x48, 0x22, 0x8e,
	0xb0, 0xe3, 0xc4, 0xe3, 0x58, 0xb4, 0xc4, 0xd5, 0xa1, 0x5c, 0x92, 0x87, 0xcb, 0x1d, 0x45, 0x69,
	0x62, 0xbc, 0x9f, 0x7d, 0x6c, 0x0b, 0x38, 0xc5, 0xa7, 0x96, 0x85, 0xbb, 0x79, 0x14, 0x3e, 0x03,
	0xd5, 0x01, 0x0b, 0x43, 0x76, 0x82, 0xc6, 0x84, 0x63, 0xe4, 0x62, 0x8e, 0xf5, 0xba, 0xec, 0xf3,
	0x47, 0xd6, 0xdb, 0x47, 0xbf, 0xd5, 0x93, 0x35, 0x0f, 0x09, 0xc7, 0xf7, 0x30, 0xc7, 0xf7, 0x4b,
	0x76, 0x65, 0x30, 0x17, 0xe9, 0xad, 0x83, 0x4b, 0xc7, 0xd4, 0x77, 0xcd, 0x74, 0x05, 0x54, 0xe6,
	0xc1, 0x70, 0x17, 0x00, 0x8f, 0xf8, 0x2e, 0xf5, 0x47, 0x68, 0x3a, 0xd7, 0xed, 0x72, 0x16, 0xe9,
	0xbb, 0xb0, 0x0d, 0xaa, 0x34, 0x42, 0x11, 0xc7, 0x03, 0x8f, 0x20, 0xc5, 0x2a, 0x07, 0xf9, 0x86,
	0x5d, 0xa1, 0xd1, 0x13, 0x19, 0x56, 0x84, 0xf0, 0x14, 0xc0, 0x39, 0x98, 0xf8, 0x1c, 0x88, 0x1a,
	0xdd, 0xbd, 0xaf, 0x96, 0xdb, 0xce, 0xf9, 0x91, 0x7d, 0x91, 0xd1, 0xb4, 0xab, 0x51, 0x41, 0xd6,
	0xc6, 0x9c, 0xc0, 0x9f, 0x35, 0xb0, 0x3d, 0x08, 0xa9, 0x3b, 0x12, 0x87, 0x7b, 0x14, 0x11, 0x9e,
	0x1d, 0xf1, 0x72, 0x58, 0x6e, 0xde, 0xb9, 0x6e, 0x29, 0x11, 0x4b, 0xdc, 0x71, 0x66, 0x4d, 0xdb,
	0x67, 0xd4, 0x57, 0x73, 0x34, 0x5f, 0xaa, 0x45, 0x24, 0xe6, 0xbf, 0x89, 0x71, 0xeb, 0x7f, 0xf8,
	0x16, 0x7c, 0x36, 0xcc, 0x18, 0xba, 0x82, 0x40, 0xcd, 0x14, 0xf3, 0x27, 0x0d, 0x5c, 0x2b, 0x5c,
	0x92, 0x0e, 0x59, 0x37, 0x08, 0x1e, 0xe2, 0x20, 0xa0, 0xfe, 0x08, 0x5e, 0x9d, 0xdd, 0x8e, 0x54,
	0xe7, 0xb3, 0x5b, 0xd0, 0x10, 0x5c, 0x2e, 0xde, 0xfe, 0xf4, 0x95, 0xd6, 0x6a, 0x7b, 0xf3, 0xce,
	0xad, 0x77, 0xed, 0x81, 0x82, 0x42, 0xaf, 0x91, 0xef, 0xfa, 0x22, 0x8d, 0xbc, 0x92, 0x6c, 0x7a,
	0x39, 0xd0, 0x74, 0x40, 0xed, 0xf9, 0x11, 0xe5, 0xc4, 0xa3, 0x91, 0x98, 0x81, 0x42, 0x3b, 0x82,
	0x8f, 0x40, 0xfd, 0x24, 0x0f, 0x22, 0xe5, 0x2f, 0xd2, 0xb5, 0xd6, 0xaa, 0xb8, 0xf2, 0xe5, 0xe3,
	0x6a, 0x01, 0xc8, 0xb4, 0x6b, 0x27, 0xe7, 0xf9, 0x7a, 0xcf, 0x5f, 0xff, 0xd3, 0x2c, 0xfd, 0x32,
	0x69, 0x96, 0x5e, 0x4f, 0x9a, 0xda, 0x9b, 0x49, 0x53, 0xfb, 0x7b, 0xd2, 0xd4, 0x5e, 0x9d, 0x35,
	0x4b, 0x6f, 0xce, 0x9a, 0xa5, 0x3f, 0xce, 0x9a, 0xa5, 0xaf, 0x3f, 0x99, 0x6b, 0xaf, 0x78, 0xc5,
	0x3d, 0x36, 0x1c, 0x52, 0x87, 0x62, 0x2f, 0x7b, 0xee, 0xcc, 0x5f, 0x91, 0x65, 0xc7, 0x07, 0xeb,
	0xf2, 0xcc, 0xb9, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x4f, 0x05, 0x02, 0x45, 0x0b,
	0x00, 0x00,
}

func (m *LockedVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		{
			size := m.Kind.Size()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	{
		size := m.InterestAccumulated.Size()
		i -= size
		if _, err := m.InterestAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.SellOffHistory) > 0 {
		for iNdEx := len(m.SellOffHistory) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SellOffHistory[iNdEx])
			copy(dAtA[i:], m.SellOffHistory[iNdEx])
			i = encodeVarintLockedVault(dAtA, i, uint64(len(m.SellOffHistory[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LiquidationTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLockedVault(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.CollateralToBeAuctioned.Size()
		i -= size
		if _, err := m.CollateralToBeAuctioned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.CurrentCollaterlisationRatio.Size()
		i -= size
		if _, err := m.CurrentCollaterlisationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.CrAtLiquidation.Size()
		i -= size
		if _, err := m.CrAtLiquidation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.IsAuctionInProgress {
		i--
		if m.IsAuctionInProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsAuctionComplete {
		i--
		if m.IsAuctionComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.UpdatedAmountOut.Size()
		i -= size
		if _, err := m.UpdatedAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OriginalVaultId) > 0 {
		i -= len(m.OriginalVaultId)
		copy(dAtA[i:], m.OriginalVaultId)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.OriginalVaultId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppVaultTypeId) > 0 {
		i -= len(m.AppVaultTypeId)
		copy(dAtA[i:], m.AppVaultTypeId)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.AppVaultTypeId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.LockedVaultId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockedVault_BorrowMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVault_BorrowMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BorrowMetaData != nil {
		{
			size, err := m.BorrowMetaData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLockedVault(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *BorrowMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgedAssetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StableBorrowRate.Size()
		i -= size
		if _, err := m.StableBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.IsStableBorrow {
		i--
		if m.IsStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.LendingId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.LendingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockedVaultToAppMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedVaultToAppMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVaultToAppMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockedVault) > 0 {
		for iNdEx := len(m.LockedVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLockedVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistedAppIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistedAppIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistedAppIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedAppIds) > 0 {
		dAtA5 := make([]byte, len(m.WhitelistedAppIds)*10)
		var j4 int
		for _, num := range m.WhitelistedAppIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintLockedVault(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLockedVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovLockedVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockedVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockedVaultId != 0 {
		n += 1 + sovLockedVault(uint64(m.LockedVaultId))
	}
	if m.AppId != 0 {
		n += 1 + sovLockedVault(uint64(m.AppId))
	}
	l = len(m.AppVaultTypeId)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	l = len(m.OriginalVaultId)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovLockedVault(uint64(m.ExtendedPairId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.UpdatedAmountOut.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	if m.IsAuctionComplete {
		n += 2
	}
	if m.IsAuctionInProgress {
		n += 2
	}
	l = m.CrAtLiquidation.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.CurrentCollaterlisationRatio.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.CollateralToBeAuctioned.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp)
	n += 2 + l + sovLockedVault(uint64(l))
	if len(m.SellOffHistory) > 0 {
		for _, s := range m.SellOffHistory {
			l = len(s)
			n += 2 + l + sovLockedVault(uint64(l))
		}
	}
	l = m.InterestAccumulated.Size()
	n += 2 + l + sovLockedVault(uint64(l))
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *LockedVault_BorrowMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowMetaData != nil {
		l = m.BorrowMetaData.Size()
		n += 2 + l + sovLockedVault(uint64(l))
	}
	return n
}
func (m *BorrowMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LendingId != 0 {
		n += 1 + sovLockedVault(uint64(m.LendingId))
	}
	if m.IsStableBorrow {
		n += 2
	}
	l = m.StableBorrowRate.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.BridgedAssetAmount.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	return n
}

func (m *LockedVaultToAppMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLockedVault(uint64(m.AppId))
	}
	if len(m.LockedVault) > 0 {
		for _, e := range m.LockedVault {
			l = e.Size()
			n += 1 + l + sovLockedVault(uint64(l))
		}
	}
	return n
}

func (m *WhitelistedAppIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhitelistedAppIds) > 0 {
		l = 0
		for _, e := range m.WhitelistedAppIds {
			l += sovLockedVault(uint64(e))
		}
		n += 1 + sovLockedVault(uint64(l)) + l
	}
	return n
}

func sovLockedVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLockedVault(x uint64) (n int) {
	return sovLockedVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockedVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVaultTypeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVaultTypeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalVaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalVaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuctionComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuctionComplete = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuctionInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuctionInProgress = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrAtLiquidation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrAtLiquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCollaterlisationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentCollaterlisationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralToBeAuctioned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralToBeAuctioned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LiquidationTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOffHistory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOffHistory = append(m.SellOffHistory, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowMetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BorrowMetaData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &LockedVault_BorrowMetaData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingId", wireType)
			}
			m.LendingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStableBorrow = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgedAssetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgedAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedVaultToAppMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedVaultToAppMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedVaultToAppMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedVault = append(m.LockedVault, &LockedVault{})
			if err := m.LockedVault[len(m.LockedVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistedAppIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistedAppIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistedAppIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLockedVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedAppIds = append(m.WhitelistedAppIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLockedVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLockedVault
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLockedVault
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedAppIds) == 0 {
					m.WhitelistedAppIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLockedVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedAppIds = append(m.WhitelistedAppIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAppIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockedVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLockedVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLockedVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLockedVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLockedVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockedVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLockedVault = fmt.Errorf("proto: unexpected end of group")
)
