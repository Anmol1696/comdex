// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/locker/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/comdex-official/comdex/x/asset/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLockerInfoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryLockerInfoRequest) Reset()         { *m = QueryLockerInfoRequest{} }
func (m *QueryLockerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoRequest) ProtoMessage()    {}
func (*QueryLockerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{0}
}
func (m *QueryLockerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoRequest.Merge(m, src)
}
func (m *QueryLockerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoRequest proto.InternalMessageInfo

type QueryLockerInfoResponse struct {
	LockerInfo Locker `protobuf:"bytes,1,opt,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryLockerInfoResponse) Reset()         { *m = QueryLockerInfoResponse{} }
func (m *QueryLockerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoResponse) ProtoMessage()    {}
func (*QueryLockerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{1}
}
func (m *QueryLockerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoResponse.Merge(m, src)
}
func (m *QueryLockerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoResponse proto.InternalMessageInfo

type QueryLockersByProductToAssetIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	AssetId   uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockersByProductToAssetIDRequest) Reset()         { *m = QueryLockersByProductToAssetIDRequest{} }
func (m *QueryLockersByProductToAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockersByProductToAssetIDRequest) ProtoMessage()    {}
func (*QueryLockersByProductToAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{2}
}
func (m *QueryLockersByProductToAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockersByProductToAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockersByProductToAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockersByProductToAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockersByProductToAssetIDRequest.Merge(m, src)
}
func (m *QueryLockersByProductToAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockersByProductToAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockersByProductToAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockersByProductToAssetIDRequest proto.InternalMessageInfo

type QueryLockersByProductToAssetIDResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryLockersByProductToAssetIDResponse) Reset() {
	*m = QueryLockersByProductToAssetIDResponse{}
}
func (m *QueryLockersByProductToAssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockersByProductToAssetIDResponse) ProtoMessage()    {}
func (*QueryLockersByProductToAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{3}
}
func (m *QueryLockersByProductToAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockersByProductToAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockersByProductToAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockersByProductToAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockersByProductToAssetIDResponse.Merge(m, src)
}
func (m *QueryLockersByProductToAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockersByProductToAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockersByProductToAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockersByProductToAssetIDResponse proto.InternalMessageInfo

type QueryLockerInfoByProductIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
}

func (m *QueryLockerInfoByProductIDRequest) Reset()         { *m = QueryLockerInfoByProductIDRequest{} }
func (m *QueryLockerInfoByProductIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoByProductIDRequest) ProtoMessage()    {}
func (*QueryLockerInfoByProductIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{4}
}
func (m *QueryLockerInfoByProductIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoByProductIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoByProductIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoByProductIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoByProductIDRequest.Merge(m, src)
}
func (m *QueryLockerInfoByProductIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoByProductIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoByProductIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoByProductIDRequest proto.InternalMessageInfo

type QueryLockerInfoByProductIDResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryLockerInfoByProductIDResponse) Reset()         { *m = QueryLockerInfoByProductIDResponse{} }
func (m *QueryLockerInfoByProductIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoByProductIDResponse) ProtoMessage()    {}
func (*QueryLockerInfoByProductIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{5}
}
func (m *QueryLockerInfoByProductIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoByProductIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoByProductIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoByProductIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoByProductIDResponse.Merge(m, src)
}
func (m *QueryLockerInfoByProductIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoByProductIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoByProductIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoByProductIDResponse proto.InternalMessageInfo

type QueryTotalDepositByProductAssetIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	AssetId   uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryTotalDepositByProductAssetIDRequest) Reset() {
	*m = QueryTotalDepositByProductAssetIDRequest{}
}
func (m *QueryTotalDepositByProductAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalDepositByProductAssetIDRequest) ProtoMessage()    {}
func (*QueryTotalDepositByProductAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{6}
}
func (m *QueryTotalDepositByProductAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDepositByProductAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDepositByProductAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDepositByProductAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDepositByProductAssetIDRequest.Merge(m, src)
}
func (m *QueryTotalDepositByProductAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDepositByProductAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDepositByProductAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDepositByProductAssetIDRequest proto.InternalMessageInfo

type QueryTotalDepositByProductAssetIDResponse struct {
	TotalDeposit uint64 `protobuf:"varint,1,opt,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit,omitempty"`
}

func (m *QueryTotalDepositByProductAssetIDResponse) Reset() {
	*m = QueryTotalDepositByProductAssetIDResponse{}
}
func (m *QueryTotalDepositByProductAssetIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalDepositByProductAssetIDResponse) ProtoMessage() {}
func (*QueryTotalDepositByProductAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{7}
}
func (m *QueryTotalDepositByProductAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDepositByProductAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDepositByProductAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDepositByProductAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDepositByProductAssetIDResponse.Merge(m, src)
}
func (m *QueryTotalDepositByProductAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDepositByProductAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDepositByProductAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDepositByProductAssetIDResponse proto.InternalMessageInfo

type QueryOwnerLockerByProductIDbyOwnerRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Owner     string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerByProductIDbyOwnerRequest) Reset() {
	*m = QueryOwnerLockerByProductIDbyOwnerRequest{}
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByProductIDbyOwnerRequest) ProtoMessage() {}
func (*QueryOwnerLockerByProductIDbyOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{8}
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerByProductIDbyOwnerResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryOwnerLockerByProductIDbyOwnerResponse) Reset() {
	*m = QueryOwnerLockerByProductIDbyOwnerResponse{}
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByProductIDbyOwnerResponse) ProtoMessage() {}
func (*QueryOwnerLockerByProductIDbyOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{9}
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByProductIDbyOwnerResponse proto.InternalMessageInfo

type QueryOwnerLockerOfAllProductByOwnerRequest struct {
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerOfAllProductByOwnerRequest) Reset() {
	*m = QueryOwnerLockerOfAllProductByOwnerRequest{}
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerOfAllProductByOwnerRequest) ProtoMessage() {}
func (*QueryOwnerLockerOfAllProductByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{10}
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerOfAllProductByOwnerResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryOwnerLockerOfAllProductByOwnerResponse) Reset() {
	*m = QueryOwnerLockerOfAllProductByOwnerResponse{}
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerOfAllProductByOwnerResponse) ProtoMessage() {}
func (*QueryOwnerLockerOfAllProductByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{11}
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerOfAllProductByOwnerResponse proto.InternalMessageInfo

type QueryOwnerTxDetailsLockerOfProductByOwnerRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) Reset() {
	*m = QueryOwnerTxDetailsLockerOfProductByOwnerRequest{}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerTxDetailsLockerOfProductByOwnerRequest) ProtoMessage() {}
func (*QueryOwnerTxDetailsLockerOfProductByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{12}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerRequest proto.InternalMessageInfo

type QueryOwnerTxDetailsLockerOfProductByOwnerResponse struct {
	UserTxData []UserTxData        `protobuf:"bytes,1,rep,name=user_tx_data,json=userTxData,proto3" json:"user_tx_data" yaml:"user_tx_data"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) Reset() {
	*m = QueryOwnerTxDetailsLockerOfProductByOwnerResponse{}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse) ProtoMessage() {}
func (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{13}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerTxDetailsLockerOfProductByOwnerResponse proto.InternalMessageInfo

type QueryOwnerLockerByProductToAssetIDbyOwnerRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	AssetId   uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Owner     string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) Reset() {
	*m = QueryOwnerLockerByProductToAssetIDbyOwnerRequest{}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByProductToAssetIDbyOwnerRequest) ProtoMessage() {}
func (*QueryOwnerLockerByProductToAssetIDbyOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{14}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerByProductToAssetIDbyOwnerResponse struct {
	LockerInfo []Locker `protobuf:"bytes,1,rep,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) Reset() {
	*m = QueryOwnerLockerByProductToAssetIDbyOwnerResponse{}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse) ProtoMessage() {}
func (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{15}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByProductToAssetIDbyOwnerResponse proto.InternalMessageInfo

type QueryLockerByProductByOwnerRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Owner     string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryLockerByProductByOwnerRequest) Reset()         { *m = QueryLockerByProductByOwnerRequest{} }
func (m *QueryLockerByProductByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerByProductByOwnerRequest) ProtoMessage()    {}
func (*QueryLockerByProductByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{16}
}
func (m *QueryLockerByProductByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerByProductByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerByProductByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerByProductByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerByProductByOwnerRequest.Merge(m, src)
}
func (m *QueryLockerByProductByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerByProductByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerByProductByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerByProductByOwnerRequest proto.InternalMessageInfo

type QueryLockerByProductByOwnerResponse struct {
	LockerInfo []Locker `protobuf:"bytes,1,rep,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryLockerByProductByOwnerResponse) Reset()         { *m = QueryLockerByProductByOwnerResponse{} }
func (m *QueryLockerByProductByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerByProductByOwnerResponse) ProtoMessage()    {}
func (*QueryLockerByProductByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{17}
}
func (m *QueryLockerByProductByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerByProductByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerByProductByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerByProductByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerByProductByOwnerResponse.Merge(m, src)
}
func (m *QueryLockerByProductByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerByProductByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerByProductByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerByProductByOwnerResponse proto.InternalMessageInfo

type QueryLockerCountByProductIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
}

func (m *QueryLockerCountByProductIDRequest) Reset()         { *m = QueryLockerCountByProductIDRequest{} }
func (m *QueryLockerCountByProductIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByProductIDRequest) ProtoMessage()    {}
func (*QueryLockerCountByProductIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{18}
}
func (m *QueryLockerCountByProductIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByProductIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByProductIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByProductIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByProductIDRequest.Merge(m, src)
}
func (m *QueryLockerCountByProductIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByProductIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByProductIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByProductIDRequest proto.InternalMessageInfo

type QueryLockerCountByProductIDResponse struct {
	TotalCount uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *QueryLockerCountByProductIDResponse) Reset()         { *m = QueryLockerCountByProductIDResponse{} }
func (m *QueryLockerCountByProductIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByProductIDResponse) ProtoMessage()    {}
func (*QueryLockerCountByProductIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{19}
}
func (m *QueryLockerCountByProductIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByProductIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByProductIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByProductIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByProductIDResponse.Merge(m, src)
}
func (m *QueryLockerCountByProductIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByProductIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByProductIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByProductIDResponse proto.InternalMessageInfo

type QueryLockerCountByProductToAssetIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	AssetId   uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockerCountByProductToAssetIDRequest) Reset() {
	*m = QueryLockerCountByProductToAssetIDRequest{}
}
func (m *QueryLockerCountByProductToAssetIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerCountByProductToAssetIDRequest) ProtoMessage() {}
func (*QueryLockerCountByProductToAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{20}
}
func (m *QueryLockerCountByProductToAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByProductToAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByProductToAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByProductToAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByProductToAssetIDRequest.Merge(m, src)
}
func (m *QueryLockerCountByProductToAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByProductToAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByProductToAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByProductToAssetIDRequest proto.InternalMessageInfo

type QueryLockerCountByProductToAssetIDResponse struct {
	TotalCount uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *QueryLockerCountByProductToAssetIDResponse) Reset() {
	*m = QueryLockerCountByProductToAssetIDResponse{}
}
func (m *QueryLockerCountByProductToAssetIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerCountByProductToAssetIDResponse) ProtoMessage() {}
func (*QueryLockerCountByProductToAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{21}
}
func (m *QueryLockerCountByProductToAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByProductToAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByProductToAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByProductToAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByProductToAssetIDResponse.Merge(m, src)
}
func (m *QueryLockerCountByProductToAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByProductToAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByProductToAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByProductToAssetIDResponse proto.InternalMessageInfo

type QueryWhiteListedAssetIDsByProductIDRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
}

func (m *QueryWhiteListedAssetIDsByProductIDRequest) Reset() {
	*m = QueryWhiteListedAssetIDsByProductIDRequest{}
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryWhiteListedAssetIDsByProductIDRequest) ProtoMessage() {}
func (*QueryWhiteListedAssetIDsByProductIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{22}
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDRequest.Merge(m, src)
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDRequest proto.InternalMessageInfo

type QueryWhiteListedAssetIDsByProductIDResponse struct {
	AssetIds []uint64 `protobuf:"varint,1,rep,packed,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
}

func (m *QueryWhiteListedAssetIDsByProductIDResponse) Reset() {
	*m = QueryWhiteListedAssetIDsByProductIDResponse{}
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryWhiteListedAssetIDsByProductIDResponse) ProtoMessage() {}
func (*QueryWhiteListedAssetIDsByProductIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{23}
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDResponse.Merge(m, src)
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetIDsByProductIDResponse proto.InternalMessageInfo

type QueryWhiteListedAssetByAllProductRequest struct {
}

func (m *QueryWhiteListedAssetByAllProductRequest) Reset() {
	*m = QueryWhiteListedAssetByAllProductRequest{}
}
func (m *QueryWhiteListedAssetByAllProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhiteListedAssetByAllProductRequest) ProtoMessage()    {}
func (*QueryWhiteListedAssetByAllProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{24}
}
func (m *QueryWhiteListedAssetByAllProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetByAllProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetByAllProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetByAllProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetByAllProductRequest.Merge(m, src)
}
func (m *QueryWhiteListedAssetByAllProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetByAllProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetByAllProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetByAllProductRequest proto.InternalMessageInfo

type QueryWhiteListedAssetByAllProductResponse struct {
	ProductToAllAsset []ProductToAllAsset `protobuf:"bytes,1,rep,name=product_to_all_asset,json=productToAllAsset,proto3" json:"product_to_all_asset" yaml:"product_to_all_asset"`
}

func (m *QueryWhiteListedAssetByAllProductResponse) Reset() {
	*m = QueryWhiteListedAssetByAllProductResponse{}
}
func (m *QueryWhiteListedAssetByAllProductResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryWhiteListedAssetByAllProductResponse) ProtoMessage() {}
func (*QueryWhiteListedAssetByAllProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{25}
}
func (m *QueryWhiteListedAssetByAllProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetByAllProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetByAllProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetByAllProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetByAllProductResponse.Merge(m, src)
}
func (m *QueryWhiteListedAssetByAllProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetByAllProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetByAllProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetByAllProductResponse proto.InternalMessageInfo

type ProductToAllAsset struct {
	ProductId uint64        `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Assets    []types.Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets" yaml:"assets"`
}

func (m *ProductToAllAsset) Reset()         { *m = ProductToAllAsset{} }
func (m *ProductToAllAsset) String() string { return proto.CompactTextString(m) }
func (*ProductToAllAsset) ProtoMessage()    {}
func (*ProductToAllAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{26}
}
func (m *ProductToAllAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductToAllAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductToAllAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductToAllAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductToAllAsset.Merge(m, src)
}
func (m *ProductToAllAsset) XXX_Size() int {
	return m.Size()
}
func (m *ProductToAllAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductToAllAsset.DiscardUnknown(m)
}

var xxx_messageInfo_ProductToAllAsset proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{27}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{28}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryLockerLookupTableByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerLookupTableByAppRequest) Reset()         { *m = QueryLockerLookupTableByAppRequest{} }
func (m *QueryLockerLookupTableByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerLookupTableByAppRequest) ProtoMessage()    {}
func (*QueryLockerLookupTableByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{29}
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppRequest.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppRequest proto.InternalMessageInfo

type QueryLockerLookupTableByAppResponse struct {
	TokenToLockerMapping []*TokenToLockerMapping `protobuf:"bytes,1,rep,name=token_to_locker_mapping,json=tokenToLockerMapping,proto3" json:"token_to_locker_mapping,omitempty" yaml:"token_to_locker_mapping"`
}

func (m *QueryLockerLookupTableByAppResponse) Reset()         { *m = QueryLockerLookupTableByAppResponse{} }
func (m *QueryLockerLookupTableByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerLookupTableByAppResponse) ProtoMessage()    {}
func (*QueryLockerLookupTableByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{30}
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppResponse.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppResponse proto.InternalMessageInfo

type QueryLockerLookupTableByAppAndAssetIdRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Reset() {
	*m = QueryLockerLookupTableByAppAndAssetIdRequest{}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerLookupTableByAppAndAssetIdRequest) ProtoMessage() {}
func (*QueryLockerLookupTableByAppAndAssetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{31}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest proto.InternalMessageInfo

type QueryLockerLookupTableByAppAndAssetIdResponse struct {
	TokenToLockerMapping *TokenToLockerMapping `protobuf:"bytes,1,opt,name=token_to_locker_mapping,json=tokenToLockerMapping,proto3" json:"token_to_locker_mapping,omitempty" yaml:"token_to_locker_mapping"`
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Reset() {
	*m = QueryLockerLookupTableByAppAndAssetIdResponse{}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerLookupTableByAppAndAssetIdResponse) ProtoMessage() {}
func (*QueryLockerLookupTableByAppAndAssetIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{32}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse proto.InternalMessageInfo

type QueryLockerTotalDepositedByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerTotalDepositedByAppRequest) Reset()         { *m = QueryLockerTotalDepositedByAppRequest{} }
func (m *QueryLockerTotalDepositedByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerTotalDepositedByAppRequest) ProtoMessage()    {}
func (*QueryLockerTotalDepositedByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{33}
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.Merge(m, src)
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalDepositedByAppRequest proto.InternalMessageInfo

type QueryLockerTotalDepositedByAppResponse struct {
	LockedDepositedAmountDataMap []LockedDepositedAmountDataMap `protobuf:"bytes,1,rep,name=locked_deposited_amount_data_map,json=lockedDepositedAmountDataMap,proto3" json:"locked_deposited_amount_data_map" yaml:"locked_deposited_amount_data_map"`
}

func (m *QueryLockerTotalDepositedByAppResponse) Reset() {
	*m = QueryLockerTotalDepositedByAppResponse{}
}
func (m *QueryLockerTotalDepositedByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerTotalDepositedByAppResponse) ProtoMessage()    {}
func (*QueryLockerTotalDepositedByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{34}
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.Merge(m, src)
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalDepositedByAppResponse proto.InternalMessageInfo

type QueryStateRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Height  string `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	Target  string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *QueryStateRequest) Reset()         { *m = QueryStateRequest{} }
func (m *QueryStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStateRequest) ProtoMessage()    {}
func (*QueryStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{35}
}
func (m *QueryStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateRequest.Merge(m, src)
}
func (m *QueryStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateRequest proto.InternalMessageInfo

type QueryStateResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount" yaml:"amount"`
}

func (m *QueryStateResponse) Reset()         { *m = QueryStateResponse{} }
func (m *QueryStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStateResponse) ProtoMessage()    {}
func (*QueryStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{36}
}
func (m *QueryStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateResponse.Merge(m, src)
}
func (m *QueryStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryLockerInfoRequest)(nil), "comdex.locker.v1beta1.QueryLockerInfoRequest")
	proto.RegisterType((*QueryLockerInfoResponse)(nil), "comdex.locker.v1beta1.QueryLockerInfoResponse")
	proto.RegisterType((*QueryLockersByProductToAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryLockersByProductToAssetIDRequest")
	proto.RegisterType((*QueryLockersByProductToAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryLockersByProductToAssetIDResponse")
	proto.RegisterType((*QueryLockerInfoByProductIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerInfoByProductIDRequest")
	proto.RegisterType((*QueryLockerInfoByProductIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerInfoByProductIDResponse")
	proto.RegisterType((*QueryTotalDepositByProductAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryTotalDepositByProductAssetIDRequest")
	proto.RegisterType((*QueryTotalDepositByProductAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryTotalDepositByProductAssetIDResponse")
	proto.RegisterType((*QueryOwnerLockerByProductIDbyOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByProductIDbyOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerByProductIDbyOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByProductIDbyOwnerResponse")
	proto.RegisterType((*QueryOwnerLockerOfAllProductByOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerOfAllProductByOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerOfAllProductByOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerOfAllProductByOwnerResponse")
	proto.RegisterType((*QueryOwnerTxDetailsLockerOfProductByOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerTxDetailsLockerOfProductByOwnerRequest")
	proto.RegisterType((*QueryOwnerTxDetailsLockerOfProductByOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerTxDetailsLockerOfProductByOwnerResponse")
	proto.RegisterType((*QueryOwnerLockerByProductToAssetIDbyOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByProductToAssetIDbyOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerByProductToAssetIDbyOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByProductToAssetIDbyOwnerResponse")
	proto.RegisterType((*QueryLockerByProductByOwnerRequest)(nil), "comdex.locker.v1beta1.QueryLockerByProductByOwnerRequest")
	proto.RegisterType((*QueryLockerByProductByOwnerResponse)(nil), "comdex.locker.v1beta1.QueryLockerByProductByOwnerResponse")
	proto.RegisterType((*QueryLockerCountByProductIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerCountByProductIDRequest")
	proto.RegisterType((*QueryLockerCountByProductIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerCountByProductIDResponse")
	proto.RegisterType((*QueryLockerCountByProductToAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerCountByProductToAssetIDRequest")
	proto.RegisterType((*QueryLockerCountByProductToAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerCountByProductToAssetIDResponse")
	proto.RegisterType((*QueryWhiteListedAssetIDsByProductIDRequest)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetIDsByProductIDRequest")
	proto.RegisterType((*QueryWhiteListedAssetIDsByProductIDResponse)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetIDsByProductIDResponse")
	proto.RegisterType((*QueryWhiteListedAssetByAllProductRequest)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetByAllProductRequest")
	proto.RegisterType((*QueryWhiteListedAssetByAllProductResponse)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetByAllProductResponse")
	proto.RegisterType((*ProductToAllAsset)(nil), "comdex.locker.v1beta1.ProductToAllAsset")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.locker.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.locker.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLockerLookupTableByAppRequest)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppRequest")
	proto.RegisterType((*QueryLockerLookupTableByAppResponse)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppResponse")
	proto.RegisterType((*QueryLockerLookupTableByAppAndAssetIdRequest)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppAndAssetIdRequest")
	proto.RegisterType((*QueryLockerLookupTableByAppAndAssetIdResponse)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppAndAssetIdResponse")
	proto.RegisterType((*QueryLockerTotalDepositedByAppRequest)(nil), "comdex.locker.v1beta1.QueryLockerTotalDepositedByAppRequest")
	proto.RegisterType((*QueryLockerTotalDepositedByAppResponse)(nil), "comdex.locker.v1beta1.QueryLockerTotalDepositedByAppResponse")
	proto.RegisterType((*QueryStateRequest)(nil), "comdex.locker.v1beta1.QueryStateRequest")
	proto.RegisterType((*QueryStateResponse)(nil), "comdex.locker.v1beta1.QueryStateResponse")
}

func init() { proto.RegisterFile("comdex/locker/v1beta1/query.proto", fileDescriptor_c4f9c00f752dba84) }

var fileDescriptor_c4f9c00f752dba84 = []byte{
	// 1958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x6c, 0x13, 0xc9,
	0x1d, 0xcf, 0x1a, 0x12, 0xf0, 0x04, 0x44, 0x33, 0x04, 0x48, 0x1d, 0x62, 0x87, 0x41, 0x90, 0x0f,
	0x6a, 0x2f, 0x04, 0x5a, 0xca, 0x97, 0x20, 0x4e, 0x0a, 0x0d, 0x4d, 0x48, 0x58, 0x4c, 0x3f, 0x90,
	0x8a, 0xbb, 0xf6, 0x6e, 0x9c, 0x55, 0x36, 0xbb, 0x8b, 0x77, 0x5d, 0x62, 0x45, 0x41, 0x2a, 0x95,
	0xfa, 0xa1, 0xaa, 0x2a, 0x55, 0x25, 0xde, 0xfb, 0xd4, 0x4a, 0xad, 0xfa, 0xdc, 0xc7, 0x3e, 0xf2,
	0x88, 0x7a, 0xd2, 0x7d, 0xbc, 0x58, 0x77, 0xc9, 0xbd, 0xdd, 0xc3, 0x49, 0x91, 0xee, 0xe5, 0x4e,
	0xe8, 0x4e, 0x3b, 0x33, 0xbb, 0xde, 0xb5, 0xbd, 0xe3, 0x71, 0x9c, 0x83, 0xa7, 0x8b, 0x77, 0xe7,
	0xff, 0x9f, 0xdf, 0xef, 0x37, 0xb3, 0xff, 0xff, 0xcc, 0xef, 0x00, 0xa7, 0x8a, 0xe6, 0x9a, 0xa2,
	0xae, 0x8b, 0xba, 0x59, 0x5c, 0x55, 0xcb, 0xe2, 0xaf, 0x2f, 0x14, 0x54, 0x47, 0xbe, 0x20, 0x3e,
	0xa9, 0xa8, 0xe5, 0x6a, 0xc6, 0x2a, 0x9b, 0x8e, 0x09, 0x8f, 0x91, 0x21, 0x19, 0x32, 0x24, 0x43,
	0x87, 0x24, 0x06, 0x4b, 0x66, 0xc9, 0xc4, 0x23, 0x44, 0xf7, 0x2f, 0x32, 0x38, 0x71, 0xb2, 0x64,
	0x9a, 0x25, 0x5d, 0x15, 0x65, 0x4b, 0x13, 0x65, 0xc3, 0x30, 0x1d, 0xd9, 0xd1, 0x4c, 0xc3, 0xa6,
	0x6f, 0x51, 0xeb, 0xd9, 0x68, 0x66, 0xe6, 0x18, 0x4b, 0x2e, 0xcb, 0x6b, 0x5e, 0x9e, 0x51, 0x3a,
	0x46, 0xb6, 0x6d, 0xd5, 0xf1, 0x87, 0xe0, 0x5f, 0x74, 0x44, 0xb2, 0x68, 0xda, 0x6b, 0xa6, 0x2d,
	0x16, 0x64, 0x5b, 0xf5, 0x07, 0x14, 0x4d, 0xcd, 0xa0, 0xef, 0x27, 0x83, 0xef, 0x31, 0xdb, 0xc0,
	0x4c, 0x25, 0xcd, 0xc0, 0xb0, 0xc9, 0x58, 0x74, 0x19, 0x1c, 0xbf, 0xef, 0x8e, 0x98, 0xc7, 0x88,
	0xe6, 0x8c, 0x65, 0x53, 0x52, 0x9f, 0x54, 0x54, 0xdb, 0x81, 0x23, 0x20, 0xa6, 0x29, 0x43, 0xc2,
	0xa8, 0x30, 0x1e, 0xcf, 0x1e, 0xde, 0xa9, 0xa5, 0xe2, 0x55, 0x79, 0x4d, 0xbf, 0x8a, 0x34, 0x05,
	0x49, 0x31, 0x4d, 0x41, 0x15, 0x70, 0xa2, 0x29, 0xd0, 0xb6, 0x4c, 0xc3, 0x56, 0xe1, 0x23, 0xd0,
	0x4f, 0x08, 0xe6, 0x35, 0x63, 0xd9, 0xc4, 0x29, 0xfa, 0xa7, 0x46, 0x32, 0x2d, 0xa5, 0xce, 0x90,
	0xf8, 0x6c, 0xe2, 0x55, 0x2d, 0xd5, 0xb3, 0x53, 0x4b, 0x41, 0x32, 0x4b, 0x20, 0x1e, 0x49, 0x40,
	0xf7, 0xe7, 0x40, 0x7f, 0x16, 0xc0, 0x99, 0xc0, 0xbc, 0x76, 0xb6, 0xba, 0x54, 0x36, 0x95, 0x4a,
	0xd1, 0xc9, 0x99, 0xd3, 0xae, 0x44, 0x73, 0xb3, 0x1e, 0xfe, 0x4b, 0x00, 0x58, 0xe4, 0x55, 0x9e,
	0xf2, 0xd8, 0x9f, 0x3d, 0xb6, 0x53, 0x4b, 0x0d, 0x90, 0x19, 0xea, 0xef, 0x90, 0x14, 0xa7, 0x3f,
	0xe6, 0x14, 0x98, 0x01, 0x07, 0xb1, 0xd4, 0x6e, 0x4c, 0x0c, 0xc7, 0x1c, 0xdd, 0xa9, 0xa5, 0x8e,
	0x90, 0x18, 0xef, 0x0d, 0x92, 0x0e, 0xe0, 0x3f, 0xe7, 0x14, 0xf4, 0x18, 0x9c, 0x6d, 0x07, 0x87,
	0xaa, 0x72, 0x09, 0x00, 0x8f, 0x95, 0x62, 0x0f, 0x09, 0xa3, 0xfb, 0xc6, 0xe3, 0x41, 0x3c, 0xf5,
	0x77, 0x48, 0x8a, 0x53, 0xc2, 0x8a, 0x8d, 0x7e, 0x01, 0x4e, 0x35, 0xc8, 0xec, 0x4f, 0xd1, 0x25,
	0x55, 0xf4, 0x08, 0x20, 0x56, 0xea, 0xae, 0x60, 0xbf, 0x10, 0xc0, 0x38, 0x4e, 0x9e, 0x33, 0x1d,
	0x59, 0x9f, 0x55, 0x2d, 0xd3, 0xd6, 0x1c, 0x3f, 0xfd, 0x3b, 0x59, 0xa9, 0x25, 0x30, 0xc1, 0x81,
	0x88, 0xb2, 0x3e, 0x0d, 0x0e, 0x3b, 0xee, 0xb8, 0xbc, 0x42, 0x06, 0x12, 0x54, 0xd2, 0x21, 0x27,
	0x10, 0x8c, 0xfe, 0x28, 0xd0, 0x94, 0x8b, 0x4f, 0x0d, 0xb5, 0x4c, 0x37, 0x72, 0x5d, 0xc2, 0x02,
	0x79, 0xde, 0x1d, 0xcb, 0xb3, 0xa0, 0xd7, 0x74, 0xb3, 0x60, 0x8a, 0xf1, 0xec, 0x77, 0x76, 0x6a,
	0xa9, 0x43, 0x24, 0x00, 0x3f, 0x46, 0x12, 0x79, 0x8d, 0x0a, 0x60, 0x92, 0x07, 0x4a, 0x57, 0x8b,
	0x9a, 0x6b, 0x9e, 0x63, 0x71, 0x79, 0x5a, 0xd7, 0xe9, 0x34, 0xd9, 0x30, 0x5f, 0x1f, 0xf9, 0x3e,
	0x36, 0xf2, 0x22, 0x38, 0xc7, 0x95, 0xb5, 0x2b, 0xe8, 0x9f, 0x0b, 0xe0, 0x7c, 0x7d, 0x96, 0xdc,
	0xfa, 0xac, 0xea, 0xc8, 0x9a, 0x6e, 0x7b, 0xd3, 0xb5, 0x66, 0xf0, 0xad, 0xae, 0x18, 0xfc, 0x25,
	0x00, 0xf5, 0x6a, 0x8c, 0x45, 0xea, 0x9f, 0x3a, 0x9b, 0x21, 0xa5, 0x3b, 0xe3, 0x96, 0xee, 0x0c,
	0x69, 0x54, 0x5e, 0xa1, 0x5c, 0x92, 0x4b, 0x2a, 0x45, 0x16, 0x42, 0xe1, 0xe7, 0x40, 0x52, 0x20,
	0x21, 0xfa, 0x42, 0x00, 0x17, 0x3a, 0x60, 0x4c, 0xd5, 0xfd, 0x15, 0x38, 0x54, 0xb1, 0xd5, 0x72,
	0xde, 0x59, 0xcf, 0x2b, 0xb2, 0x23, 0x63, 0x7d, 0xfb, 0xa7, 0x4e, 0x45, 0xd4, 0xee, 0x87, 0x36,
	0xce, 0x2c, 0x3b, 0x72, 0x76, 0x98, 0xd6, 0xef, 0xa3, 0x04, 0x55, 0x30, 0x09, 0x92, 0x40, 0xc5,
	0x1f, 0x08, 0x1f, 0x87, 0x68, 0xc7, 0x30, 0xed, 0xb1, 0xb6, 0xb4, 0x09, 0x3c, 0x1e, 0xde, 0xff,
	0x0b, 0xad, 0x74, 0xc3, 0x97, 0xe0, 0x57, 0xe5, 0x3d, 0xf9, 0x36, 0x3b, 0xac, 0x40, 0xdc, 0x5f,
	0xc4, 0x5f, 0x42, 0x4b, 0xd7, 0x96, 0x42, 0x54, 0xd7, 0xdd, 0xb7, 0x77, 0x5d, 0xf7, 0xb9, 0x10,
	0xea, 0x15, 0x3e, 0x98, 0xb7, 0xf9, 0xc1, 0xa0, 0xdf, 0x08, 0xe0, 0x34, 0x13, 0xc4, 0x5b, 0x10,
	0x22, 0xdc, 0x33, 0x67, 0xcc, 0x8a, 0xe1, 0xec, 0x59, 0x3f, 0xbe, 0x1d, 0xa2, 0xd7, 0x9c, 0x9b,
	0xd2, 0x4b, 0x81, 0x7e, 0xd2, 0x9a, 0x8a, 0xee, 0x08, 0xda, 0x98, 0x00, 0x7e, 0x84, 0x63, 0xd0,
	0x5f, 0xbd, 0xb6, 0xd4, 0x2a, 0xd1, 0x3b, 0x3a, 0x26, 0x2d, 0xd0, 0xd6, 0xd1, 0x06, 0x12, 0x2f,
	0x45, 0xaf, 0xdb, 0xfd, 0x6c, 0x45, 0x73, 0xd4, 0x79, 0xcd, 0x76, 0x54, 0x85, 0xe6, 0xb0, 0xf7,
	0x6c, 0x39, 0xee, 0xd2, 0xbe, 0xd4, 0x6e, 0x0e, 0x8a, 0x79, 0x18, 0xc4, 0x3d, 0xde, 0xa4, 0x2d,
	0xed, 0x97, 0x0e, 0x52, 0xf6, 0x36, 0x9a, 0xa4, 0xa7, 0xa1, 0xc6, 0x5c, 0xd9, 0x6a, 0xbd, 0xd1,
	0x51, 0xb4, 0xe8, 0x5f, 0xde, 0xf2, 0xb1, 0x07, 0xd3, 0x69, 0x9f, 0x81, 0x41, 0x0f, 0xbf, 0x63,
	0xe6, 0x65, 0x5d, 0xcf, 0xe3, 0x49, 0xe9, 0xae, 0x1f, 0x8f, 0xd8, 0xf5, 0x75, 0xe5, 0x75, 0x9d,
	0xe4, 0x3e, 0x4d, 0x3f, 0x80, 0xe1, 0xb0, 0x26, 0xc1, 0x9c, 0x48, 0x1a, 0xb0, 0x1a, 0xe3, 0xd0,
	0x33, 0x30, 0xd0, 0x94, 0x0c, 0x8e, 0x34, 0x0b, 0x1e, 0xdc, 0x3c, 0x77, 0x41, 0x1f, 0x4e, 0x68,
	0x0f, 0xc5, 0x30, 0xca, 0x61, 0x0f, 0x25, 0xb9, 0xe4, 0x78, 0x20, 0x09, 0xb0, 0x63, 0x14, 0xd8,
	0xe1, 0xc0, 0xde, 0xb2, 0x91, 0x44, 0x33, 0xa0, 0x41, 0x00, 0xb1, 0x58, 0x4b, 0xf8, 0x0a, 0xe5,
	0x69, 0x58, 0x04, 0x47, 0x43, 0x4f, 0xa9, 0x58, 0xf3, 0xa0, 0x8f, 0x5c, 0xb5, 0xda, 0xdc, 0x49,
	0x48, 0x58, 0xe3, 0xd4, 0x24, 0x14, 0x49, 0x34, 0x07, 0xba, 0x17, 0xaa, 0x05, 0xf3, 0xa6, 0xb9,
	0x5a, 0xb1, 0x72, 0x72, 0x41, 0x57, 0xb3, 0xd5, 0x69, 0xcb, 0xf2, 0x36, 0xdf, 0x38, 0xe8, 0x93,
	0x2d, 0xab, 0xbe, 0xf1, 0x06, 0x02, 0x5c, 0xf0, 0x73, 0x24, 0xf5, 0xca, 0x96, 0x35, 0xa7, 0xa0,
	0xff, 0x84, 0xeb, 0x5b, 0x73, 0x42, 0xca, 0xe2, 0x77, 0x02, 0x38, 0xe1, 0x98, 0xab, 0xaa, 0xe1,
	0xae, 0x0e, 0xad, 0x54, 0x6b, 0xb2, 0x65, 0x69, 0x46, 0x89, 0x2e, 0xfb, 0xb9, 0x08, 0x5e, 0x39,
	0x37, 0x2a, 0x67, 0x92, 0xfc, 0x0b, 0x24, 0x24, 0x8b, 0x76, 0x6a, 0xa9, 0x24, 0x01, 0x14, 0x91,
	0x15, 0x49, 0x83, 0x4e, 0x8b, 0x48, 0xf4, 0x07, 0x01, 0x7c, 0x8f, 0x01, 0x78, 0xda, 0xa0, 0x1f,
	0x8c, 0xd2, 0xb1, 0x16, 0x1d, 0xd7, 0x97, 0xff, 0x0a, 0x20, 0xcd, 0x09, 0x85, 0x4b, 0x45, 0xe1,
	0xed, 0xa9, 0x78, 0x3f, 0x74, 0xa1, 0x0d, 0xde, 0x4e, 0x54, 0x65, 0x97, 0x3b, 0xe9, 0x03, 0x21,
	0x74, 0x2b, 0x6d, 0x99, 0x93, 0xca, 0xf0, 0x6f, 0x01, 0x8c, 0x62, 0x9c, 0x8a, 0x77, 0xd5, 0x51,
	0x95, 0xbc, 0xbc, 0xe6, 0x56, 0x59, 0x7c, 0x78, 0x73, 0xd1, 0xd3, 0x5d, 0x75, 0x91, 0xd5, 0x42,
	0x15, 0x3f, 0xff, 0x34, 0x0e, 0x76, 0xcf, 0x7a, 0x0b, 0xb2, 0x95, 0x15, 0xe9, 0x37, 0x34, 0x16,
	0x68, 0xac, 0x8c, 0xa9, 0x90, 0x74, 0x52, 0x67, 0xa4, 0x43, 0x36, 0x18, 0xc0, 0xc4, 0x1e, 0x38,
	0xb2, 0xe3, 0x9d, 0x86, 0xe1, 0x10, 0x38, 0x20, 0x2b, 0x4a, 0x59, 0xb5, 0xc9, 0x77, 0x1d, 0x97,
	0xbc, 0x9f, 0x70, 0x10, 0xf4, 0x2a, 0xaa, 0x61, 0xae, 0x91, 0xa3, 0x85, 0x44, 0x7e, 0xc0, 0xe3,
	0xa0, 0x6f, 0x45, 0xd5, 0x4a, 0x2b, 0x0e, 0x39, 0x88, 0x49, 0xf4, 0x97, 0xfb, 0xdc, 0x91, 0xcb,
	0x25, 0xd5, 0x19, 0xda, 0x4f, 0x9e, 0x93, 0x5f, 0xee, 0x3d, 0x0f, 0x06, 0x67, 0xa5, 0xd2, 0xd9,
	0xa0, 0x8f, 0xa0, 0xa7, 0xfb, 0xe5, 0xbb, 0xa1, 0x53, 0xac, 0xa7, 0xce, 0x8c, 0xa9, 0x19, 0xd9,
	0x5b, 0x0d, 0x45, 0x0c, 0x87, 0xa1, 0x2f, 0x6b, 0xa9, 0xb1, 0x92, 0xe6, 0xac, 0x54, 0x0a, 0xae,
	0xb2, 0x22, 0x75, 0x6d, 0xc8, 0x7f, 0xd2, 0xb6, 0xb2, 0x2a, 0x3a, 0x55, 0x4b, 0xb5, 0x71, 0x06,
	0x89, 0x4e, 0x35, 0xf5, 0x72, 0x14, 0xf4, 0x62, 0x2c, 0xf0, 0xef, 0x02, 0x38, 0xd2, 0x70, 0x7f,
	0x87, 0xe9, 0x88, 0x25, 0x6a, 0x6d, 0xf1, 0x24, 0x32, 0xbc, 0xc3, 0x09, 0x63, 0x24, 0x3e, 0x7f,
	0xef, 0xd3, 0xbf, 0xc5, 0x26, 0xe0, 0x98, 0xc8, 0xf2, 0xba, 0xf0, 0xb1, 0x49, 0xdc, 0xd0, 0x94,
	0x4d, 0xf8, 0x99, 0x00, 0x92, 0x6c, 0x7b, 0x04, 0x5e, 0x6f, 0x8f, 0x21, 0xda, 0xe4, 0x49, 0xdc,
	0xd8, 0x65, 0x34, 0x25, 0x34, 0x8f, 0x09, 0xdd, 0x86, 0xb3, 0x4c, 0x42, 0x36, 0x66, 0x94, 0xf7,
	0xca, 0x8e, 0xb8, 0x51, 0x6f, 0x6e, 0x9b, 0xe2, 0x86, 0xf7, 0x78, 0x13, 0xbe, 0x2f, 0x80, 0x44,
	0xb4, 0xa3, 0x02, 0x7f, 0xc8, 0xa7, 0x76, 0xf3, 0x01, 0x26, 0x71, 0x65, 0x17, 0x91, 0x94, 0xe1,
	0x0c, 0x66, 0x78, 0x03, 0x5e, 0xe3, 0x61, 0x58, 0xe7, 0x15, 0xe2, 0x08, 0xdf, 0x08, 0xd4, 0x85,
	0x62, 0x79, 0x27, 0xf0, 0x26, 0x0b, 0x25, 0x87, 0x0f, 0x94, 0xb8, 0xb5, 0xfb, 0x04, 0x94, 0xed,
	0x43, 0xcc, 0x76, 0x11, 0x2e, 0x44, 0xb0, 0x0d, 0x79, 0x3a, 0x3e, 0xdd, 0xb6, 0x0b, 0xfb, 0xdb,
	0x18, 0x6d, 0xf5, 0x4c, 0x77, 0x05, 0x32, 0xf1, 0xf3, 0x78, 0x44, 0x89, 0xe9, 0x2e, 0x32, 0x50,
	0x09, 0x7e, 0x8e, 0x25, 0x90, 0xe0, 0x52, 0x84, 0x04, 0xf8, 0x2e, 0xe5, 0xb5, 0xa6, 0x42, 0x15,
	0x1f, 0xef, 0x3c, 0xda, 0x85, 0x6a, 0x1e, 0xbf, 0x6e, 0x10, 0x02, 0x3f, 0xdb, 0x84, 0x5f, 0x79,
	0xe7, 0x13, 0xb6, 0x53, 0x03, 0x79, 0x49, 0x44, 0x7b, 0x47, 0x89, 0x6c, 0x37, 0x29, 0xa8, 0x10,
	0x0b, 0x58, 0x88, 0x3b, 0xf0, 0x47, 0x3c, 0x42, 0xe0, 0xed, 0xdf, 0xa0, 0x06, 0x95, 0x82, 0xb2,
	0x7f, 0x19, 0x0b, 0x9a, 0x7d, 0x6d, 0xfc, 0x14, 0x78, 0xa7, 0x2d, 0x01, 0x3e, 0x0f, 0x2a, 0xf1,
	0xe3, 0xee, 0x13, 0x51, 0x3d, 0x7e, 0x8a, 0xf5, 0x58, 0x82, 0xf7, 0x78, 0xf4, 0x70, 0xd6, 0xd3,
	0x0a, 0xc9, 0xea, 0xaa, 0x42, 0x15, 0x69, 0xbd, 0x2d, 0xfe, 0x11, 0x63, 0xb8, 0xa0, 0x8d, 0x6e,
	0x05, 0x87, 0x30, 0x7c, 0x96, 0x0d, 0x87, 0x30, 0x9c, 0xc6, 0x09, 0x2a, 0x61, 0x61, 0x64, 0x98,
	0xe7, 0xde, 0x28, 0x8d, 0x85, 0xa3, 0xe5, 0x57, 0xe3, 0x97, 0x0f, 0x5f, 0xa9, 0x6d, 0x01, 0x0c,
	0x33, 0x0c, 0x0c, 0xc8, 0x51, 0xe6, 0x23, 0x9c, 0x97, 0xc4, 0xd5, 0xdd, 0x84, 0x72, 0x7e, 0x28,
	0xad, 0x98, 0x33, 0xca, 0xc4, 0x47, 0x61, 0x96, 0x8d, 0x3e, 0x06, 0x0f, 0xcb, 0x08, 0x5f, 0x85,
	0x87, 0x65, 0x94, 0x6d, 0xd2, 0xb6, 0x11, 0x92, 0xd6, 0x40, 0xb9, 0x46, 0x35, 0xc2, 0xaf, 0x05,
	0x86, 0xff, 0x53, 0x3f, 0xd3, 0xdc, 0xea, 0x14, 0x67, 0xd3, 0xb9, 0x66, 0xba, 0x8b, 0x0c, 0x94,
	0x70, 0x0e, 0x13, 0xbe, 0x07, 0xe7, 0x3b, 0x21, 0xdc, 0xb6, 0x15, 0xbe, 0xf1, 0x9a, 0x00, 0xdb,
	0x16, 0x61, 0x37, 0x01, 0x2e, 0xdb, 0x86, 0xdd, 0x04, 0xf8, 0x5c, 0x19, 0xb4, 0x88, 0x45, 0x98,
	0x83, 0x77, 0x22, 0x44, 0x78, 0xea, 0xa6, 0xd1, 0x71, 0x1a, 0x9f, 0x7b, 0xb0, 0xe4, 0x35, 0xed,
	0x80, 0x6d, 0xef, 0x28, 0xc4, 0x72, 0x67, 0xd8, 0x47, 0x21, 0x0e, 0x13, 0x88, 0x7d, 0x14, 0xe2,
	0x31, 0x86, 0xd0, 0x35, 0xcc, 0xfc, 0xfb, 0xf0, 0x22, 0x37, 0xf3, 0x3a, 0x4d, 0xf8, 0x27, 0x01,
	0xf4, 0x07, 0x0c, 0x14, 0x38, 0xc1, 0x82, 0x13, 0xb2, 0x5e, 0x12, 0x93, 0x3c, 0x43, 0x29, 0xc6,
	0x33, 0x18, 0x63, 0x0a, 0x8e, 0x88, 0xac, 0xff, 0x2f, 0x0e, 0xff, 0x1f, 0xae, 0x28, 0x8d, 0x97,
	0x7b, 0x9e, 0x8a, 0x12, 0xe1, 0xce, 0xf0, 0x54, 0x94, 0x28, 0x1f, 0x06, 0x5d, 0xc7, 0xe8, 0x7f,
	0x00, 0x2f, 0x31, 0xeb, 0x66, 0x5a, 0xc7, 0xf1, 0xe9, 0x42, 0x35, 0x2d, 0x5b, 0x96, 0xb8, 0x41,
	0xae, 0xea, 0x9b, 0xf0, 0xf7, 0xb1, 0xd0, 0xbd, 0x3f, 0xda, 0xb1, 0x80, 0x33, 0x9d, 0x63, 0x6c,
	0xb2, 0x5e, 0x12, 0xb3, 0xdd, 0x25, 0xa1, 0x94, 0x1f, 0x60, 0xca, 0x0b, 0xf0, 0x27, 0x1d, 0x50,
	0x4e, 0xcb, 0x86, 0x92, 0xa6, 0x3e, 0x8d, 0x4f, 0x3f, 0x58, 0x52, 0x6a, 0xe1, 0x4b, 0x62, 0x0b,
	0xb7, 0x82, 0xe7, 0x92, 0x18, 0x6d, 0x9c, 0xf0, 0x5c, 0x12, 0x19, 0x16, 0x09, 0xba, 0x89, 0x49,
	0x5f, 0x81, 0x97, 0xd9, 0xa4, 0x7d, 0x4f, 0xa3, 0x69, 0xa9, 0x8b, 0x00, 0xd4, 0xed, 0x03, 0x38,
	0xce, 0x42, 0x13, 0xf4, 0x35, 0x12, 0x13, 0x1c, 0x23, 0x29, 0xc6, 0x9e, 0xac, 0xf4, 0xea, 0x93,
	0x64, 0xcf, 0x3f, 0xb7, 0x92, 0x3d, 0xaf, 0xb6, 0x92, 0xc2, 0xeb, 0xad, 0xa4, 0xf0, 0xf1, 0x56,
	0x52, 0x78, 0xb1, 0x9d, 0xec, 0x79, 0xbd, 0x9d, 0xec, 0xf9, 0x70, 0x3b, 0xd9, 0xf3, 0xe8, 0x7c,
	0xc8, 0x6b, 0x70, 0x13, 0xa7, 0xcd, 0xe5, 0x65, 0xad, 0xa8, 0xc9, 0xba, 0xc7, 0xcc, 0xe7, 0x86,
	0x9d, 0x87, 0x42, 0x1f, 0xfe, 0x37, 0x22, 0x17, 0xbf, 0x09, 0x00, 0x00, 0xff, 0xff, 0x22, 0x4e,
	0xc4, 0x0a, 0x49, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryLockerInfo(ctx context.Context, in *QueryLockerInfoRequest, opts ...grpc.CallOption) (*QueryLockerInfoResponse, error)
	QueryLockersByProductToAssetID(ctx context.Context, in *QueryLockersByProductToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockersByProductToAssetIDResponse, error)
	QueryLockerInfoByProductID(ctx context.Context, in *QueryLockerInfoByProductIDRequest, opts ...grpc.CallOption) (*QueryLockerInfoByProductIDResponse, error)
	QueryTotalDepositByProductAssetID(ctx context.Context, in *QueryTotalDepositByProductAssetIDRequest, opts ...grpc.CallOption) (*QueryTotalDepositByProductAssetIDResponse, error)
	QueryOwnerLockerByProductIDbyOwner(ctx context.Context, in *QueryOwnerLockerByProductIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByProductIDbyOwnerResponse, error)
	QueryOwnerLockerOfAllProductByOwner(ctx context.Context, in *QueryOwnerLockerOfAllProductByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerOfAllProductByOwnerResponse, error)
	QueryOwnerTxDetailsLockerOfProductByOwner(ctx context.Context, in *QueryOwnerTxDetailsLockerOfProductByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse, error)
	QueryOwnerLockerByProductToAssetIDbyOwner(ctx context.Context, in *QueryOwnerLockerByProductToAssetIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse, error)
	QueryLockerByProductByOwner(ctx context.Context, in *QueryLockerByProductByOwnerRequest, opts ...grpc.CallOption) (*QueryLockerByProductByOwnerResponse, error)
	QueryLockerCountByProductID(ctx context.Context, in *QueryLockerCountByProductIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByProductIDResponse, error)
	QueryLockerCountByProductToAssetID(ctx context.Context, in *QueryLockerCountByProductToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByProductToAssetIDResponse, error)
	QueryWhiteListedAssetIDsByProductID(ctx context.Context, in *QueryWhiteListedAssetIDsByProductIDRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetIDsByProductIDResponse, error)
	QueryWhiteListedAssetByAllProduct(ctx context.Context, in *QueryWhiteListedAssetByAllProductRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetByAllProductResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryLockerLookupTableByApp(ctx context.Context, in *QueryLockerLookupTableByAppRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppResponse, error)
	QueryLockerLookupTableByAppAndAssetId(ctx context.Context, in *QueryLockerLookupTableByAppAndAssetIdRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppAndAssetIdResponse, error)
	QueryLockerTotalDepositedByApp(ctx context.Context, in *QueryLockerTotalDepositedByAppRequest, opts ...grpc.CallOption) (*QueryLockerTotalDepositedByAppResponse, error)
	QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryLockerInfo(ctx context.Context, in *QueryLockerInfoRequest, opts ...grpc.CallOption) (*QueryLockerInfoResponse, error) {
	out := new(QueryLockerInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockersByProductToAssetID(ctx context.Context, in *QueryLockersByProductToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockersByProductToAssetIDResponse, error) {
	out := new(QueryLockersByProductToAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockersByProductToAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerInfoByProductID(ctx context.Context, in *QueryLockerInfoByProductIDRequest, opts ...grpc.CallOption) (*QueryLockerInfoByProductIDResponse, error) {
	out := new(QueryLockerInfoByProductIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerInfoByProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalDepositByProductAssetID(ctx context.Context, in *QueryTotalDepositByProductAssetIDRequest, opts ...grpc.CallOption) (*QueryTotalDepositByProductAssetIDResponse, error) {
	out := new(QueryTotalDepositByProductAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryTotalDepositByProductAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerByProductIDbyOwner(ctx context.Context, in *QueryOwnerLockerByProductIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByProductIDbyOwnerResponse, error) {
	out := new(QueryOwnerLockerByProductIDbyOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerByProductIDbyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerOfAllProductByOwner(ctx context.Context, in *QueryOwnerLockerOfAllProductByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerOfAllProductByOwnerResponse, error) {
	out := new(QueryOwnerLockerOfAllProductByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllProductByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerTxDetailsLockerOfProductByOwner(ctx context.Context, in *QueryOwnerTxDetailsLockerOfProductByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse, error) {
	out := new(QueryOwnerTxDetailsLockerOfProductByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfProductByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerByProductToAssetIDbyOwner(ctx context.Context, in *QueryOwnerLockerByProductToAssetIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse, error) {
	out := new(QueryOwnerLockerByProductToAssetIDbyOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerByProductToAssetIDbyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerByProductByOwner(ctx context.Context, in *QueryLockerByProductByOwnerRequest, opts ...grpc.CallOption) (*QueryLockerByProductByOwnerResponse, error) {
	out := new(QueryLockerByProductByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerByProductByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerCountByProductID(ctx context.Context, in *QueryLockerCountByProductIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByProductIDResponse, error) {
	out := new(QueryLockerCountByProductIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerCountByProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerCountByProductToAssetID(ctx context.Context, in *QueryLockerCountByProductToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByProductToAssetIDResponse, error) {
	out := new(QueryLockerCountByProductToAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerCountByProductToAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWhiteListedAssetIDsByProductID(ctx context.Context, in *QueryWhiteListedAssetIDsByProductIDRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetIDsByProductIDResponse, error) {
	out := new(QueryWhiteListedAssetIDsByProductIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWhiteListedAssetByAllProduct(ctx context.Context, in *QueryWhiteListedAssetByAllProductRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetByAllProductResponse, error) {
	out := new(QueryWhiteListedAssetByAllProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerLookupTableByApp(ctx context.Context, in *QueryLockerLookupTableByAppRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppResponse, error) {
	out := new(QueryLockerLookupTableByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerLookupTableByAppAndAssetId(ctx context.Context, in *QueryLockerLookupTableByAppAndAssetIdRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppAndAssetIdResponse, error) {
	out := new(QueryLockerLookupTableByAppAndAssetIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerTotalDepositedByApp(ctx context.Context, in *QueryLockerTotalDepositedByAppRequest, opts ...grpc.CallOption) (*QueryLockerTotalDepositedByAppResponse, error) {
	out := new(QueryLockerTotalDepositedByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryLockerInfo(context.Context, *QueryLockerInfoRequest) (*QueryLockerInfoResponse, error)
	QueryLockersByProductToAssetID(context.Context, *QueryLockersByProductToAssetIDRequest) (*QueryLockersByProductToAssetIDResponse, error)
	QueryLockerInfoByProductID(context.Context, *QueryLockerInfoByProductIDRequest) (*QueryLockerInfoByProductIDResponse, error)
	QueryTotalDepositByProductAssetID(context.Context, *QueryTotalDepositByProductAssetIDRequest) (*QueryTotalDepositByProductAssetIDResponse, error)
	QueryOwnerLockerByProductIDbyOwner(context.Context, *QueryOwnerLockerByProductIDbyOwnerRequest) (*QueryOwnerLockerByProductIDbyOwnerResponse, error)
	QueryOwnerLockerOfAllProductByOwner(context.Context, *QueryOwnerLockerOfAllProductByOwnerRequest) (*QueryOwnerLockerOfAllProductByOwnerResponse, error)
	QueryOwnerTxDetailsLockerOfProductByOwner(context.Context, *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse, error)
	QueryOwnerLockerByProductToAssetIDbyOwner(context.Context, *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse, error)
	QueryLockerByProductByOwner(context.Context, *QueryLockerByProductByOwnerRequest) (*QueryLockerByProductByOwnerResponse, error)
	QueryLockerCountByProductID(context.Context, *QueryLockerCountByProductIDRequest) (*QueryLockerCountByProductIDResponse, error)
	QueryLockerCountByProductToAssetID(context.Context, *QueryLockerCountByProductToAssetIDRequest) (*QueryLockerCountByProductToAssetIDResponse, error)
	QueryWhiteListedAssetIDsByProductID(context.Context, *QueryWhiteListedAssetIDsByProductIDRequest) (*QueryWhiteListedAssetIDsByProductIDResponse, error)
	QueryWhiteListedAssetByAllProduct(context.Context, *QueryWhiteListedAssetByAllProductRequest) (*QueryWhiteListedAssetByAllProductResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryLockerLookupTableByApp(context.Context, *QueryLockerLookupTableByAppRequest) (*QueryLockerLookupTableByAppResponse, error)
	QueryLockerLookupTableByAppAndAssetId(context.Context, *QueryLockerLookupTableByAppAndAssetIdRequest) (*QueryLockerLookupTableByAppAndAssetIdResponse, error)
	QueryLockerTotalDepositedByApp(context.Context, *QueryLockerTotalDepositedByAppRequest) (*QueryLockerTotalDepositedByAppResponse, error)
	QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryLockerInfo(ctx context.Context, req *QueryLockerInfoRequest) (*QueryLockerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerInfo not implemented")
}
func (*UnimplementedQueryServer) QueryLockersByProductToAssetID(ctx context.Context, req *QueryLockersByProductToAssetIDRequest) (*QueryLockersByProductToAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockersByProductToAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryLockerInfoByProductID(ctx context.Context, req *QueryLockerInfoByProductIDRequest) (*QueryLockerInfoByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerInfoByProductID not implemented")
}
func (*UnimplementedQueryServer) QueryTotalDepositByProductAssetID(ctx context.Context, req *QueryTotalDepositByProductAssetIDRequest) (*QueryTotalDepositByProductAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalDepositByProductAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerByProductIDbyOwner(ctx context.Context, req *QueryOwnerLockerByProductIDbyOwnerRequest) (*QueryOwnerLockerByProductIDbyOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerByProductIDbyOwner not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerOfAllProductByOwner(ctx context.Context, req *QueryOwnerLockerOfAllProductByOwnerRequest) (*QueryOwnerLockerOfAllProductByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerOfAllProductByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerTxDetailsLockerOfProductByOwner(ctx context.Context, req *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) (*QueryOwnerTxDetailsLockerOfProductByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerTxDetailsLockerOfProductByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerByProductToAssetIDbyOwner(ctx context.Context, req *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) (*QueryOwnerLockerByProductToAssetIDbyOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerByProductToAssetIDbyOwner not implemented")
}
func (*UnimplementedQueryServer) QueryLockerByProductByOwner(ctx context.Context, req *QueryLockerByProductByOwnerRequest) (*QueryLockerByProductByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerByProductByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryLockerCountByProductID(ctx context.Context, req *QueryLockerCountByProductIDRequest) (*QueryLockerCountByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerCountByProductID not implemented")
}
func (*UnimplementedQueryServer) QueryLockerCountByProductToAssetID(ctx context.Context, req *QueryLockerCountByProductToAssetIDRequest) (*QueryLockerCountByProductToAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerCountByProductToAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryWhiteListedAssetIDsByProductID(ctx context.Context, req *QueryWhiteListedAssetIDsByProductIDRequest) (*QueryWhiteListedAssetIDsByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhiteListedAssetIDsByProductID not implemented")
}
func (*UnimplementedQueryServer) QueryWhiteListedAssetByAllProduct(ctx context.Context, req *QueryWhiteListedAssetByAllProductRequest) (*QueryWhiteListedAssetByAllProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhiteListedAssetByAllProduct not implemented")
}
func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryLockerLookupTableByApp(ctx context.Context, req *QueryLockerLookupTableByAppRequest) (*QueryLockerLookupTableByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerLookupTableByApp not implemented")
}
func (*UnimplementedQueryServer) QueryLockerLookupTableByAppAndAssetId(ctx context.Context, req *QueryLockerLookupTableByAppAndAssetIdRequest) (*QueryLockerLookupTableByAppAndAssetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerLookupTableByAppAndAssetId not implemented")
}
func (*UnimplementedQueryServer) QueryLockerTotalDepositedByApp(ctx context.Context, req *QueryLockerTotalDepositedByAppRequest) (*QueryLockerTotalDepositedByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerTotalDepositedByApp not implemented")
}
func (*UnimplementedQueryServer) QueryState(ctx context.Context, req *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryLockerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerInfo(ctx, req.(*QueryLockerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockersByProductToAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockersByProductToAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockersByProductToAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockersByProductToAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockersByProductToAssetID(ctx, req.(*QueryLockersByProductToAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerInfoByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerInfoByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerInfoByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerInfoByProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerInfoByProductID(ctx, req.(*QueryLockerInfoByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalDepositByProductAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalDepositByProductAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalDepositByProductAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryTotalDepositByProductAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalDepositByProductAssetID(ctx, req.(*QueryTotalDepositByProductAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerByProductIDbyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerByProductIDbyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerByProductIDbyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerByProductIDbyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerByProductIDbyOwner(ctx, req.(*QueryOwnerLockerByProductIDbyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerOfAllProductByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerOfAllProductByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerOfAllProductByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllProductByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerOfAllProductByOwner(ctx, req.(*QueryOwnerLockerOfAllProductByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerTxDetailsLockerOfProductByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerTxDetailsLockerOfProductByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerTxDetailsLockerOfProductByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfProductByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerTxDetailsLockerOfProductByOwner(ctx, req.(*QueryOwnerTxDetailsLockerOfProductByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerByProductToAssetIDbyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerByProductToAssetIDbyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerByProductToAssetIDbyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerByProductToAssetIDbyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerByProductToAssetIDbyOwner(ctx, req.(*QueryOwnerLockerByProductToAssetIDbyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerByProductByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerByProductByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerByProductByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerByProductByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerByProductByOwner(ctx, req.(*QueryLockerByProductByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerCountByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerCountByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerCountByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerCountByProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerCountByProductID(ctx, req.(*QueryLockerCountByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerCountByProductToAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerCountByProductToAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerCountByProductToAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerCountByProductToAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerCountByProductToAssetID(ctx, req.(*QueryLockerCountByProductToAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWhiteListedAssetIDsByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhiteListedAssetIDsByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWhiteListedAssetIDsByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWhiteListedAssetIDsByProductID(ctx, req.(*QueryWhiteListedAssetIDsByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWhiteListedAssetByAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhiteListedAssetByAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWhiteListedAssetByAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWhiteListedAssetByAllProduct(ctx, req.(*QueryWhiteListedAssetByAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerLookupTableByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerLookupTableByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerLookupTableByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerLookupTableByApp(ctx, req.(*QueryLockerLookupTableByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerLookupTableByAppAndAssetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerLookupTableByAppAndAssetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerLookupTableByAppAndAssetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerLookupTableByAppAndAssetId(ctx, req.(*QueryLockerLookupTableByAppAndAssetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerTotalDepositedByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerTotalDepositedByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerTotalDepositedByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerTotalDepositedByApp(ctx, req.(*QueryLockerTotalDepositedByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryState(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.locker.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLockerInfo",
			Handler:    _Query_QueryLockerInfo_Handler,
		},
		{
			MethodName: "QueryLockersByProductToAssetID",
			Handler:    _Query_QueryLockersByProductToAssetID_Handler,
		},
		{
			MethodName: "QueryLockerInfoByProductID",
			Handler:    _Query_QueryLockerInfoByProductID_Handler,
		},
		{
			MethodName: "QueryTotalDepositByProductAssetID",
			Handler:    _Query_QueryTotalDepositByProductAssetID_Handler,
		},
		{
			MethodName: "QueryOwnerLockerByProductIDbyOwner",
			Handler:    _Query_QueryOwnerLockerByProductIDbyOwner_Handler,
		},
		{
			MethodName: "QueryOwnerLockerOfAllProductByOwner",
			Handler:    _Query_QueryOwnerLockerOfAllProductByOwner_Handler,
		},
		{
			MethodName: "QueryOwnerTxDetailsLockerOfProductByOwner",
			Handler:    _Query_QueryOwnerTxDetailsLockerOfProductByOwner_Handler,
		},
		{
			MethodName: "QueryOwnerLockerByProductToAssetIDbyOwner",
			Handler:    _Query_QueryOwnerLockerByProductToAssetIDbyOwner_Handler,
		},
		{
			MethodName: "QueryLockerByProductByOwner",
			Handler:    _Query_QueryLockerByProductByOwner_Handler,
		},
		{
			MethodName: "QueryLockerCountByProductID",
			Handler:    _Query_QueryLockerCountByProductID_Handler,
		},
		{
			MethodName: "QueryLockerCountByProductToAssetID",
			Handler:    _Query_QueryLockerCountByProductToAssetID_Handler,
		},
		{
			MethodName: "QueryWhiteListedAssetIDsByProductID",
			Handler:    _Query_QueryWhiteListedAssetIDsByProductID_Handler,
		},
		{
			MethodName: "QueryWhiteListedAssetByAllProduct",
			Handler:    _Query_QueryWhiteListedAssetByAllProduct_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryLockerLookupTableByApp",
			Handler:    _Query_QueryLockerLookupTableByApp_Handler,
		},
		{
			MethodName: "QueryLockerLookupTableByAppAndAssetId",
			Handler:    _Query_QueryLockerLookupTableByAppAndAssetId_Handler,
		},
		{
			MethodName: "QueryLockerTotalDepositedByApp",
			Handler:    _Query_QueryLockerTotalDepositedByApp_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _Query_QueryState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/locker/v1beta1/query.proto",
}

func (m *QueryLockerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockerInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockersByProductToAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockersByProductToAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockersByProductToAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockersByProductToAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockersByProductToAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockersByProductToAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoByProductIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoByProductIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoByProductIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoByProductIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoByProductIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoByProductIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDepositByProductAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDepositByProductAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDepositByProductAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDepositByProductAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDepositByProductAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDepositByProductAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDeposit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDeposit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByProductIDbyOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByProductIDbyOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByProductIDbyOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByProductIDbyOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByProductIDbyOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByProductIDbyOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerOfAllProductByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerOfAllProductByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerOfAllProductByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerOfAllProductByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerOfAllProductByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerOfAllProductByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserTxData) > 0 {
		for iNdEx := len(m.UserTxData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserTxData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for iNdEx := len(m.LockerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerByProductByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerByProductByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerByProductByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerByProductByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerByProductByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerByProductByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for iNdEx := len(m.LockerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByProductIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByProductIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByProductIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByProductIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByProductIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByProductIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByProductToAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByProductToAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByProductToAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByProductToAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByProductToAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByProductToAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetIDsByProductIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetIDsByProductIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetIDsByProductIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetIDsByProductIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetIDsByProductIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetIDsByProductIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		dAtA5 := make([]byte, len(m.AssetIds)*10)
		var j4 int
		for _, num := range m.AssetIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetByAllProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetByAllProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetByAllProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetByAllProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetByAllProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetByAllProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductToAllAsset) > 0 {
		for iNdEx := len(m.ProductToAllAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductToAllAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProductToAllAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductToAllAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductToAllAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenToLockerMapping) > 0 {
		for iNdEx := len(m.TokenToLockerMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenToLockerMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenToLockerMapping != nil {
		{
			size, err := m.TokenToLockerMapping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalDepositedByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalDepositedByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalDepositedByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalDepositedByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalDepositedByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalDepositedByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockedDepositedAmountDataMap) > 0 {
		for iNdEx := len(m.LockedDepositedAmountDataMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedDepositedAmountDataMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLockerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LockerInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockersByProductToAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockersByProductToAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerInfoByProductIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	return n
}

func (m *QueryLockerInfoByProductIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalDepositByProductAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryTotalDepositByProductAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeposit != 0 {
		n += 1 + sovQuery(uint64(m.TotalDeposit))
	}
	return n
}

func (m *QueryOwnerLockerByProductIDbyOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByProductIDbyOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOwnerLockerOfAllProductByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerOfAllProductByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserTxData) > 0 {
		for _, e := range m.UserTxData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for _, e := range m.LockerInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerByProductByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerByProductByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for _, e := range m.LockerInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerCountByProductIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	return n
}

func (m *QueryLockerCountByProductIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *QueryLockerCountByProductToAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockerCountByProductToAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *QueryWhiteListedAssetIDsByProductIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	return n
}

func (m *QueryWhiteListedAssetIDsByProductIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		l = 0
		for _, e := range m.AssetIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryWhiteListedAssetByAllProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhiteListedAssetByAllProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductToAllAsset) > 0 {
		for _, e := range m.ProductToAllAsset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ProductToAllAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockerLookupTableByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerLookupTableByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenToLockerMapping) > 0 {
		for _, e := range m.TokenToLockerMapping {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenToLockerMapping != nil {
		l = m.TokenToLockerMapping.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerTotalDepositedByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerTotalDepositedByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedDepositedAmountDataMap) > 0 {
		for _, e := range m.LockedDepositedAmountDataMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLockerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockersByProductToAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockersByProductToAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockersByProductToAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockersByProductToAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockersByProductToAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockersByProductToAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoByProductIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoByProductIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoByProductIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoByProductIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoByProductIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoByProductIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDepositByProductAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDepositByProductAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDepositByProductAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDepositByProductAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDepositByProductAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDepositByProductAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			m.TotalDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByProductIDbyOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductIDbyOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductIDbyOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByProductIDbyOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductIDbyOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductIDbyOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerOfAllProductByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllProductByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllProductByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerOfAllProductByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllProductByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllProductByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfProductByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfProductByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerTxDetailsLockerOfProductByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfProductByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfProductByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTxData = append(m.UserTxData, UserTxData{})
			if err := m.UserTxData[len(m.UserTxData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductToAssetIDbyOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductToAssetIDbyOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByProductToAssetIDbyOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductToAssetIDbyOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByProductToAssetIDbyOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerInfo = append(m.LockerInfo, Locker{})
			if err := m.LockerInfo[len(m.LockerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerByProductByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerByProductByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerByProductByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerByProductByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerByProductByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerByProductByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerInfo = append(m.LockerInfo, Locker{})
			if err := m.LockerInfo[len(m.LockerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByProductIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByProductIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByProductIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByProductIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByProductIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByProductIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByProductToAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByProductToAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByProductToAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByProductToAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByProductToAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByProductToAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetIDsByProductIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByProductIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByProductIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetIDsByProductIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByProductIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByProductIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetIds = append(m.AssetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetIds) == 0 {
					m.AssetIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetIds = append(m.AssetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetByAllProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetByAllProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductToAllAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductToAllAsset = append(m.ProductToAllAsset, ProductToAllAsset{})
			if err := m.ProductToAllAsset[len(m.ProductToAllAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductToAllAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductToAllAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductToAllAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, types.Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenToLockerMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenToLockerMapping = append(m.TokenToLockerMapping, &TokenToLockerMapping{})
			if err := m.TokenToLockerMapping[len(m.TokenToLockerMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenToLockerMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenToLockerMapping == nil {
				m.TokenToLockerMapping = &TokenToLockerMapping{}
			}
			if err := m.TokenToLockerMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalDepositedByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalDepositedByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedDepositedAmountDataMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedDepositedAmountDataMap = append(m.LockedDepositedAmountDataMap, LockedDepositedAmountDataMap{})
			if err := m.LockedDepositedAmountDataMap[len(m.LockedDepositedAmountDataMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
