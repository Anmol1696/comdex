// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/asset/v1beta1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAssetsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetsRequest) Reset()         { *m = QueryAssetsRequest{} }
func (m *QueryAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetsRequest) ProtoMessage()    {}
func (*QueryAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{0}
}
func (m *QueryAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetsRequest.Merge(m, src)
}
func (m *QueryAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetsRequest proto.InternalMessageInfo

type QueryAssetsResponse struct {
	Assets     []Asset             `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets" yaml:"assets"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetsResponse) Reset()         { *m = QueryAssetsResponse{} }
func (m *QueryAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetsResponse) ProtoMessage()    {}
func (*QueryAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{1}
}
func (m *QueryAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetsResponse.Merge(m, src)
}
func (m *QueryAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetsResponse proto.InternalMessageInfo

type QueryAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetRequest) Reset()         { *m = QueryAssetRequest{} }
func (m *QueryAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRequest) ProtoMessage()    {}
func (*QueryAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{2}
}
func (m *QueryAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRequest.Merge(m, src)
}
func (m *QueryAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRequest proto.InternalMessageInfo

type QueryAssetResponse struct {
	Asset Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset" yaml:"asset"`
}

func (m *QueryAssetResponse) Reset()         { *m = QueryAssetResponse{} }
func (m *QueryAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetResponse) ProtoMessage()    {}
func (*QueryAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{3}
}
func (m *QueryAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetResponse.Merge(m, src)
}
func (m *QueryAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetResponse proto.InternalMessageInfo

type PairInfo struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetIn  uint64 `protobuf:"varint,2,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty" yaml:"asset_in"`
	DenomIn  string `protobuf:"bytes,3,opt,name=denom_in,json=denomIn,proto3" json:"denom_in,omitempty" yaml:"denom"`
	AssetOut uint64 `protobuf:"varint,4,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty" yaml:"asset_out"`
	DenomOut string `protobuf:"bytes,5,opt,name=denom_out,json=denomOut,proto3" json:"denom_out,omitempty" yaml:"denom"`
}

func (m *PairInfo) Reset()         { *m = PairInfo{} }
func (m *PairInfo) String() string { return proto.CompactTextString(m) }
func (*PairInfo) ProtoMessage()    {}
func (*PairInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{4}
}
func (m *PairInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairInfo.Merge(m, src)
}
func (m *PairInfo) XXX_Size() int {
	return m.Size()
}
func (m *PairInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PairInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PairInfo proto.InternalMessageInfo

type QueryPairsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsRequest) Reset()         { *m = QueryPairsRequest{} }
func (m *QueryPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairsRequest) ProtoMessage()    {}
func (*QueryPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{5}
}
func (m *QueryPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsRequest.Merge(m, src)
}
func (m *QueryPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsRequest proto.InternalMessageInfo

type QueryPairsResponse struct {
	PairsInfo  []PairInfo          `protobuf:"bytes,1,rep,name=pairsInfo,proto3" json:"pairsInfo" yaml:"pairs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsResponse) Reset()         { *m = QueryPairsResponse{} }
func (m *QueryPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairsResponse) ProtoMessage()    {}
func (*QueryPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{6}
}
func (m *QueryPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsResponse.Merge(m, src)
}
func (m *QueryPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsResponse proto.InternalMessageInfo

type QueryPairRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPairRequest) Reset()         { *m = QueryPairRequest{} }
func (m *QueryPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairRequest) ProtoMessage()    {}
func (*QueryPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{7}
}
func (m *QueryPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairRequest.Merge(m, src)
}
func (m *QueryPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairRequest proto.InternalMessageInfo

type QueryPairResponse struct {
	PairInfo PairInfo `protobuf:"bytes,1,opt,name=pairInfo,proto3" json:"pairInfo" yaml:"pair"`
}

func (m *QueryPairResponse) Reset()         { *m = QueryPairResponse{} }
func (m *QueryPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairResponse) ProtoMessage()    {}
func (*QueryPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{8}
}
func (m *QueryPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairResponse.Merge(m, src)
}
func (m *QueryPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairResponse proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{9}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{10}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryAppRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAppRequest) Reset()         { *m = QueryAppRequest{} }
func (m *QueryAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAppRequest) ProtoMessage()    {}
func (*QueryAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{11}
}
func (m *QueryAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppRequest.Merge(m, src)
}
func (m *QueryAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppRequest proto.InternalMessageInfo

type QueryAppResponse struct {
	App AppMapping `protobuf:"bytes,1,opt,name=app,proto3" json:"app" yaml:"app"`
}

func (m *QueryAppResponse) Reset()         { *m = QueryAppResponse{} }
func (m *QueryAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAppResponse) ProtoMessage()    {}
func (*QueryAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{12}
}
func (m *QueryAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppResponse.Merge(m, src)
}
func (m *QueryAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppResponse proto.InternalMessageInfo

type QueryTokenGovRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryTokenGovRequest) Reset()         { *m = QueryTokenGovRequest{} }
func (m *QueryTokenGovRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenGovRequest) ProtoMessage()    {}
func (*QueryTokenGovRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{13}
}
func (m *QueryTokenGovRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenGovRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenGovRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenGovRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenGovRequest.Merge(m, src)
}
func (m *QueryTokenGovRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenGovRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenGovRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenGovRequest proto.InternalMessageInfo

type QueryTokenGovResponse struct {
	GovAssetId uint64 `protobuf:"varint,1,opt,name=gov_asset_id,json=govAssetId,proto3" json:"gov_asset_id,omitempty" yaml:"gov_asset_id"`
}

func (m *QueryTokenGovResponse) Reset()         { *m = QueryTokenGovResponse{} }
func (m *QueryTokenGovResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenGovResponse) ProtoMessage()    {}
func (*QueryTokenGovResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{14}
}
func (m *QueryTokenGovResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenGovResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenGovResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenGovResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenGovResponse.Merge(m, src)
}
func (m *QueryTokenGovResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenGovResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenGovResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenGovResponse proto.InternalMessageInfo

type QueryAppsRequest struct {
}

func (m *QueryAppsRequest) Reset()         { *m = QueryAppsRequest{} }
func (m *QueryAppsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAppsRequest) ProtoMessage()    {}
func (*QueryAppsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{15}
}
func (m *QueryAppsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppsRequest.Merge(m, src)
}
func (m *QueryAppsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppsRequest proto.InternalMessageInfo

type QueryAppsResponse struct {
	Apps []AppMapping `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps" yaml:"apps"`
}

func (m *QueryAppsResponse) Reset()         { *m = QueryAppsResponse{} }
func (m *QueryAppsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAppsResponse) ProtoMessage()    {}
func (*QueryAppsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{16}
}
func (m *QueryAppsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppsResponse.Merge(m, src)
}
func (m *QueryAppsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppsResponse proto.InternalMessageInfo

type QueryPairVaultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPairVaultRequest) Reset()         { *m = QueryPairVaultRequest{} }
func (m *QueryPairVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairVaultRequest) ProtoMessage()    {}
func (*QueryPairVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{17}
}
func (m *QueryPairVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairVaultRequest.Merge(m, src)
}
func (m *QueryPairVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairVaultRequest proto.InternalMessageInfo

type QueryPairVaultResponse struct {
	PairVault ExtendedPairVault `protobuf:"bytes,1,opt,name=pairVault,proto3" json:"pairVault" yaml:"pairVault"`
}

func (m *QueryPairVaultResponse) Reset()         { *m = QueryPairVaultResponse{} }
func (m *QueryPairVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairVaultResponse) ProtoMessage()    {}
func (*QueryPairVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{18}
}
func (m *QueryPairVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairVaultResponse.Merge(m, src)
}
func (m *QueryPairVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairVaultResponse proto.InternalMessageInfo

type QueryPairVaultsRequest struct {
}

func (m *QueryPairVaultsRequest) Reset()         { *m = QueryPairVaultsRequest{} }
func (m *QueryPairVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairVaultsRequest) ProtoMessage()    {}
func (*QueryPairVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{19}
}
func (m *QueryPairVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairVaultsRequest.Merge(m, src)
}
func (m *QueryPairVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairVaultsRequest proto.InternalMessageInfo

type QueryPairVaultsResponse struct {
	PairVault []ExtendedPairVault `protobuf:"bytes,1,rep,name=pairVault,proto3" json:"pairVault" yaml:"pairVault"`
}

func (m *QueryPairVaultsResponse) Reset()         { *m = QueryPairVaultsResponse{} }
func (m *QueryPairVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairVaultsResponse) ProtoMessage()    {}
func (*QueryPairVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{20}
}
func (m *QueryPairVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairVaultsResponse.Merge(m, src)
}
func (m *QueryPairVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairVaultsResponse proto.InternalMessageInfo

type QueryProductToExtendedPairRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
}

func (m *QueryProductToExtendedPairRequest) Reset()         { *m = QueryProductToExtendedPairRequest{} }
func (m *QueryProductToExtendedPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProductToExtendedPairRequest) ProtoMessage()    {}
func (*QueryProductToExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{21}
}
func (m *QueryProductToExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProductToExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProductToExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProductToExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProductToExtendedPairRequest.Merge(m, src)
}
func (m *QueryProductToExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProductToExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProductToExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProductToExtendedPairRequest proto.InternalMessageInfo

type QueryProductToExtendedPairResponse struct {
	ExtendedPair []ExtendedPairVault `protobuf:"bytes,1,rep,name=extended_pair,json=extendedPair,proto3" json:"extended_pair" yaml:"extended_pair"`
}

func (m *QueryProductToExtendedPairResponse) Reset()         { *m = QueryProductToExtendedPairResponse{} }
func (m *QueryProductToExtendedPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProductToExtendedPairResponse) ProtoMessage()    {}
func (*QueryProductToExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{22}
}
func (m *QueryProductToExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProductToExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProductToExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProductToExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProductToExtendedPairResponse.Merge(m, src)
}
func (m *QueryProductToExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProductToExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProductToExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProductToExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairPsmPairWiseRequest struct {
	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
}

func (m *QueryExtendedPairPsmPairWiseRequest) Reset()         { *m = QueryExtendedPairPsmPairWiseRequest{} }
func (m *QueryExtendedPairPsmPairWiseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairPsmPairWiseRequest) ProtoMessage()    {}
func (*QueryExtendedPairPsmPairWiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{23}
}
func (m *QueryExtendedPairPsmPairWiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairPsmPairWiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairPsmPairWiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairPsmPairWiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairPsmPairWiseRequest.Merge(m, src)
}
func (m *QueryExtendedPairPsmPairWiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairPsmPairWiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairPsmPairWiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairPsmPairWiseRequest proto.InternalMessageInfo

type QueryExtendedPairPsmPairWiseResponse struct {
	ExtendedPairsId []uint64 `protobuf:"varint,1,rep,packed,name=extended_pairs_id,json=extendedPairsId,proto3" json:"extended_pairs_id,omitempty" yaml:"extended_pairs_id"`
}

func (m *QueryExtendedPairPsmPairWiseResponse) Reset()         { *m = QueryExtendedPairPsmPairWiseResponse{} }
func (m *QueryExtendedPairPsmPairWiseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairPsmPairWiseResponse) ProtoMessage()    {}
func (*QueryExtendedPairPsmPairWiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{24}
}
func (m *QueryExtendedPairPsmPairWiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairPsmPairWiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairPsmPairWiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairPsmPairWiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairPsmPairWiseResponse.Merge(m, src)
}
func (m *QueryExtendedPairPsmPairWiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairPsmPairWiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairPsmPairWiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairPsmPairWiseResponse proto.InternalMessageInfo

type QueryExtendedPairDataPsmPairWiseRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryExtendedPairDataPsmPairWiseRequest) Reset() {
	*m = QueryExtendedPairDataPsmPairWiseRequest{}
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairDataPsmPairWiseRequest) ProtoMessage()    {}
func (*QueryExtendedPairDataPsmPairWiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{25}
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairDataPsmPairWiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairDataPsmPairWiseRequest.Merge(m, src)
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairDataPsmPairWiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairDataPsmPairWiseRequest proto.InternalMessageInfo

type QueryExtendedPairDataPsmPairWiseResponse struct {
	ExtendedPair []ExtendedPairVault `protobuf:"bytes,1,rep,name=extended_pair,json=extendedPair,proto3" json:"extended_pair" yaml:"extended_pair"`
}

func (m *QueryExtendedPairDataPsmPairWiseResponse) Reset() {
	*m = QueryExtendedPairDataPsmPairWiseResponse{}
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairDataPsmPairWiseResponse) ProtoMessage()    {}
func (*QueryExtendedPairDataPsmPairWiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00878c412a69d054, []int{26}
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairDataPsmPairWiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairDataPsmPairWiseResponse.Merge(m, src)
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairDataPsmPairWiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairDataPsmPairWiseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryAssetsRequest)(nil), "comdex.asset.v1beta1.QueryAssetsRequest")
	proto.RegisterType((*QueryAssetsResponse)(nil), "comdex.asset.v1beta1.QueryAssetsResponse")
	proto.RegisterType((*QueryAssetRequest)(nil), "comdex.asset.v1beta1.QueryAssetRequest")
	proto.RegisterType((*QueryAssetResponse)(nil), "comdex.asset.v1beta1.QueryAssetResponse")
	proto.RegisterType((*PairInfo)(nil), "comdex.asset.v1beta1.PairInfo")
	proto.RegisterType((*QueryPairsRequest)(nil), "comdex.asset.v1beta1.QueryPairsRequest")
	proto.RegisterType((*QueryPairsResponse)(nil), "comdex.asset.v1beta1.QueryPairsResponse")
	proto.RegisterType((*QueryPairRequest)(nil), "comdex.asset.v1beta1.QueryPairRequest")
	proto.RegisterType((*QueryPairResponse)(nil), "comdex.asset.v1beta1.QueryPairResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.asset.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.asset.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAppRequest)(nil), "comdex.asset.v1beta1.QueryAppRequest")
	proto.RegisterType((*QueryAppResponse)(nil), "comdex.asset.v1beta1.QueryAppResponse")
	proto.RegisterType((*QueryTokenGovRequest)(nil), "comdex.asset.v1beta1.QueryTokenGovRequest")
	proto.RegisterType((*QueryTokenGovResponse)(nil), "comdex.asset.v1beta1.QueryTokenGovResponse")
	proto.RegisterType((*QueryAppsRequest)(nil), "comdex.asset.v1beta1.QueryAppsRequest")
	proto.RegisterType((*QueryAppsResponse)(nil), "comdex.asset.v1beta1.QueryAppsResponse")
	proto.RegisterType((*QueryPairVaultRequest)(nil), "comdex.asset.v1beta1.QueryPairVaultRequest")
	proto.RegisterType((*QueryPairVaultResponse)(nil), "comdex.asset.v1beta1.QueryPairVaultResponse")
	proto.RegisterType((*QueryPairVaultsRequest)(nil), "comdex.asset.v1beta1.QueryPairVaultsRequest")
	proto.RegisterType((*QueryPairVaultsResponse)(nil), "comdex.asset.v1beta1.QueryPairVaultsResponse")
	proto.RegisterType((*QueryProductToExtendedPairRequest)(nil), "comdex.asset.v1beta1.QueryProductToExtendedPairRequest")
	proto.RegisterType((*QueryProductToExtendedPairResponse)(nil), "comdex.asset.v1beta1.QueryProductToExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairPsmPairWiseRequest)(nil), "comdex.asset.v1beta1.QueryExtendedPairPsmPairWiseRequest")
	proto.RegisterType((*QueryExtendedPairPsmPairWiseResponse)(nil), "comdex.asset.v1beta1.QueryExtendedPairPsmPairWiseResponse")
	proto.RegisterType((*QueryExtendedPairDataPsmPairWiseRequest)(nil), "comdex.asset.v1beta1.QueryExtendedPairDataPsmPairWiseRequest")
	proto.RegisterType((*QueryExtendedPairDataPsmPairWiseResponse)(nil), "comdex.asset.v1beta1.QueryExtendedPairDataPsmPairWiseResponse")
}

func init() {
	proto.RegisterFile("comdex/asset/v1beta1/querier.proto", fileDescriptor_00878c412a69d054)
}

var fileDescriptor_00878c412a69d054 = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0x5f, 0x6f, 0x14, 0xd5,
	0x1b, 0xc7, 0x3b, 0x6d, 0x29, 0xed, 0xd3, 0x02, 0xed, 0x69, 0xf9, 0xd1, 0x2c, 0xfb, 0xdb, 0xdd,
	0x9e, 0x42, 0xbb, 0xfc, 0xdb, 0x09, 0x15, 0x83, 0x60, 0x20, 0xb8, 0x2a, 0xb8, 0x1a, 0x02, 0x0c,
	0x44, 0x23, 0x06, 0x36, 0xd3, 0x9d, 0xe9, 0x32, 0xd2, 0x9d, 0x73, 0xd8, 0x33, 0x5b, 0xa9, 0x84,
	0x1b, 0x63, 0xd4, 0x78, 0x45, 0x62, 0x62, 0xf4, 0xde, 0x0b, 0xdf, 0x86, 0x77, 0xbd, 0x32, 0x24,
	0x7a, 0xa1, 0x17, 0x6e, 0xb0, 0xf8, 0x0a, 0xfa, 0x0a, 0xcc, 0x9c, 0xf3, 0xcc, 0xec, 0xec, 0x32,
	0x33, 0xbb, 0xa0, 0x72, 0xd5, 0xe9, 0xcc, 0xf3, 0xe7, 0xf3, 0x7d, 0xce, 0x9f, 0xe7, 0x69, 0x81,
	0xd6, 0x58, 0xc3, 0xb2, 0xef, 0xeb, 0xa6, 0x10, 0xb6, 0xa7, 0x6f, 0x9c, 0x5c, 0xb5, 0x3d, 0xf3,
	0xa4, 0x7e, 0xaf, 0x65, 0x37, 0x1d, 0xbb, 0x59, 0xe2, 0x4d, 0xe6, 0x31, 0x32, 0xa7, 0x6c, 0x4a,
	0xd2, 0xa6, 0x84, 0x36, 0x99, 0xa3, 0x35, 0x26, 0x1a, 0x4c, 0xe8, 0xab, 0xa6, 0xb0, 0xa5, 0xc3,
	0x66, 0xe8, 0xce, 0xcd, 0xba, 0xe3, 0x9a, 0x9e, 0xc3, 0x5c, 0x15, 0x21, 0x33, 0x57, 0x67, 0x75,
	0x26, 0x1f, 0x75, 0xff, 0x09, 0xdf, 0x66, 0xeb, 0x8c, 0xd5, 0xd7, 0x6d, 0xdd, 0xe4, 0x8e, 0x6e,
	0xba, 0x2e, 0xf3, 0xa4, 0x8b, 0xc0, 0xaf, 0x85, 0x58, 0x32, 0xc5, 0xa0, 0x2c, 0xf2, 0xb1, 0x16,
	0xdc, 0x74, 0x10, 0x3c, 0xb3, 0x90, 0x60, 0xd0, 0x34, 0x1b, 0x41, 0x96, 0xc3, 0xf1, 0x59, 0x38,
	0xbf, 0x6c, 0x72, 0xee, 0xb8, 0x75, 0x34, 0x3b, 0x1e, 0x6b, 0x66, 0xdf, 0xf7, 0x6c, 0xd7, 0xb2,
	0xad, 0xab, 0xa6, 0xd3, 0x7c, 0xdf, 0x6c, 0xad, 0x23, 0x18, 0x15, 0x40, 0xae, 0xf9, 0x05, 0x79,
	0xc3, 0xb7, 0x16, 0x86, 0x7d, 0xaf, 0x65, 0x0b, 0x8f, 0xdc, 0x02, 0xe8, 0x14, 0x66, 0x5e, 0x2b,
	0x68, 0xc5, 0xc9, 0x95, 0xa5, 0x92, 0xaa, 0x62, 0xc9, 0xaf, 0x62, 0x49, 0x56, 0x31, 0x28, 0x70,
	0xe9, 0xaa, 0x59, 0xb7, 0xd1, 0xb7, 0xbc, 0x7f, 0xa7, 0x9d, 0x9f, 0xd9, 0x34, 0x1b, 0xeb, 0x67,
	0x69, 0x27, 0x06, 0x35, 0x22, 0x01, 0xe9, 0x4f, 0x1a, 0xcc, 0x76, 0x65, 0x15, 0x9c, 0xb9, 0xc2,
	0x26, 0xef, 0xc2, 0x98, 0xa4, 0x16, 0xf3, 0x5a, 0x61, 0xa4, 0x38, 0xb9, 0x72, 0xb0, 0x14, 0xb7,
	0x9c, 0x25, 0xe9, 0x55, 0xde, 0xbf, 0xd5, 0xce, 0x0f, 0xed, 0xb4, 0xf3, 0x7b, 0x54, 0x2e, 0xe5,
	0x48, 0x0d, 0x8c, 0x40, 0x6e, 0x77, 0x49, 0x18, 0x96, 0x12, 0x96, 0xfb, 0x4a, 0x50, 0x20, 0x83,
	0x68, 0x58, 0x84, 0x99, 0x8e, 0x84, 0xa0, 0x6e, 0x7b, 0x61, 0xd8, 0xb1, 0x64, 0xbd, 0x46, 0x8d,
	0x61, 0xc7, 0xa2, 0xb7, 0xa2, 0xd5, 0x0d, 0x65, 0x5e, 0x82, 0x5d, 0x12, 0x12, 0x0b, 0x9b, 0xaa,
	0x72, 0x0e, 0x55, 0x4e, 0x45, 0x54, 0x52, 0x43, 0xf9, 0xd3, 0xdf, 0x35, 0x18, 0xf7, 0x17, 0xb4,
	0xe2, 0xae, 0xb1, 0xde, 0xdc, 0xa4, 0x04, 0xe3, 0xd2, 0xaa, 0xea, 0x28, 0xf9, 0xa3, 0xe5, 0xd9,
	0x9d, 0x76, 0x7e, 0x5f, 0x24, 0x4e, 0xd5, 0x71, 0xa9, 0xb1, 0x5b, 0x3e, 0x56, 0x5c, 0x72, 0x0c,
	0xc6, 0x2d, 0xdb, 0x65, 0x0d, 0xdf, 0x7e, 0xa4, 0xa0, 0x15, 0x27, 0xca, 0xd3, 0x9d, 0xbc, 0xf2,
	0x0b, 0x35, 0x76, 0xcb, 0x9f, 0x15, 0x97, 0x9c, 0x84, 0x09, 0x15, 0x82, 0xb5, 0xbc, 0xf9, 0x51,
	0x19, 0x7d, 0x6e, 0xa7, 0x9d, 0x9f, 0x8e, 0x46, 0x67, 0x2d, 0x8f, 0x1a, 0x8a, 0xe1, 0x4a, 0xcb,
	0x23, 0x27, 0x60, 0x42, 0xc5, 0xf7, 0x5d, 0x76, 0x25, 0x24, 0x50, 0x08, 0x57, 0x5a, 0x1e, 0x6d,
	0x62, 0x7d, 0x7d, 0x7d, 0x2f, 0x6b, 0x5f, 0x6e, 0x69, 0xb8, 0x5e, 0x98, 0x14, 0xd7, 0xcb, 0x80,
	0x09, 0xff, 0xa4, 0x0a, 0xbf, 0xcc, 0xb8, 0x33, 0x73, 0xf1, 0x6b, 0x16, 0x2c, 0x46, 0xef, 0xb2,
	0x49, 0x77, 0x6a, 0x74, 0xc2, 0xfc, 0xe7, 0xdb, 0x93, 0xc2, 0x74, 0xa8, 0x24, 0x69, 0x77, 0x5a,
	0x91, 0x12, 0x87, 0x62, 0xaf, 0xc0, 0x38, 0x47, 0x15, 0x58, 0xe0, 0x7e, 0x5a, 0x67, 0x51, 0xeb,
	0x64, 0x47, 0x2b, 0x35, 0xc2, 0x20, 0x74, 0x2e, 0xac, 0xa9, 0x7f, 0x97, 0x21, 0x0b, 0x5d, 0xc5,
	0x1b, 0x20, 0x78, 0x8b, 0xd9, 0xdf, 0x83, 0x31, 0x75, 0xe7, 0x61, 0xee, 0x6c, 0x52, 0x6e, 0xdf,
	0xa6, 0xf7, 0x0a, 0x50, 0x9e, 0xd4, 0xc0, 0x10, 0x74, 0x01, 0xf6, 0xa9, 0xd3, 0xc7, 0x79, 0x52,
	0x09, 0x6e, 0x62, 0x99, 0xa4, 0x09, 0x32, 0x5c, 0x84, 0x11, 0x93, 0x73, 0x04, 0x28, 0x24, 0x1c,
	0xce, 0xf0, 0xd6, 0x2d, 0x13, 0x84, 0x00, 0xdc, 0xfb, 0x9c, 0x53, 0xc3, 0x0f, 0x40, 0x2f, 0xc0,
	0x9c, 0x8c, 0x7d, 0x83, 0xdd, 0xb5, 0xdd, 0x4b, 0x6c, 0x23, 0x60, 0x28, 0xc2, 0x98, 0xc9, 0x79,
	0x35, 0xe0, 0x28, 0xcf, 0x44, 0x2e, 0x31, 0xf9, 0xde, 0x3f, 0xdf, 0x9c, 0x57, 0x2c, 0x6a, 0xc0,
	0xfe, 0x9e, 0x08, 0x88, 0x78, 0x06, 0xa6, 0xea, 0x6c, 0xa3, 0x8a, 0xa7, 0x38, 0x08, 0x74, 0x60,
	0xa7, 0x9d, 0x9f, 0x55, 0x81, 0xa2, 0x5f, 0xa9, 0x01, 0x75, 0xb6, 0x21, 0xaf, 0x93, 0x8a, 0x45,
	0x49, 0x47, 0x71, 0xb8, 0x18, 0xb7, 0x83, 0xbb, 0x4c, 0xbe, 0xc3, 0x1c, 0x15, 0x18, 0x35, 0x39,
	0x0f, 0xae, 0xe2, 0xfe, 0x75, 0xe8, 0xd9, 0x06, 0xbe, 0x2f, 0x35, 0x64, 0x08, 0xba, 0x8c, 0x3a,
	0xc2, 0xe6, 0x93, 0xb4, 0x1c, 0x9b, 0xf0, 0xbf, 0x5e, 0x43, 0xa4, 0xa9, 0xaa, 0x33, 0x28, 0x5f,
	0xe2, 0xd2, 0x2c, 0xc7, 0x23, 0xbd, 0xdd, 0xdb, 0xe9, 0xca, 0xf3, 0x48, 0x36, 0xdd, 0xd9, 0xa0,
	0xf2, 0x03, 0x1e, 0x48, 0xf5, 0x3c, 0xdf, 0x9b, 0x3a, 0xac, 0xce, 0xa7, 0x70, 0xe0, 0x99, 0x2f,
	0xf1, 0x54, 0x23, 0xff, 0x3a, 0xd5, 0x87, 0xb0, 0xa0, 0x72, 0x37, 0x99, 0xd5, 0xaa, 0x79, 0x37,
	0x58, 0x34, 0x4e, 0x50, 0xc5, 0x53, 0x00, 0x5c, 0x7d, 0xef, 0xec, 0x85, 0xe8, 0x15, 0x11, 0x7e,
	0xf3, 0x43, 0xab, 0x5f, 0x2a, 0x16, 0x7d, 0xa4, 0x01, 0x4d, 0x8b, 0x8d, 0x12, 0x3f, 0x86, 0x3d,
	0xc1, 0xec, 0x50, 0xf5, 0xb9, 0x9e, 0x57, 0x66, 0x16, 0x65, 0xce, 0x29, 0x98, 0xae, 0x58, 0xd4,
	0x98, 0x8a, 0xce, 0x25, 0xf4, 0x23, 0x58, 0x94, 0x44, 0xd1, 0x28, 0x57, 0x45, 0xc3, 0xff, 0xf1,
	0x81, 0x23, 0xec, 0x7f, 0xa6, 0x97, 0xc3, 0xa1, 0xf4, 0xe0, 0x28, 0xf8, 0x1d, 0x98, 0xe9, 0x82,
	0x14, 0x2a, 0xc9, 0x48, 0x71, 0xb4, 0x9c, 0xdd, 0x69, 0xe7, 0xe7, 0x63, 0x74, 0x08, 0x99, 0x6b,
	0x5f, 0x54, 0x8b, 0xa8, 0x58, 0xf4, 0x3a, 0x2c, 0x3f, 0x93, 0xf1, 0x2d, 0xd3, 0x33, 0x63, 0x24,
	0x0d, 0x7e, 0x27, 0x7c, 0xab, 0x41, 0xb1, 0x7f, 0xd4, 0x97, 0xbf, 0x78, 0x2b, 0x3f, 0x4f, 0xc3,
	0x94, 0x04, 0xbb, 0x6e, 0x37, 0x37, 0x9c, 0x9a, 0x4d, 0xbe, 0xd2, 0x60, 0x32, 0x32, 0xe5, 0x91,
	0x62, 0x7c, 0xd6, 0x67, 0xc7, 0xcf, 0xcc, 0x91, 0x01, 0x2c, 0x95, 0x42, 0x7a, 0xe8, 0xb3, 0x5f,
	0xfe, 0xfa, 0x66, 0x38, 0x47, 0xb2, 0x7a, 0xf2, 0x0c, 0x2e, 0xc8, 0xd7, 0x1a, 0x40, 0xc7, 0x9b,
	0x2c, 0xf7, 0x8b, 0x1f, 0x80, 0x14, 0xfb, 0x1b, 0x22, 0xc7, 0x11, 0xc9, 0xb1, 0x48, 0x16, 0xd2,
	0x38, 0xf4, 0x07, 0x8e, 0xf5, 0x90, 0x7c, 0x1e, 0xc0, 0xc8, 0x7d, 0x92, 0x0a, 0x13, 0x1d, 0x7e,
	0x52, 0x61, 0xba, 0x06, 0x16, 0xba, 0x28, 0x61, 0xfe, 0x4f, 0x0e, 0xea, 0x89, 0x7f, 0x76, 0x08,
	0xf2, 0x85, 0x06, 0x13, 0xa1, 0x2f, 0x59, 0xea, 0x13, 0x3c, 0x80, 0x58, 0xee, 0x6b, 0x87, 0x0c,
	0x45, 0xc9, 0x40, 0x49, 0x21, 0x85, 0x41, 0xd5, 0x23, 0xdc, 0x27, 0xaa, 0xab, 0x93, 0x74, 0x9d,
	0x91, 0x21, 0x22, 0x75, 0x9f, 0x74, 0x0f, 0x16, 0xfd, 0xf6, 0x89, 0x9a, 0x18, 0xc8, 0x97, 0x5a,
	0xa4, 0x3b, 0x5e, 0x36, 0xfd, 0xbe, 0x26, 0x52, 0x4b, 0x13, 0xe9, 0xa2, 0xa9, 0xa5, 0x89, 0x76,
	0x56, 0x4a, 0x25, 0x4b, 0x96, 0x64, 0xf4, 0xa4, 0xbf, 0xe8, 0x84, 0x5f, 0x94, 0x70, 0x78, 0x09,
	0x40, 0x0e, 0xa7, 0x27, 0x08, 0x38, 0x96, 0xfa, 0x99, 0x21, 0xc6, 0x92, 0xc4, 0x28, 0x90, 0x5c,
	0x22, 0x86, 0x5a, 0x9f, 0xef, 0x35, 0xd8, 0xdb, 0xdd, 0x00, 0xc9, 0xb1, 0x3e, 0xbb, 0x20, 0xda,
	0xe4, 0x33, 0xc7, 0x07, 0x33, 0x46, 0xaa, 0xe3, 0x92, 0x6a, 0x89, 0x1c, 0x4a, 0xde, 0x37, 0xd2,
	0x41, 0xb1, 0x7d, 0x17, 0x94, 0xa9, 0xd3, 0x9c, 0xc9, 0x40, 0xf9, 0xc2, 0x55, 0x3b, 0x31, 0xa0,
	0xf5, 0xe0, 0xdb, 0x1a, 0x31, 0x7e, 0xd5, 0x20, 0x93, 0xdc, 0x5f, 0xc9, 0xe9, 0xb4, 0xbc, 0x29,
	0xdd, 0x3e, 0xf3, 0xda, 0xf3, 0x3b, 0x22, 0xfb, 0x9b, 0x92, 0xfd, 0x1c, 0x79, 0x3d, 0x81, 0x1d,
	0xfb, 0xa6, 0xc7, 0xaa, 0x5d, 0x17, 0xbd, 0xfe, 0xa0, 0xd3, 0x51, 0x1f, 0x92, 0x3f, 0x34, 0xc8,
	0xa6, 0xf5, 0x51, 0x72, 0x26, 0x85, 0x2f, 0xbd, 0xb1, 0x67, 0xce, 0xbe, 0x88, 0x2b, 0x8a, 0xbb,
	0x28, 0xc5, 0x5d, 0x20, 0xe7, 0xf5, 0xd4, 0xff, 0x7f, 0x48, 0x45, 0x55, 0x2e, 0x1a, 0xea, 0xe1,
	0x13, 0x47, 0xd8, 0xdd, 0xfa, 0x7e, 0xd0, 0x60, 0x4f, 0xd7, 0xd0, 0x4d, 0x8e, 0xa6, 0x50, 0xf5,
	0xcc, 0xf6, 0x99, 0x63, 0x03, 0xd9, 0x22, 0xf2, 0x59, 0x89, 0x7c, 0x8a, 0xac, 0xc4, 0x23, 0xd7,
	0xee, 0xd8, 0xb5, 0xbb, 0xd5, 0x35, 0xd6, 0xac, 0x7a, 0xbe, 0x67, 0xb5, 0xce, 0x36, 0xf4, 0x07,
	0x6a, 0x1a, 0x78, 0x48, 0x9e, 0x68, 0x50, 0xe8, 0x37, 0x06, 0x90, 0x73, 0x03, 0xd6, 0x33, 0x7e,
	0x28, 0xc9, 0x9c, 0x7f, 0x51, 0x77, 0xd4, 0x77, 0x4e, 0xea, 0x3b, 0x4d, 0x5e, 0x1d, 0x74, 0x49,
	0xd4, 0x6a, 0xa0, 0xc4, 0xf2, 0xb5, 0xad, 0x3f, 0x73, 0x43, 0x3f, 0x6e, 0xe7, 0x86, 0xb6, 0xb6,
	0x73, 0xda, 0xe3, 0xed, 0x9c, 0xf6, 0x64, 0x3b, 0xa7, 0x3d, 0x7a, 0x9a, 0x1b, 0x7a, 0xfc, 0x34,
	0x37, 0xf4, 0xdb, 0xd3, 0xdc, 0xd0, 0x4d, 0xbd, 0xee, 0x78, 0x77, 0x5a, 0xab, 0x3e, 0x26, 0xa6,
	0x38, 0xc1, 0xd6, 0xd6, 0x9c, 0x9a, 0x63, 0xae, 0x07, 0x29, 0x83, 0xa4, 0xde, 0x26, 0xb7, 0xc5,
	0xea, 0x98, 0xfc, 0xa7, 0xd7, 0x2b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x7a, 0xca, 0xda,
	0x4b, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryAssets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (*QueryAssetsResponse, error)
	QueryAsset(ctx context.Context, in *QueryAssetRequest, opts ...grpc.CallOption) (*QueryAssetResponse, error)
	QueryPairs(ctx context.Context, in *QueryPairsRequest, opts ...grpc.CallOption) (*QueryPairsResponse, error)
	QueryPair(ctx context.Context, in *QueryPairRequest, opts ...grpc.CallOption) (*QueryPairResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryAppsMapings(ctx context.Context, in *QueryAppsRequest, opts ...grpc.CallOption) (*QueryAppsResponse, error)
	QueryAppMapings(ctx context.Context, in *QueryAppRequest, opts ...grpc.CallOption) (*QueryAppResponse, error)
	QueryPairVault(ctx context.Context, in *QueryPairVaultRequest, opts ...grpc.CallOption) (*QueryPairVaultResponse, error)
	QueryPairVaults(ctx context.Context, in *QueryPairVaultsRequest, opts ...grpc.CallOption) (*QueryPairVaultsResponse, error)
	QueryProductToExtendedPair(ctx context.Context, in *QueryProductToExtendedPairRequest, opts ...grpc.CallOption) (*QueryProductToExtendedPairResponse, error)
	QueryExtendedPairPsmPairWise(ctx context.Context, in *QueryExtendedPairPsmPairWiseRequest, opts ...grpc.CallOption) (*QueryExtendedPairPsmPairWiseResponse, error)
	QueryTokenGov(ctx context.Context, in *QueryTokenGovRequest, opts ...grpc.CallOption) (*QueryTokenGovResponse, error)
	QueryExtendedPairDataPsmPairWise(ctx context.Context, in *QueryExtendedPairDataPsmPairWiseRequest, opts ...grpc.CallOption) (*QueryExtendedPairDataPsmPairWiseResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryAssets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (*QueryAssetsResponse, error) {
	out := new(QueryAssetsResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAsset(ctx context.Context, in *QueryAssetRequest, opts ...grpc.CallOption) (*QueryAssetResponse, error) {
	out := new(QueryAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryPairs(ctx context.Context, in *QueryPairsRequest, opts ...grpc.CallOption) (*QueryPairsResponse, error) {
	out := new(QueryPairsResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryPair(ctx context.Context, in *QueryPairRequest, opts ...grpc.CallOption) (*QueryPairResponse, error) {
	out := new(QueryPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAppsMapings(ctx context.Context, in *QueryAppsRequest, opts ...grpc.CallOption) (*QueryAppsResponse, error) {
	out := new(QueryAppsResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryAppsMapings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAppMapings(ctx context.Context, in *QueryAppRequest, opts ...grpc.CallOption) (*QueryAppResponse, error) {
	out := new(QueryAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryAppMapings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryPairVault(ctx context.Context, in *QueryPairVaultRequest, opts ...grpc.CallOption) (*QueryPairVaultResponse, error) {
	out := new(QueryPairVaultResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryPairVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryPairVaults(ctx context.Context, in *QueryPairVaultsRequest, opts ...grpc.CallOption) (*QueryPairVaultsResponse, error) {
	out := new(QueryPairVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryPairVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryProductToExtendedPair(ctx context.Context, in *QueryProductToExtendedPairRequest, opts ...grpc.CallOption) (*QueryProductToExtendedPairResponse, error) {
	out := new(QueryProductToExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryProductToExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryExtendedPairPsmPairWise(ctx context.Context, in *QueryExtendedPairPsmPairWiseRequest, opts ...grpc.CallOption) (*QueryExtendedPairPsmPairWiseResponse, error) {
	out := new(QueryExtendedPairPsmPairWiseResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryExtendedPairPsmPairWise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTokenGov(ctx context.Context, in *QueryTokenGovRequest, opts ...grpc.CallOption) (*QueryTokenGovResponse, error) {
	out := new(QueryTokenGovResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryTokenGov", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryExtendedPairDataPsmPairWise(ctx context.Context, in *QueryExtendedPairDataPsmPairWiseRequest, opts ...grpc.CallOption) (*QueryExtendedPairDataPsmPairWiseResponse, error) {
	out := new(QueryExtendedPairDataPsmPairWiseResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.QueryService/QueryExtendedPairDataPsmPairWise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryAssets(context.Context, *QueryAssetsRequest) (*QueryAssetsResponse, error)
	QueryAsset(context.Context, *QueryAssetRequest) (*QueryAssetResponse, error)
	QueryPairs(context.Context, *QueryPairsRequest) (*QueryPairsResponse, error)
	QueryPair(context.Context, *QueryPairRequest) (*QueryPairResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryAppsMapings(context.Context, *QueryAppsRequest) (*QueryAppsResponse, error)
	QueryAppMapings(context.Context, *QueryAppRequest) (*QueryAppResponse, error)
	QueryPairVault(context.Context, *QueryPairVaultRequest) (*QueryPairVaultResponse, error)
	QueryPairVaults(context.Context, *QueryPairVaultsRequest) (*QueryPairVaultsResponse, error)
	QueryProductToExtendedPair(context.Context, *QueryProductToExtendedPairRequest) (*QueryProductToExtendedPairResponse, error)
	QueryExtendedPairPsmPairWise(context.Context, *QueryExtendedPairPsmPairWiseRequest) (*QueryExtendedPairPsmPairWiseResponse, error)
	QueryTokenGov(context.Context, *QueryTokenGovRequest) (*QueryTokenGovResponse, error)
	QueryExtendedPairDataPsmPairWise(context.Context, *QueryExtendedPairDataPsmPairWiseRequest) (*QueryExtendedPairDataPsmPairWiseResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryAssets(ctx context.Context, req *QueryAssetsRequest) (*QueryAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssets not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAsset(ctx context.Context, req *QueryAssetRequest) (*QueryAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAsset not implemented")
}
func (*UnimplementedQueryServiceServer) QueryPairs(ctx context.Context, req *QueryPairsRequest) (*QueryPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPairs not implemented")
}
func (*UnimplementedQueryServiceServer) QueryPair(ctx context.Context, req *QueryPairRequest) (*QueryPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAppsMapings(ctx context.Context, req *QueryAppsRequest) (*QueryAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppsMapings not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAppMapings(ctx context.Context, req *QueryAppRequest) (*QueryAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppMapings not implemented")
}
func (*UnimplementedQueryServiceServer) QueryPairVault(ctx context.Context, req *QueryPairVaultRequest) (*QueryPairVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPairVault not implemented")
}
func (*UnimplementedQueryServiceServer) QueryPairVaults(ctx context.Context, req *QueryPairVaultsRequest) (*QueryPairVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPairVaults not implemented")
}
func (*UnimplementedQueryServiceServer) QueryProductToExtendedPair(ctx context.Context, req *QueryProductToExtendedPairRequest) (*QueryProductToExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductToExtendedPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryExtendedPairPsmPairWise(ctx context.Context, req *QueryExtendedPairPsmPairWiseRequest) (*QueryExtendedPairPsmPairWiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairPsmPairWise not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTokenGov(ctx context.Context, req *QueryTokenGovRequest) (*QueryTokenGovResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenGov not implemented")
}
func (*UnimplementedQueryServiceServer) QueryExtendedPairDataPsmPairWise(ctx context.Context, req *QueryExtendedPairDataPsmPairWiseRequest) (*QueryExtendedPairDataPsmPairWiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairDataPsmPairWise not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAssets(ctx, req.(*QueryAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAsset(ctx, req.(*QueryAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryPairs(ctx, req.(*QueryPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryPair(ctx, req.(*QueryPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAppsMapings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAppsMapings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryAppsMapings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAppsMapings(ctx, req.(*QueryAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAppMapings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAppMapings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryAppMapings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAppMapings(ctx, req.(*QueryAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryPairVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryPairVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryPairVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryPairVault(ctx, req.(*QueryPairVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryPairVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryPairVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryPairVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryPairVaults(ctx, req.(*QueryPairVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryProductToExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductToExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryProductToExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryProductToExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryProductToExtendedPair(ctx, req.(*QueryProductToExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryExtendedPairPsmPairWise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairPsmPairWiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryExtendedPairPsmPairWise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryExtendedPairPsmPairWise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryExtendedPairPsmPairWise(ctx, req.(*QueryExtendedPairPsmPairWiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTokenGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTokenGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryTokenGov",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTokenGov(ctx, req.(*QueryTokenGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryExtendedPairDataPsmPairWise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairDataPsmPairWiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryExtendedPairDataPsmPairWise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.QueryService/QueryExtendedPairDataPsmPairWise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryExtendedPairDataPsmPairWise(ctx, req.(*QueryExtendedPairDataPsmPairWiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.asset.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAssets",
			Handler:    _QueryService_QueryAssets_Handler,
		},
		{
			MethodName: "QueryAsset",
			Handler:    _QueryService_QueryAsset_Handler,
		},
		{
			MethodName: "QueryPairs",
			Handler:    _QueryService_QueryPairs_Handler,
		},
		{
			MethodName: "QueryPair",
			Handler:    _QueryService_QueryPair_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _QueryService_QueryParams_Handler,
		},
		{
			MethodName: "QueryAppsMapings",
			Handler:    _QueryService_QueryAppsMapings_Handler,
		},
		{
			MethodName: "QueryAppMapings",
			Handler:    _QueryService_QueryAppMapings_Handler,
		},
		{
			MethodName: "QueryPairVault",
			Handler:    _QueryService_QueryPairVault_Handler,
		},
		{
			MethodName: "QueryPairVaults",
			Handler:    _QueryService_QueryPairVaults_Handler,
		},
		{
			MethodName: "QueryProductToExtendedPair",
			Handler:    _QueryService_QueryProductToExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairPsmPairWise",
			Handler:    _QueryService_QueryExtendedPairPsmPairWise_Handler,
		},
		{
			MethodName: "QueryTokenGov",
			Handler:    _QueryService_QueryTokenGov_Handler,
		},
		{
			MethodName: "QueryExtendedPairDataPsmPairWise",
			Handler:    _QueryService_QueryExtendedPairDataPsmPairWise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/asset/v1beta1/querier.proto",
}

func (m *QueryAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PairInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AssetOut != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AssetOut))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetIn != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AssetIn))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairsInfo) > 0 {
		for iNdEx := len(m.PairsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PairInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.App.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenGovRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenGovRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenGovRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenGovResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenGovResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenGovResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GovAssetId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.GovAssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAppsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAppsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for iNdEx := len(m.Apps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PairVault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPairVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPairVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairVault) > 0 {
		for iNdEx := len(m.PairVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProductToExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProductToExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProductToExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProductToExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProductToExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProductToExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPair) > 0 {
		for iNdEx := len(m.ExtendedPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairPsmPairWiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairPsmPairWiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairPsmPairWiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairPsmPairWiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairPsmPairWiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairPsmPairWiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairsId) > 0 {
		dAtA11 := make([]byte, len(m.ExtendedPairsId)*10)
		var j10 int
		for _, num := range m.ExtendedPairsId {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintQuerier(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairDataPsmPairWiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairDataPsmPairWiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairDataPsmPairWiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairDataPsmPairWiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairDataPsmPairWiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairDataPsmPairWiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPair) > 0 {
		for iNdEx := len(m.ExtendedPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *PairInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	if m.AssetIn != 0 {
		n += 1 + sovQuerier(uint64(m.AssetIn))
	}
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.AssetOut != 0 {
		n += 1 + sovQuerier(uint64(m.AssetOut))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PairsInfo) > 0 {
		for _, e := range m.PairsInfo {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PairInfo.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.App.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryTokenGovRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuerier(uint64(m.AppId))
	}
	return n
}

func (m *QueryTokenGovResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovAssetId != 0 {
		n += 1 + sovQuerier(uint64(m.GovAssetId))
	}
	return n
}

func (m *QueryAppsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAppsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryPairVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryPairVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PairVault.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryPairVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPairVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PairVault) > 0 {
		for _, e := range m.PairVault {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryProductToExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	return n
}

func (m *QueryProductToExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPair) > 0 {
		for _, e := range m.ExtendedPair {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryExtendedPairPsmPairWiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	return n
}

func (m *QueryExtendedPairPsmPairWiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairsId) > 0 {
		l = 0
		for _, e := range m.ExtendedPairsId {
			l += sovQuerier(uint64(e))
		}
		n += 1 + sovQuerier(uint64(l)) + l
	}
	return n
}

func (m *QueryExtendedPairDataPsmPairWiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuerier(uint64(m.AppId))
	}
	return n
}

func (m *QueryExtendedPairDataPsmPairWiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPair) > 0 {
		for _, e := range m.ExtendedPair {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIn", wireType)
			}
			m.AssetIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			m.AssetOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairsInfo = append(m.PairsInfo, PairInfo{})
			if err := m.PairsInfo[len(m.PairsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PairInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenGovRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenGovRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenGovRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenGovResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenGovResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenGovResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovAssetId", wireType)
			}
			m.GovAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GovAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, AppMapping{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PairVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairVault = append(m.PairVault, ExtendedPairVault{})
			if err := m.PairVault[len(m.PairVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProductToExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProductToExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProductToExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProductToExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProductToExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProductToExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPair = append(m.ExtendedPair, ExtendedPairVault{})
			if err := m.ExtendedPair[len(m.ExtendedPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairPsmPairWiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairPsmPairWiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairPsmPairWiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairPsmPairWiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairPsmPairWiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairPsmPairWiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedPairsId = append(m.ExtendedPairsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuerier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuerier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtendedPairsId) == 0 {
					m.ExtendedPairsId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuerier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedPairsId = append(m.ExtendedPairsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairsId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairDataPsmPairWiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairDataPsmPairWiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairDataPsmPairWiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairDataPsmPairWiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairDataPsmPairWiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairDataPsmPairWiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPair = append(m.ExtendedPair, ExtendedPairVault{})
			if err := m.ExtendedPair[len(m.ExtendedPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
