// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/esm/v1beta1/esm.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EsmActive struct {
	AppId       uint64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	VaultStop   bool   `protobuf:"varint,2,opt,name=vaultStop,proto3" json:"vaultStop,omitempty" yaml:"vaultStop"`
	LockerStop  bool   `protobuf:"varint,3,opt,name=lockerStop,proto3" json:"lockerStop,omitempty" yaml:"lockerStop"`
	MintingStop bool   `protobuf:"varint,4,opt,name=mintingStop,proto3" json:"mintingStop,omitempty" yaml:"mintingStop"`
}

func (m *EsmActive) Reset()         { *m = EsmActive{} }
func (m *EsmActive) String() string { return proto.CompactTextString(m) }
func (*EsmActive) ProtoMessage()    {}
func (*EsmActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{0}
}
func (m *EsmActive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EsmActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EsmActive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EsmActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsmActive.Merge(m, src)
}
func (m *EsmActive) XXX_Size() int {
	return m.Size()
}
func (m *EsmActive) XXX_DiscardUnknown() {
	xxx_messageInfo_EsmActive.DiscardUnknown(m)
}

var xxx_messageInfo_EsmActive proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EsmActive)(nil), "comdex.esm.v1beta1.EsmActive")
}

func init() { proto.RegisterFile("comdex/esm/v1beta1/esm.proto", fileDescriptor_e7f9b0ecd3a9e62a) }

var fileDescriptor_e7f9b0ecd3a9e62a = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xce, 0xcf, 0x4d,
	0x49, 0xad, 0xd0, 0x4f, 0x2d, 0xce, 0xd5, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0x04, 0xb1,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x20, 0xb2, 0x7a, 0x20, 0x11, 0xa8, 0xac, 0x94,
	0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x58, 0x5a, 0x1f, 0xc4, 0x82, 0xa8, 0x54, 0xba, 0xc1, 0xc8, 0xc5,
	0xe9, 0x5a, 0x9c, 0xeb, 0x98, 0x5c, 0x92, 0x59, 0x96, 0x2a, 0xa4, 0xc6, 0xc5, 0x9a, 0x58, 0x50,
	0xe0, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe2, 0x24, 0xf0, 0xe9, 0x9e, 0x3c, 0x4f, 0x65,
	0x62, 0x6e, 0x8e, 0x95, 0x12, 0x58, 0x58, 0x29, 0x08, 0x22, 0x2d, 0x64, 0xc4, 0xc5, 0x59, 0x96,
	0x58, 0x9a, 0x53, 0x12, 0x5c, 0x92, 0x5f, 0x20, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0xe1, 0x24, 0xf2,
	0xe9, 0x9e, 0xbc, 0x00, 0x44, 0x2d, 0x5c, 0x4a, 0x29, 0x08, 0xa1, 0x4c, 0xc8, 0x94, 0x8b, 0x2b,
	0x27, 0x3f, 0x39, 0x3b, 0xb5, 0x08, 0xac, 0x89, 0x19, 0xac, 0x49, 0xf4, 0xd3, 0x3d, 0x79, 0x41,
	0x88, 0x26, 0x84, 0x9c, 0x52, 0x10, 0x92, 0x42, 0x21, 0x0b, 0x2e, 0xee, 0xdc, 0xcc, 0xbc, 0x92,
	0xcc, 0xbc, 0x74, 0xb0, 0x3e, 0x16, 0xb0, 0x3e, 0xb1, 0x4f, 0xf7, 0xe4, 0x85, 0x20, 0xfa, 0x90,
	0x24, 0x95, 0x82, 0x90, 0x95, 0x3a, 0xf9, 0x9f, 0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xc3,
	0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c,
	0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94,
	0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0x42, 0x4c, 0x37, 0x3f, 0x2d, 0x2d, 0x33, 0x39, 0x33,
	0x31, 0x07, 0xca, 0xd7, 0x87, 0x84, 0x70, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0xc8,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x83, 0x0a, 0x82, 0x7c, 0x01, 0x00, 0x00,
}

func (m *EsmActive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EsmActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EsmActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintingStop {
		i--
		if m.MintingStop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LockerStop {
		i--
		if m.LockerStop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VaultStop {
		i--
		if m.VaultStop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovEsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EsmActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	if m.VaultStop {
		n += 2
	}
	if m.LockerStop {
		n += 2
	}
	if m.MintingStop {
		n += 2
	}
	return n
}

func sovEsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEsm(x uint64) (n int) {
	return sovEsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EsmActive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EsmActive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EsmActive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultStop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VaultStop = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerStop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockerStop = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingStop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintingStop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEsm = fmt.Errorf("proto: unexpected end of group")
)
