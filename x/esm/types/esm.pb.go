// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/esm/v1beta1/esm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ESMTriggerParams struct {
	AppId         uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	TargetValue   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=target_value,json=targetValue,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"target_value" yaml:"target_value"`
	CoolOffPeriod uint64                                  `protobuf:"varint,3,opt,name=cool_off_period,json=coolOffPeriod,proto3" json:"cool_off_period,omitempty" yaml:"cool_off_period"`
}

func (m *ESMTriggerParams) Reset()         { *m = ESMTriggerParams{} }
func (m *ESMTriggerParams) String() string { return proto.CompactTextString(m) }
func (*ESMTriggerParams) ProtoMessage()    {}
func (*ESMTriggerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{0}
}
func (m *ESMTriggerParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESMTriggerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESMTriggerParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESMTriggerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESMTriggerParams.Merge(m, src)
}
func (m *ESMTriggerParams) XXX_Size() int {
	return m.Size()
}
func (m *ESMTriggerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ESMTriggerParams.DiscardUnknown(m)
}

var xxx_messageInfo_ESMTriggerParams proto.InternalMessageInfo

func (m *ESMTriggerParams) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ESMTriggerParams) GetTargetValue() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TargetValue
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *ESMTriggerParams) GetCoolOffPeriod() uint64 {
	if m != nil {
		return m.CoolOffPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*ESMTriggerParams)(nil), "comdex.esm.v1beta1.ESMTriggerParams")
}

func init() { proto.RegisterFile("comdex/esm/v1beta1/esm.proto", fileDescriptor_e7f9b0ecd3a9e62a) }

var fileDescriptor_e7f9b0ecd3a9e62a = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xcd, 0x4a, 0xeb, 0x40,
	0x14, 0x4e, 0x7a, 0x6f, 0x0b, 0x37, 0xbd, 0xe5, 0x5e, 0xa2, 0x94, 0x5a, 0x24, 0x29, 0xd9, 0x58,
	0x90, 0x24, 0x54, 0x77, 0xee, 0x6c, 0x51, 0x71, 0x21, 0x96, 0x56, 0x5c, 0xb8, 0x09, 0x93, 0x64,
	0x12, 0x07, 0x93, 0x9e, 0x21, 0x93, 0x16, 0xbb, 0xf7, 0x01, 0x7c, 0x01, 0xdf, 0xa7, 0xcb, 0x2e,
	0x5d, 0x0d, 0x92, 0xbe, 0x41, 0x97, 0xae, 0x64, 0x32, 0x55, 0xaa, 0xab, 0x39, 0x73, 0xbe, 0xf3,
	0xfd, 0x70, 0x8e, 0xb6, 0x1f, 0x40, 0x1a, 0xe2, 0x47, 0x17, 0xb3, 0xd4, 0x9d, 0xf5, 0x7c, 0x9c,
	0xa3, 0x9e, 0xa8, 0x1d, 0x9a, 0x41, 0x0e, 0xba, 0x2e, 0x51, 0x47, 0x74, 0x36, 0x68, 0x7b, 0x37,
	0x86, 0x18, 0x4a, 0xd8, 0x15, 0x95, 0x9c, 0x6c, 0x1b, 0x01, 0xb0, 0x14, 0x98, 0xeb, 0x23, 0x86,
	0xbf, 0x84, 0x02, 0x20, 0x13, 0x89, 0x5b, 0x2f, 0x15, 0xed, 0xff, 0xd9, 0xf8, 0xea, 0x26, 0x23,
	0x71, 0x8c, 0xb3, 0x21, 0xca, 0x50, 0xca, 0x74, 0x5b, 0xab, 0x21, 0x4a, 0x3d, 0x12, 0xb6, 0xd4,
	0x8e, 0xda, 0xfd, 0xdd, 0x6f, 0x16, 0xdc, 0xac, 0x9e, 0x52, 0x7a, 0x19, 0xae, 0xb9, 0xf9, 0x67,
	0x8e, 0xd2, 0xe4, 0xc4, 0x22, 0xa1, 0x35, 0xaa, 0x22, 0xd1, 0xd3, 0x9f, 0x54, 0xed, 0x6f, 0x8e,
	0xb2, 0x18, 0xe7, 0xde, 0x0c, 0x25, 0x53, 0xdc, 0xaa, 0x74, 0xd4, 0x6e, 0xfd, 0x68, 0xcf, 0x91,
	0xde, 0x8e, 0xf0, 0xfe, 0x8c, 0xe9, 0x0c, 0x80, 0x4c, 0xfa, 0xe7, 0x0b, 0x6e, 0x2a, 0x6b, 0x6e,
	0xee, 0x48, 0xad, 0x6d, 0xb2, 0xf5, 0xce, 0xcd, 0x83, 0x98, 0xe4, 0xf7, 0x53, 0xdf, 0x09, 0x20,
	0x75, 0x37, 0xf9, 0xe5, 0x63, 0xb3, 0xf0, 0xc1, 0xcd, 0xe7, 0x14, 0xb3, 0x52, 0x67, 0x54, 0x97,
	0xcc, 0x5b, 0x41, 0xd4, 0xc7, 0xda, 0xbf, 0x00, 0x20, 0xf1, 0x20, 0x8a, 0x3c, 0x8a, 0x33, 0x02,
	0x61, 0xeb, 0x57, 0x19, 0xff, 0xb0, 0xe0, 0x66, 0x63, 0x00, 0x90, 0x5c, 0x47, 0xd1, 0xb0, 0x04,
	0xd6, 0xdc, 0x6c, 0x4a, 0xeb, 0x1f, 0x0c, 0x6b, 0xd4, 0x08, 0xb6, 0x07, 0xfb, 0x17, 0x8b, 0xc2,
	0x50, 0x97, 0x85, 0xa1, 0xbe, 0x15, 0x86, 0xfa, 0xbc, 0x32, 0x94, 0xe5, 0xca, 0x50, 0x5e, 0x57,
	0x86, 0x72, 0x67, 0x7f, 0x0b, 0x29, 0xce, 0x61, 0x43, 0x14, 0x91, 0x80, 0xa0, 0x64, 0xf3, 0x77,
	0xe5, 0xf9, 0xca, 0xbc, 0x7e, 0xad, 0xdc, 0xf7, 0xf1, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f,
	0x70, 0x3c, 0x3a, 0xd9, 0x01, 0x00, 0x00,
}

func (m *ESMTriggerParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESMTriggerParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESMTriggerParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoolOffPeriod != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.CoolOffPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TargetValue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovEsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ESMTriggerParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = m.TargetValue.Size()
	n += 1 + l + sovEsm(uint64(l))
	if m.CoolOffPeriod != 0 {
		n += 1 + sovEsm(uint64(m.CoolOffPeriod))
	}
	return n
}

func sovEsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEsm(x uint64) (n int) {
	return sovEsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESMTriggerParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESMTriggerParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESMTriggerParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolOffPeriod", wireType)
			}
			m.CoolOffPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoolOffPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEsm = fmt.Errorf("proto: unexpected end of group")
)
