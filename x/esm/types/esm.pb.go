// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/esm/v1beta1/esm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ESMTriggerParams struct {
	AppId         uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	TargetValue   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=target_value,json=targetValue,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"target_value" yaml:"target_value"`
	CoolOffPeriod uint64                                  `protobuf:"varint,3,opt,name=cool_off_period,json=coolOffPeriod,proto3" json:"cool_off_period,omitempty" yaml:"cool_off_period"`
	AssetsRates   []DebtAssetsRates                       `protobuf:"bytes,4,rep,name=assetsRates,proto3" json:"assetsRates" yaml:"assets_rates"`
}

func (m *ESMTriggerParams) Reset()         { *m = ESMTriggerParams{} }
func (m *ESMTriggerParams) String() string { return proto.CompactTextString(m) }
func (*ESMTriggerParams) ProtoMessage()    {}
func (*ESMTriggerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{0}
}
func (m *ESMTriggerParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESMTriggerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESMTriggerParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESMTriggerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESMTriggerParams.Merge(m, src)
}
func (m *ESMTriggerParams) XXX_Size() int {
	return m.Size()
}
func (m *ESMTriggerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ESMTriggerParams.DiscardUnknown(m)
}

var xxx_messageInfo_ESMTriggerParams proto.InternalMessageInfo

func (m *ESMTriggerParams) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ESMTriggerParams) GetTargetValue() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TargetValue
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *ESMTriggerParams) GetCoolOffPeriod() uint64 {
	if m != nil {
		return m.CoolOffPeriod
	}
	return 0
}

func (m *ESMTriggerParams) GetAssetsRates() []DebtAssetsRates {
	if m != nil {
		return m.AssetsRates
	}
	return nil
}

type CurrentDepositStats struct {
	AppId   uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	Balance github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=balance,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance" yaml:"balance"`
}

func (m *CurrentDepositStats) Reset()         { *m = CurrentDepositStats{} }
func (m *CurrentDepositStats) String() string { return proto.CompactTextString(m) }
func (*CurrentDepositStats) ProtoMessage()    {}
func (*CurrentDepositStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{1}
}
func (m *CurrentDepositStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentDepositStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentDepositStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentDepositStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentDepositStats.Merge(m, src)
}
func (m *CurrentDepositStats) XXX_Size() int {
	return m.Size()
}
func (m *CurrentDepositStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentDepositStats.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentDepositStats proto.InternalMessageInfo

func (m *CurrentDepositStats) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *CurrentDepositStats) GetBalance() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Balance
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

type ESMStatus struct {
	AppId            uint64    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	Executor         string    `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty" yaml:"executor"`
	Status           bool      `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	StartTime        time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime          time.Time `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	RedemptionStatus bool      `protobuf:"varint,6,opt,name=redemption_status,json=redemptionStatus,proto3" json:"redemption_status,omitempty" yaml:"redemption_status"`
}

func (m *ESMStatus) Reset()         { *m = ESMStatus{} }
func (m *ESMStatus) String() string { return proto.CompactTextString(m) }
func (*ESMStatus) ProtoMessage()    {}
func (*ESMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{2}
}
func (m *ESMStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESMStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESMStatus.Merge(m, src)
}
func (m *ESMStatus) XXX_Size() int {
	return m.Size()
}
func (m *ESMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ESMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ESMStatus proto.InternalMessageInfo

func (m *ESMStatus) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ESMStatus) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *ESMStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ESMStatus) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *ESMStatus) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *ESMStatus) GetRedemptionStatus() bool {
	if m != nil {
		return m.RedemptionStatus
	}
	return false
}

type KillSwitchParams struct {
	AppId         uint64 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	BreakerEnable bool   `protobuf:"varint,2,opt,name=breaker_enable,json=breakerEnable,proto3" json:"breaker_enable,omitempty" yaml:"breaker_enable"`
}

func (m *KillSwitchParams) Reset()         { *m = KillSwitchParams{} }
func (m *KillSwitchParams) String() string { return proto.CompactTextString(m) }
func (*KillSwitchParams) ProtoMessage()    {}
func (*KillSwitchParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{3}
}
func (m *KillSwitchParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KillSwitchParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KillSwitchParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KillSwitchParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillSwitchParams.Merge(m, src)
}
func (m *KillSwitchParams) XXX_Size() int {
	return m.Size()
}
func (m *KillSwitchParams) XXX_DiscardUnknown() {
	xxx_messageInfo_KillSwitchParams.DiscardUnknown(m)
}

var xxx_messageInfo_KillSwitchParams proto.InternalMessageInfo

func (m *KillSwitchParams) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *KillSwitchParams) GetBreakerEnable() bool {
	if m != nil {
		return m.BreakerEnable
	}
	return false
}

type UsersDepositMapping struct {
	AppId     uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	Depositor string                                  `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	Deposits  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=deposits,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"deposits" yaml:"deposits"`
}

func (m *UsersDepositMapping) Reset()         { *m = UsersDepositMapping{} }
func (m *UsersDepositMapping) String() string { return proto.CompactTextString(m) }
func (*UsersDepositMapping) ProtoMessage()    {}
func (*UsersDepositMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{4}
}
func (m *UsersDepositMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDepositMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDepositMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDepositMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDepositMapping.Merge(m, src)
}
func (m *UsersDepositMapping) XXX_Size() int {
	return m.Size()
}
func (m *UsersDepositMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDepositMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDepositMapping proto.InternalMessageInfo

func (m *UsersDepositMapping) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *UsersDepositMapping) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *UsersDepositMapping) GetDeposits() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Deposits
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

type ESMMarketPrice struct {
	AppId      uint64   `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	IsPriceSet bool     `protobuf:"varint,2,opt,name=isPriceSet,proto3" json:"isPriceSet,omitempty"`
	Market     []Market `protobuf:"bytes,3,rep,name=market,proto3" json:"market" yaml:"amount_in"`
}

func (m *ESMMarketPrice) Reset()         { *m = ESMMarketPrice{} }
func (m *ESMMarketPrice) String() string { return proto.CompactTextString(m) }
func (*ESMMarketPrice) ProtoMessage()    {}
func (*ESMMarketPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{5}
}
func (m *ESMMarketPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESMMarketPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ESMMarketPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ESMMarketPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESMMarketPrice.Merge(m, src)
}
func (m *ESMMarketPrice) XXX_Size() int {
	return m.Size()
}
func (m *ESMMarketPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ESMMarketPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ESMMarketPrice proto.InternalMessageInfo

func (m *ESMMarketPrice) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ESMMarketPrice) GetIsPriceSet() bool {
	if m != nil {
		return m.IsPriceSet
	}
	return false
}

func (m *ESMMarketPrice) GetMarket() []Market {
	if m != nil {
		return m.Market
	}
	return nil
}

type Market struct {
	AssetID uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Rates   uint64 `protobuf:"varint,2,opt,name=rates,proto3" json:"rates,omitempty"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{6}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *Market) GetRates() uint64 {
	if m != nil {
		return m.Rates
	}
	return 0
}

type DataAfterCoolOff struct {
	AppId           uint64          `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	CollateralAsset []AssetToAmount `protobuf:"bytes,2,rep,name=collateral_asset,json=collateralAsset,proto3" json:"collateral_asset" yaml:"collateral_asset"`
	DebtAsset       []AssetToAmount `protobuf:"bytes,3,rep,name=debt_asset,json=debtAsset,proto3" json:"debt_asset" yaml:"debt_asset"`
}

func (m *DataAfterCoolOff) Reset()         { *m = DataAfterCoolOff{} }
func (m *DataAfterCoolOff) String() string { return proto.CompactTextString(m) }
func (*DataAfterCoolOff) ProtoMessage()    {}
func (*DataAfterCoolOff) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{7}
}
func (m *DataAfterCoolOff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataAfterCoolOff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataAfterCoolOff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataAfterCoolOff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAfterCoolOff.Merge(m, src)
}
func (m *DataAfterCoolOff) XXX_Size() int {
	return m.Size()
}
func (m *DataAfterCoolOff) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAfterCoolOff.DiscardUnknown(m)
}

var xxx_messageInfo_DataAfterCoolOff proto.InternalMessageInfo

func (m *DataAfterCoolOff) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *DataAfterCoolOff) GetCollateralAsset() []AssetToAmount {
	if m != nil {
		return m.CollateralAsset
	}
	return nil
}

func (m *DataAfterCoolOff) GetDebtAsset() []AssetToAmount {
	if m != nil {
		return m.DebtAsset
	}
	return nil
}

type AssetToAmount struct {
	AssetID uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *AssetToAmount) Reset()         { *m = AssetToAmount{} }
func (m *AssetToAmount) String() string { return proto.CompactTextString(m) }
func (*AssetToAmount) ProtoMessage()    {}
func (*AssetToAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{8}
}
func (m *AssetToAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToAmount.Merge(m, src)
}
func (m *AssetToAmount) XXX_Size() int {
	return m.Size()
}
func (m *AssetToAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToAmount.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToAmount proto.InternalMessageInfo

func (m *AssetToAmount) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type AssetToAmountValue struct {
	AppId                     uint64                                 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	AssetID                   uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Amount                    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	AssetValueToAppValueRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=asset_value_to_app_value_ratio,json=assetValueToAppValueRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"asset_value_to_app_value_ratio" yaml:"asset_value_to_app_value_ratio"`
}

func (m *AssetToAmountValue) Reset()         { *m = AssetToAmountValue{} }
func (m *AssetToAmountValue) String() string { return proto.CompactTextString(m) }
func (*AssetToAmountValue) ProtoMessage()    {}
func (*AssetToAmountValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{9}
}
func (m *AssetToAmountValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToAmountValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToAmountValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToAmountValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToAmountValue.Merge(m, src)
}
func (m *AssetToAmountValue) XXX_Size() int {
	return m.Size()
}
func (m *AssetToAmountValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToAmountValue.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToAmountValue proto.InternalMessageInfo

func (m *AssetToAmountValue) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AssetToAmountValue) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type AppToAmountValue struct {
	AppId  uint64                                 `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty" yaml:"appId"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *AppToAmountValue) Reset()         { *m = AppToAmountValue{} }
func (m *AppToAmountValue) String() string { return proto.CompactTextString(m) }
func (*AppToAmountValue) ProtoMessage()    {}
func (*AppToAmountValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{10}
}
func (m *AppToAmountValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppToAmountValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppToAmountValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppToAmountValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppToAmountValue.Merge(m, src)
}
func (m *AppToAmountValue) XXX_Size() int {
	return m.Size()
}
func (m *AppToAmountValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AppToAmountValue.DiscardUnknown(m)
}

var xxx_messageInfo_AppToAmountValue proto.InternalMessageInfo

func (m *AppToAmountValue) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type DebtAssetsRates struct {
	AssetID uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Rates   uint64 `protobuf:"varint,2,opt,name=rates,proto3" json:"rates,omitempty"`
}

func (m *DebtAssetsRates) Reset()         { *m = DebtAssetsRates{} }
func (m *DebtAssetsRates) String() string { return proto.CompactTextString(m) }
func (*DebtAssetsRates) ProtoMessage()    {}
func (*DebtAssetsRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f9b0ecd3a9e62a, []int{11}
}
func (m *DebtAssetsRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtAssetsRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtAssetsRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtAssetsRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtAssetsRates.Merge(m, src)
}
func (m *DebtAssetsRates) XXX_Size() int {
	return m.Size()
}
func (m *DebtAssetsRates) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtAssetsRates.DiscardUnknown(m)
}

var xxx_messageInfo_DebtAssetsRates proto.InternalMessageInfo

func (m *DebtAssetsRates) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *DebtAssetsRates) GetRates() uint64 {
	if m != nil {
		return m.Rates
	}
	return 0
}

func init() {
	proto.RegisterType((*ESMTriggerParams)(nil), "comdex.esm.v1beta1.ESMTriggerParams")
	proto.RegisterType((*CurrentDepositStats)(nil), "comdex.esm.v1beta1.CurrentDepositStats")
	proto.RegisterType((*ESMStatus)(nil), "comdex.esm.v1beta1.ESMStatus")
	proto.RegisterType((*KillSwitchParams)(nil), "comdex.esm.v1beta1.KillSwitchParams")
	proto.RegisterType((*UsersDepositMapping)(nil), "comdex.esm.v1beta1.UsersDepositMapping")
	proto.RegisterType((*ESMMarketPrice)(nil), "comdex.esm.v1beta1.ESMMarketPrice")
	proto.RegisterType((*Market)(nil), "comdex.esm.v1beta1.Market")
	proto.RegisterType((*DataAfterCoolOff)(nil), "comdex.esm.v1beta1.DataAfterCoolOff")
	proto.RegisterType((*AssetToAmount)(nil), "comdex.esm.v1beta1.AssetToAmount")
	proto.RegisterType((*AssetToAmountValue)(nil), "comdex.esm.v1beta1.AssetToAmountValue")
	proto.RegisterType((*AppToAmountValue)(nil), "comdex.esm.v1beta1.AppToAmountValue")
	proto.RegisterType((*DebtAssetsRates)(nil), "comdex.esm.v1beta1.DebtAssetsRates")
}

func init() { proto.RegisterFile("comdex/esm/v1beta1/esm.proto", fileDescriptor_e7f9b0ecd3a9e62a) }

var fileDescriptor_e7f9b0ecd3a9e62a = []byte{
	// 1087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xaf, 0x9b, 0x36, 0x4d, 0xa6, 0xdb, 0x36, 0x75, 0xfb, 0xdd, 0x6f, 0x5a, 0x96, 0xb8, 0x0c,
	0xa2, 0x14, 0x50, 0x6d, 0x6d, 0x39, 0xc1, 0x05, 0xe2, 0xb6, 0xa0, 0x0a, 0x22, 0xaa, 0x49, 0x61,
	0x81, 0x8b, 0x35, 0xb6, 0x27, 0xa9, 0x55, 0xdb, 0x63, 0xc6, 0x93, 0xb2, 0x95, 0x38, 0x70, 0xe0,
	0x4e, 0x25, 0x6e, 0x5c, 0x91, 0xe0, 0x9f, 0xe0, 0x0f, 0xd8, 0xe3, 0x1e, 0x11, 0x07, 0x83, 0xd2,
	0x33, 0x17, 0x73, 0xe3, 0x84, 0x3c, 0x33, 0xf9, 0xb5, 0xbb, 0x40, 0xb2, 0x2c, 0xa7, 0x78, 0xde,
	0xfb, 0xbc, 0xcf, 0xfb, 0x39, 0x6f, 0x02, 0xee, 0x78, 0x34, 0xf2, 0xc9, 0x7d, 0x8b, 0xa4, 0x91,
	0x75, 0x79, 0xd7, 0x25, 0x1c, 0xdf, 0x2d, 0xbe, 0xcd, 0x84, 0x51, 0x4e, 0x75, 0x5d, 0x6a, 0xcd,
	0x42, 0xa2, 0xb4, 0xdb, 0x9b, 0x5d, 0xda, 0xa5, 0x42, 0x6d, 0x15, 0x5f, 0x12, 0xb9, 0x6d, 0x74,
	0x29, 0xed, 0x86, 0xc4, 0x12, 0x27, 0xb7, 0xd7, 0xb1, 0x78, 0x10, 0x91, 0x94, 0xe3, 0x28, 0x51,
	0x80, 0x86, 0x47, 0xd3, 0x88, 0xa6, 0x96, 0x8b, 0x53, 0x32, 0xf4, 0xe4, 0xd1, 0x20, 0x96, 0x7a,
	0x78, 0x5d, 0x02, 0xb5, 0xe3, 0x76, 0xeb, 0x8c, 0x05, 0xdd, 0x2e, 0x61, 0xa7, 0x98, 0xe1, 0x28,
	0xd5, 0xf7, 0x41, 0x19, 0x27, 0x89, 0x13, 0xf8, 0x75, 0x6d, 0x47, 0xdb, 0x5b, 0xb0, 0x6f, 0xf7,
	0x33, 0x63, 0xb1, 0x99, 0x24, 0x27, 0x7e, 0x9e, 0x19, 0xd5, 0x2b, 0x1c, 0x85, 0x6f, 0xc2, 0xc0,
	0x87, 0x68, 0x11, 0x17, 0x32, 0xfd, 0x2b, 0x0d, 0xdc, 0xe2, 0x98, 0x75, 0x09, 0x77, 0x2e, 0x71,
	0xd8, 0x23, 0xf5, 0xf9, 0x1d, 0x6d, 0x6f, 0xf9, 0x60, 0xcb, 0x94, 0xbe, 0xcd, 0xc2, 0xf7, 0x20,
	0x0f, 0xf3, 0x90, 0x06, 0xb1, 0xfd, 0xce, 0x83, 0xcc, 0x98, 0xcb, 0x33, 0x63, 0x43, 0x72, 0x8d,
	0x1b, 0xc3, 0x3f, 0x32, 0xe3, 0xe5, 0x6e, 0xc0, 0xcf, 0x7b, 0xae, 0xe9, 0xd1, 0xc8, 0x52, 0xf1,
	0xcb, 0x9f, 0xfd, 0xd4, 0xbf, 0xb0, 0xf8, 0x55, 0x42, 0x52, 0xc1, 0x83, 0x96, 0xa5, 0xe5, 0x47,
	0x85, 0xa1, 0xde, 0x06, 0x6b, 0x1e, 0xa5, 0xa1, 0x43, 0x3b, 0x1d, 0x27, 0x21, 0x2c, 0xa0, 0x7e,
	0xbd, 0x24, 0xc2, 0x7f, 0xad, 0x9f, 0x19, 0x2b, 0x87, 0x94, 0x86, 0x1f, 0x74, 0x3a, 0xa7, 0x42,
	0x91, 0x67, 0xc6, 0x6d, 0xe9, 0xfa, 0x11, 0x0b, 0x88, 0x56, 0xbc, 0x71, 0xa0, 0xfe, 0x19, 0x58,
	0xc6, 0x69, 0x4a, 0x78, 0x8a, 0x30, 0x27, 0x69, 0x7d, 0x61, 0xa7, 0xb4, 0xb7, 0x7c, 0xf0, 0xa2,
	0xf9, 0x78, 0x83, 0xcc, 0x23, 0xe2, 0xf2, 0xe6, 0x08, 0x6a, 0xbf, 0x5a, 0xe4, 0xd8, 0xcf, 0x8c,
	0xe5, 0x31, 0xe1, 0x28, 0x65, 0x49, 0xea, 0xb0, 0x42, 0x0a, 0xd1, 0xb8, 0x0f, 0xf8, 0xa3, 0x06,
	0x36, 0x0e, 0x7b, 0x8c, 0x91, 0x98, 0x1f, 0x91, 0x84, 0xa6, 0x01, 0x6f, 0x73, 0xcc, 0x67, 0xee,
	0xca, 0x25, 0x58, 0x72, 0x71, 0x88, 0x63, 0x6f, 0x8a, 0x7e, 0x34, 0x55, 0x3f, 0x56, 0x25, 0x8b,
	0xb2, 0x9b, 0xa9, 0x15, 0x03, 0x67, 0xf0, 0xeb, 0x12, 0xa8, 0x1e, 0xb7, 0x5b, 0x45, 0xcc, 0xbd,
	0x99, 0x83, 0xb6, 0x40, 0x85, 0xdc, 0x27, 0x5e, 0x8f, 0x53, 0x26, 0xa2, 0xae, 0xda, 0x1b, 0x79,
	0x66, 0xac, 0x49, 0xdc, 0x40, 0x03, 0xd1, 0x10, 0xa4, 0xbf, 0x02, 0xca, 0xa9, 0xf0, 0x24, 0x7a,
	0x5d, 0xb1, 0xd7, 0xf3, 0xcc, 0x58, 0x91, 0x70, 0x29, 0x87, 0x48, 0x01, 0xf4, 0x8f, 0x01, 0x48,
	0x39, 0x66, 0xdc, 0x29, 0xee, 0x48, 0x7d, 0x41, 0xd4, 0x64, 0xdb, 0x94, 0x17, 0xc8, 0x1c, 0x5c,
	0x20, 0xf3, 0x6c, 0x70, 0x81, 0xec, 0xe7, 0x55, 0x51, 0xd6, 0x87, 0x74, 0xca, 0x16, 0x5e, 0xff,
	0x62, 0x68, 0xa8, 0x2a, 0x04, 0x05, 0x5c, 0x47, 0xa0, 0x42, 0x62, 0x5f, 0xf2, 0x2e, 0xfe, 0x23,
	0xef, 0x73, 0x8a, 0x77, 0x90, 0x95, 0xb2, 0x94, 0xac, 0x4b, 0x24, 0xf6, 0x05, 0xe7, 0x09, 0x58,
	0x67, 0xc4, 0x27, 0x51, 0xc2, 0x03, 0x1a, 0x3b, 0x2a, 0xc7, 0xb2, 0xc8, 0xf1, 0x4e, 0x9e, 0x19,
	0x75, 0x69, 0xfc, 0x18, 0x04, 0xa2, 0xda, 0x48, 0x26, 0x7b, 0x00, 0xbf, 0x00, 0xb5, 0xf7, 0x82,
	0x30, 0x6c, 0x7f, 0x1e, 0x70, 0xef, 0x5c, 0x5d, 0xf1, 0x5d, 0x20, 0x2b, 0xae, 0xda, 0x52, 0xcb,
	0x33, 0xe3, 0x96, 0x9a, 0xcc, 0x42, 0x3c, 0x6c, 0xc8, 0xdb, 0x60, 0xd5, 0x65, 0x04, 0x5f, 0x10,
	0xe6, 0x90, 0x18, 0xbb, 0xa1, 0x1c, 0xa6, 0x8a, 0xbd, 0x95, 0x67, 0xc6, 0xff, 0xd4, 0xb4, 0x4c,
	0xe8, 0x21, 0x5a, 0x51, 0x82, 0x63, 0x79, 0xfe, 0x5d, 0x03, 0x1b, 0x1f, 0xa6, 0x84, 0xa5, 0x6a,
	0x98, 0x5b, 0x38, 0x49, 0x82, 0xb8, 0x3b, 0xeb, 0x64, 0x1c, 0x80, 0xaa, 0x2f, 0x09, 0x86, 0xa3,
	0xb1, 0x99, 0x67, 0x46, 0x4d, 0x02, 0x87, 0x2a, 0x88, 0x46, 0x30, 0xfd, 0x0a, 0x54, 0xd4, 0x41,
	0x8e, 0xc7, 0xdf, 0xde, 0x01, 0x7b, 0xb2, 0x2d, 0x03, 0xc3, 0x99, 0x2e, 0xc1, 0xd0, 0x1d, 0xfc,
	0x5e, 0x03, 0xab, 0xc7, 0xed, 0x56, 0x0b, 0xb3, 0x0b, 0xc2, 0x4f, 0x59, 0xe0, 0x91, 0xa9, 0x4b,
	0xde, 0x00, 0x20, 0x48, 0x85, 0x49, 0x9b, 0x70, 0x59, 0x6e, 0x34, 0x26, 0xd1, 0xdf, 0x07, 0xe5,
	0x48, 0xd0, 0xd6, 0x4b, 0x62, 0x1b, 0x6d, 0x3f, 0x69, 0x1b, 0x49, 0xc7, 0x76, 0x5d, 0x25, 0xa5,
	0xca, 0x84, 0x23, 0xda, 0x8b, 0xb9, 0x13, 0xc4, 0x10, 0x29, 0x0e, 0xf8, 0x09, 0x28, 0x4b, 0xac,
	0xfe, 0x06, 0xa8, 0x88, 0x35, 0x34, 0x6a, 0x49, 0xa3, 0x9f, 0x19, 0x4b, 0x62, 0x7d, 0x9d, 0x1c,
	0x8d, 0x2a, 0x33, 0x00, 0x41, 0xb4, 0x24, 0x3e, 0x4f, 0x7c, 0x7d, 0x13, 0x2c, 0x8a, 0x4d, 0x26,
	0xa2, 0x5d, 0x40, 0xf2, 0x00, 0x7f, 0x98, 0x07, 0xb5, 0x23, 0xcc, 0x71, 0xb3, 0xc3, 0x09, 0x53,
	0xfb, 0x77, 0xea, 0x2a, 0x7c, 0xa9, 0x81, 0x9a, 0x47, 0xc3, 0x10, 0x73, 0xc2, 0x70, 0xe8, 0x08,
	0x4f, 0xf5, 0x79, 0x91, 0xf0, 0x0b, 0x4f, 0x4a, 0x58, 0x84, 0x79, 0x46, 0x9b, 0x22, 0x43, 0xfb,
	0x40, 0x2d, 0xdf, 0xb5, 0xc3, 0x21, 0x85, 0x00, 0xe4, 0x99, 0xf1, 0xff, 0xc1, 0xe2, 0x9f, 0xe4,
	0x86, 0x68, 0xcd, 0x9b, 0xc4, 0xea, 0xe7, 0x00, 0xf8, 0xc4, 0xe5, 0xca, 0x77, 0x69, 0x5a, 0xdf,
	0xbb, 0xca, 0x77, 0x75, 0xf8, 0x22, 0x8c, 0x96, 0xc8, 0x88, 0x4f, 0x0c, 0xaa, 0xd2, 0xc3, 0xef,
	0x34, 0xb0, 0x32, 0x41, 0xf2, 0x6f, 0x9a, 0x71, 0x0f, 0x94, 0x65, 0x9f, 0xd5, 0x35, 0x79, 0xab,
	0x88, 0xe7, 0xe7, 0xcc, 0xd8, 0x9d, 0x62, 0x8a, 0x4f, 0x62, 0x3e, 0x5a, 0xa0, 0x92, 0x05, 0x22,
	0x45, 0x07, 0x7f, 0x9b, 0x07, 0xfa, 0x44, 0x94, 0xf2, 0xdd, 0x9d, 0xb6, 0xa3, 0xe3, 0x29, 0xcd,
	0x3f, 0x6d, 0x4a, 0xa5, 0x67, 0x9a, 0x92, 0xfe, 0xad, 0x06, 0x1a, 0xd2, 0x9f, 0xf8, 0xf3, 0xe1,
	0x70, 0xea, 0x14, 0x4b, 0x49, 0x1e, 0x18, 0xe6, 0x01, 0x15, 0x0f, 0x45, 0xd5, 0xbe, 0x37, 0x83,
	0xc7, 0x23, 0xe2, 0xe5, 0x99, 0xf1, 0xd2, 0x78, 0x36, 0x7f, 0xc5, 0x0e, 0xd1, 0x96, 0x00, 0x88,
	0x4a, 0x9e, 0xd1, 0x66, 0x92, 0x88, 0x2f, 0x24, 0x74, 0xdf, 0x68, 0xa0, 0xd6, 0x4c, 0x92, 0xa7,
	0xab, 0xf6, 0x7f, 0x36, 0x05, 0x2e, 0x58, 0x7b, 0xe4, 0xaf, 0xce, 0x33, 0xdf, 0x1c, 0xf6, 0xbb,
	0x0f, 0xfa, 0x0d, 0xed, 0x61, 0xbf, 0xa1, 0xfd, 0xda, 0x6f, 0x68, 0xd7, 0x37, 0x8d, 0xb9, 0x87,
	0x37, 0x8d, 0xb9, 0x9f, 0x6e, 0x1a, 0x73, 0x9f, 0xee, 0x4f, 0x84, 0x5f, 0xdc, 0xc4, 0x7d, 0xda,
	0xe9, 0x04, 0x5e, 0x80, 0x43, 0x75, 0xb6, 0xe4, 0xbf, 0x6a, 0x91, 0x89, 0x5b, 0x16, 0xef, 0xef,
	0xeb, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xab, 0x2a, 0x14, 0x20, 0x70, 0x0b, 0x00, 0x00,
}

func (m *ESMTriggerParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESMTriggerParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESMTriggerParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetsRates) > 0 {
		for iNdEx := len(m.AssetsRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetsRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CoolOffPeriod != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.CoolOffPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TargetValue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CurrentDepositStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentDepositStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentDepositStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ESMStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESMStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESMStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedemptionStatus {
		i--
		if m.RedemptionStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintEsm(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintEsm(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEsm(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KillSwitchParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillSwitchParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KillSwitchParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BreakerEnable {
		i--
		if m.BreakerEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersDepositMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDepositMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDepositMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintEsm(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ESMMarketPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESMMarketPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESMMarketPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Market) > 0 {
		for iNdEx := len(m.Market) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Market[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsPriceSet {
		i--
		if m.IsPriceSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rates != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.Rates))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataAfterCoolOff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataAfterCoolOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataAfterCoolOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DebtAsset) > 0 {
		for iNdEx := len(m.DebtAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DebtAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CollateralAsset) > 0 {
		for iNdEx := len(m.CollateralAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollateralAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToAmountValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToAmountValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToAmountValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AssetValueToAppValueRatio.Size()
		i -= size
		if _, err := m.AssetValueToAppValueRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetID != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppToAmountValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppToAmountValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppToAmountValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppId != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebtAssetsRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtAssetsRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebtAssetsRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rates != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.Rates))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintEsm(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovEsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ESMTriggerParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = m.TargetValue.Size()
	n += 1 + l + sovEsm(uint64(l))
	if m.CoolOffPeriod != 0 {
		n += 1 + sovEsm(uint64(m.CoolOffPeriod))
	}
	if len(m.AssetsRates) > 0 {
		for _, e := range m.AssetsRates {
			l = e.Size()
			n += 1 + l + sovEsm(uint64(l))
		}
	}
	return n
}

func (m *CurrentDepositStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = m.Balance.Size()
	n += 1 + l + sovEsm(uint64(l))
	return n
}

func (m *ESMStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEsm(uint64(l))
	}
	if m.Status {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovEsm(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovEsm(uint64(l))
	if m.RedemptionStatus {
		n += 2
	}
	return n
}

func (m *KillSwitchParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	if m.BreakerEnable {
		n += 2
	}
	return n
}

func (m *UsersDepositMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovEsm(uint64(l))
	}
	l = m.Deposits.Size()
	n += 1 + l + sovEsm(uint64(l))
	return n
}

func (m *ESMMarketPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	if m.IsPriceSet {
		n += 2
	}
	if len(m.Market) > 0 {
		for _, e := range m.Market {
			l = e.Size()
			n += 1 + l + sovEsm(uint64(l))
		}
	}
	return n
}

func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovEsm(uint64(m.AssetID))
	}
	if m.Rates != 0 {
		n += 1 + sovEsm(uint64(m.Rates))
	}
	return n
}

func (m *DataAfterCoolOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	if len(m.CollateralAsset) > 0 {
		for _, e := range m.CollateralAsset {
			l = e.Size()
			n += 1 + l + sovEsm(uint64(l))
		}
	}
	if len(m.DebtAsset) > 0 {
		for _, e := range m.DebtAsset {
			l = e.Size()
			n += 1 + l + sovEsm(uint64(l))
		}
	}
	return n
}

func (m *AssetToAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovEsm(uint64(m.AssetID))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEsm(uint64(l))
	return n
}

func (m *AssetToAmountValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	if m.AssetID != 0 {
		n += 1 + sovEsm(uint64(m.AssetID))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEsm(uint64(l))
	l = m.AssetValueToAppValueRatio.Size()
	n += 1 + l + sovEsm(uint64(l))
	return n
}

func (m *AppToAmountValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovEsm(uint64(m.AppId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEsm(uint64(l))
	return n
}

func (m *DebtAssetsRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovEsm(uint64(m.AssetID))
	}
	if m.Rates != 0 {
		n += 1 + sovEsm(uint64(m.Rates))
	}
	return n
}

func sovEsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEsm(x uint64) (n int) {
	return sovEsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ESMTriggerParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESMTriggerParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESMTriggerParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolOffPeriod", wireType)
			}
			m.CoolOffPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoolOffPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetsRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetsRates = append(m.AssetsRates, DebtAssetsRates{})
			if err := m.AssetsRates[len(m.AssetsRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentDepositStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentDepositStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentDepositStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESMStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESMStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESMStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedemptionStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillSwitchParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillSwitchParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillSwitchParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakerEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BreakerEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDepositMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDepositMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDepositMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESMMarketPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESMMarketPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESMMarketPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPriceSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPriceSet = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Market = append(m.Market, Market{})
			if err := m.Market[len(m.Market)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			m.Rates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rates |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataAfterCoolOff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataAfterCoolOff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataAfterCoolOff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralAsset = append(m.CollateralAsset, AssetToAmount{})
			if err := m.CollateralAsset[len(m.CollateralAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebtAsset = append(m.DebtAsset, AssetToAmount{})
			if err := m.DebtAsset[len(m.DebtAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToAmountValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToAmountValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToAmountValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetValueToAppValueRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetValueToAppValueRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppToAmountValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppToAmountValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppToAmountValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtAssetsRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtAssetsRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtAssetsRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			m.Rates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rates |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEsm = fmt.Errorf("proto: unexpected end of group")
)
