// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/market/v1beta1/market.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimeWeightedAverage struct {
	AssetID       uint64   `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	ScriptID      uint64   `protobuf:"varint,2,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty" yaml:"script_id"`
	Twa           uint64   `protobuf:"varint,3,opt,name=twa,proto3" json:"twa,omitempty" yaml:"twa"`
	CurrentIndex  uint64   `protobuf:"varint,4,opt,name=current_index,json=currentIndex,proto3" json:"current_index,omitempty" yaml:"current_index"`
	IsPriceActive bool     `protobuf:"varint,5,opt,name=is_price_active,json=isPriceActive,proto3" json:"is_price_active,omitempty" yaml:"is_price_active"`
	PriceValue    []uint64 `protobuf:"varint,6,rep,packed,name=price_value,json=priceValue,proto3" json:"price_value,omitempty" yaml:"price_value"`
}

func (m *TimeWeightedAverage) Reset()         { *m = TimeWeightedAverage{} }
func (m *TimeWeightedAverage) String() string { return proto.CompactTextString(m) }
func (*TimeWeightedAverage) ProtoMessage()    {}
func (*TimeWeightedAverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c52e410514c538b6, []int{0}
}
func (m *TimeWeightedAverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeWeightedAverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeWeightedAverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeWeightedAverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeWeightedAverage.Merge(m, src)
}
func (m *TimeWeightedAverage) XXX_Size() int {
	return m.Size()
}
func (m *TimeWeightedAverage) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeWeightedAverage.DiscardUnknown(m)
}

var xxx_messageInfo_TimeWeightedAverage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TimeWeightedAverage)(nil), "comdex.market.v1beta1.TimeWeightedAverage")
}

func init() {
	proto.RegisterFile("comdex/market/v1beta1/market.proto", fileDescriptor_c52e410514c538b6)
}

var fileDescriptor_c52e410514c538b6 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0x13, 0x72, 0xb4, 0x87, 0x69, 0x55, 0x64, 0x5a, 0x14, 0x75, 0xb0, 0x23, 0x0b, 0x89,
	0x2c, 0x5c, 0xa8, 0x98, 0x40, 0x62, 0xb8, 0x00, 0x43, 0x06, 0x24, 0x14, 0x2a, 0x90, 0x58, 0x22,
	0x9f, 0xe3, 0xa6, 0x16, 0x97, 0x26, 0x4a, 0x7c, 0xb9, 0xf6, 0x2d, 0x10, 0x4f, 0xc1, 0xa3, 0x74,
	0xec, 0xc8, 0x64, 0x81, 0xef, 0x0d, 0xf2, 0x04, 0x28, 0x76, 0x38, 0x95, 0x6e, 0xdf, 0xff, 0xef,
	0xdf, 0xef, 0x5b, 0x3e, 0x03, 0xc2, 0xaa, 0x32, 0xe7, 0x97, 0x51, 0x49, 0x9b, 0x6f, 0x5c, 0x46,
	0xdd, 0xc9, 0x82, 0x4b, 0x7a, 0x32, 0xc6, 0x59, 0xdd, 0x54, 0xb2, 0x82, 0x47, 0x96, 0x99, 0x8d,
	0xe5, 0xc8, 0x1c, 0x1f, 0x16, 0x55, 0x51, 0x19, 0x22, 0x1a, 0x26, 0x0b, 0x93, 0x1f, 0x1e, 0x78,
	0x7c, 0x2a, 0x4a, 0xfe, 0x85, 0x8b, 0xe2, 0x5c, 0xf2, 0x7c, 0xde, 0xf1, 0x86, 0x16, 0x1c, 0xbe,
	0x02, 0x53, 0xda, 0xb6, 0x5c, 0x66, 0x22, 0xf7, 0xdd, 0xc0, 0x0d, 0x27, 0x31, 0xd2, 0x0a, 0xef,
	0xce, 0x87, 0x2e, 0x79, 0xd7, 0x2b, 0x7c, 0x70, 0x45, 0xcb, 0xe5, 0x6b, 0xf2, 0x0f, 0x22, 0xe9,
	0xae, 0x19, 0x93, 0x1c, 0xbe, 0x01, 0x0f, 0x5a, 0xd6, 0x88, 0xda, 0xb8, 0xf7, 0x8c, 0x1b, 0x68,
	0x85, 0xa7, 0x9f, 0x4c, 0x69, 0xe4, 0x47, 0x56, 0xde, 0x62, 0x24, 0x9d, 0xda, 0x39, 0xc9, 0xe1,
	0x33, 0xe0, 0xc9, 0x35, 0xf5, 0x3d, 0x23, 0x1e, 0x69, 0x85, 0xbd, 0xd3, 0x35, 0xed, 0x15, 0x06,
	0xd6, 0x91, 0x6b, 0x4a, 0xd2, 0x81, 0x80, 0x1f, 0xc0, 0x3e, 0x5b, 0x35, 0x0d, 0xbf, 0x90, 0x99,
	0xb8, 0xc8, 0xf9, 0xa5, 0x3f, 0x31, 0x4a, 0xa8, 0x15, 0xde, 0x7b, 0x6b, 0x1f, 0x92, 0xa1, 0xef,
	0x15, 0x3e, 0xb4, 0xee, 0x7f, 0x38, 0x49, 0xf7, 0xd8, 0x2d, 0x0a, 0xc6, 0xe0, 0x40, 0xb4, 0x59,
	0xdd, 0x08, 0xc6, 0x33, 0xca, 0xa4, 0xe8, 0xb8, 0x7f, 0x3f, 0x70, 0xc3, 0x69, 0x7c, 0xdc, 0x2b,
	0xfc, 0xc4, 0x2e, 0xb8, 0x03, 0x90, 0x74, 0x5f, 0xb4, 0x1f, 0x87, 0x62, 0x6e, 0x32, 0x7c, 0x0f,
	0x1e, 0xda, 0xf7, 0x8e, 0x2e, 0x57, 0xdc, 0xdf, 0x09, 0xbc, 0x70, 0x12, 0x3f, 0xd5, 0x0a, 0x03,
	0x43, 0x7d, 0x1e, 0xda, 0x5e, 0x61, 0x68, 0xb7, 0xdd, 0x42, 0x49, 0x0a, 0xea, 0x2d, 0x11, 0xa7,
	0xd7, 0x7f, 0x90, 0xf3, 0x53, 0x23, 0xe7, 0x5a, 0x23, 0xf7, 0x46, 0x23, 0xf7, 0xb7, 0x46, 0xee,
	0xf7, 0x0d, 0x72, 0x6e, 0x36, 0xc8, 0xf9, 0xb5, 0x41, 0xce, 0xd7, 0x17, 0x85, 0x90, 0xe7, 0xab,
	0xc5, 0x8c, 0x55, 0x65, 0x64, 0xcf, 0xfd, 0xbc, 0x3a, 0x3b, 0x13, 0x4c, 0xd0, 0xe5, 0x98, 0xa3,
	0xed, 0x27, 0x91, 0x57, 0x35, 0x6f, 0x17, 0x3b, 0xe6, 0xde, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0x64, 0x1d, 0xa8, 0x42, 0x02, 0x00, 0x00,
}

func (m *TimeWeightedAverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeWeightedAverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeWeightedAverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceValue) > 0 {
		dAtA2 := make([]byte, len(m.PriceValue)*10)
		var j1 int
		for _, num := range m.PriceValue {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMarket(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.IsPriceActive {
		i--
		if m.IsPriceActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentIndex != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.CurrentIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.Twa != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Twa))
		i--
		dAtA[i] = 0x18
	}
	if m.ScriptID != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ScriptID))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeWeightedAverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovMarket(uint64(m.AssetID))
	}
	if m.ScriptID != 0 {
		n += 1 + sovMarket(uint64(m.ScriptID))
	}
	if m.Twa != 0 {
		n += 1 + sovMarket(uint64(m.Twa))
	}
	if m.CurrentIndex != 0 {
		n += 1 + sovMarket(uint64(m.CurrentIndex))
	}
	if m.IsPriceActive {
		n += 2
	}
	if len(m.PriceValue) > 0 {
		l = 0
		for _, e := range m.PriceValue {
			l += sovMarket(uint64(e))
		}
		n += 1 + sovMarket(uint64(l)) + l
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeWeightedAverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeWeightedAverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeWeightedAverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			m.ScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twa", wireType)
			}
			m.Twa = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Twa |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPriceActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPriceActive = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PriceValue = append(m.PriceValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMarket
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMarket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PriceValue) == 0 {
					m.PriceValue = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PriceValue = append(m.PriceValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceValue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
