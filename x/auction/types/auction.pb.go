// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/auction.proto

package types

import (
	fmt "fmt"
	types1 "github.com/comdex-official/comdex/x/asset/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollateralAuction struct {
	Id                  uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	LockedVaultId       uint64                                        `protobuf:"varint,2,opt,name=locked_vault_id,json=lockedVaultId,proto3" json:"locked_vault_id,omitempty" yaml:"locked_vault_id"`
	AuctionedCollateral github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=auctioned_collateral,json=auctionedCollateral,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"auctioned_collateral" yaml:"auctioned_collateral"`
	DiscountQuantity    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=discount_quantity,json=discountQuantity,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"discount_quantity" yaml:"discount_quantity"`
	ActiveBiddingId     uint64                                        `protobuf:"varint,5,opt,name=active_bidding_id,json=activeBiddingId,proto3" json:"active_bidding_id,omitempty" yaml:"active_bidding_id"`
	Bidder              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"owner"`
	Bid                 github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,7,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	MinBid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,8,opt,name=min_bid,json=minBid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"min_bid" yaml:"min_bid"`
	MaxBid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,9,opt,name=max_bid,json=maxBid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"max_bid" yaml:"max_bid"`
	EndTime             time.Time                                     `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	Pair                types1.Pair                                   `protobuf:"bytes,11,opt,name=pair,proto3" json:"pair" yaml:"pair"`
	BiddingIds          []uint64                                      `protobuf:"varint,12,rep,packed,name=bidding_ids,json=biddingIds,proto3" json:"bidding_ids,omitempty" yaml:"bidding_ids"`
}

func (m *CollateralAuction) Reset()         { *m = CollateralAuction{} }
func (m *CollateralAuction) String() string { return proto.CompactTextString(m) }
func (*CollateralAuction) ProtoMessage()    {}
func (*CollateralAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{0}
}
func (m *CollateralAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralAuction.Merge(m, src)
}
func (m *CollateralAuction) XXX_Size() int {
	return m.Size()
}
func (m *CollateralAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralAuction.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralAuction proto.InternalMessageInfo

type DebtAuction struct {
	AuctionId           uint64                                        `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"id"`
	AuctionedToken      github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,2,opt,name=auctioned_token,json=auctionedToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"auctioned_token" yaml:"auctioned_token"`
	ExpectedUserToken   github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=expected_user_token,json=expectedUserToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"expected_user_token" yaml:"expected_token"`
	ExpectedMintedToken github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=expected_minted_token,json=expectedMintedToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"expected_minted_token" yaml:"expected_token"`
	EndTime             time.Time                                     `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	ActiveBiddingId     uint64                                        `protobuf:"varint,6,opt,name=active_bidding_id,json=activeBiddingId,proto3" json:"active_bidding_id,omitempty" yaml:"active_bidding_id"`
	Bidder              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"owner"`
	CurrentBidAmount    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,8,opt,name=current_bid_amount,json=currentBidAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"current_bid_amount" yaml:"min_bid"`
	AuctionStatus       uint64                                        `protobuf:"varint,9,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
}

func (m *DebtAuction) Reset()         { *m = DebtAuction{} }
func (m *DebtAuction) String() string { return proto.CompactTextString(m) }
func (*DebtAuction) ProtoMessage()    {}
func (*DebtAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{1}
}
func (m *DebtAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtAuction.Merge(m, src)
}
func (m *DebtAuction) XXX_Size() int {
	return m.Size()
}
func (m *DebtAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtAuction.DiscardUnknown(m)
}

var xxx_messageInfo_DebtAuction proto.InternalMessageInfo

type DutchAuction struct {
	AuctionId                 uint64                                        `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	OutflowTokenInitAmount    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,2,opt,name=outflow_token_init_amount,json=outflowTokenInitAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_init_amount" yaml:"outflow_token_init_amount"`
	OutflowTokenCurrentAmount github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=outflow_token_current_amount,json=outflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_current_amount" yaml:"outflow_token_current_amount"`
	InflowTokenTargetAmount   github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=inflow_token_target_amount,json=inflowTokenTargetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_target_amount" yaml:"inflow_token_target_amount"`
	InflowTokenCurrentAmount  github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,5,opt,name=inflow_token_current_amount,json=inflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_current_amount" yaml:"inflow_token_current_amount"`
	OutflowTokenInitialPrice  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,6,opt,name=outflow_token_initial_price,json=outflowTokenInitialPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_initial_price" yaml:"outflow_token_initial_price"`
	OutflowTokenCurrentPrice  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,7,opt,name=outflow_token_current_price,json=outflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_current_price" yaml:"outflow_token_current_price"`
	OutflowTokenEndPrice      github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,8,opt,name=outflow_token_end_price,json=outflowTokenEndPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_end_price" yaml:"outflow_token_end_price"`
	InflowTokenCurrentPrice   github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,9,opt,name=inflow_token_current_price,json=inflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_token_current_price" yaml:"inflow_token_current_price"`
	EndTime                   time.Time                                     `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	AuctionStatus             uint64                                        `protobuf:"varint,11,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	InflowTokenAddress        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,12,opt,name=inflow_token_address,json=inflowTokenAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"inflow_token_address,omitempty" yaml:"inflow_token_address"`
	OutflowTokenAddress       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,13,opt,name=outflow_token_address,json=outflowTokenAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"outflow_token_address,omitempty" yaml:"outflow_token_address"`
	StartTime                 time.Time                                     `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
}

func (m *DutchAuction) Reset()         { *m = DutchAuction{} }
func (m *DutchAuction) String() string { return proto.CompactTextString(m) }
func (*DutchAuction) ProtoMessage()    {}
func (*DutchAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{2}
}
func (m *DutchAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutchAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutchAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutchAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutchAuction.Merge(m, src)
}
func (m *DutchAuction) XXX_Size() int {
	return m.Size()
}
func (m *DutchAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_DutchAuction.DiscardUnknown(m)
}

var xxx_messageInfo_DutchAuction proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CollateralAuction)(nil), "comdex.auction.v1beta1.CollateralAuction")
	proto.RegisterType((*DebtAuction)(nil), "comdex.auction.v1beta1.DebtAuction")
	proto.RegisterType((*DutchAuction)(nil), "comdex.auction.v1beta1.DutchAuction")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/auction.proto", fileDescriptor_4bb9aead25d5fe6c)
}

var fileDescriptor_4bb9aead25d5fe6c = []byte{
	// 1216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xcd, 0x6f, 0xe3, 0xc4,
	0x1b, 0xc7, 0xe3, 0xdd, 0xb6, 0x69, 0x26, 0x7d, 0xd9, 0xba, 0x6f, 0xee, 0xcb, 0xc6, 0x5d, 0xff,
	0x7e, 0x82, 0x1e, 0x68, 0xa2, 0x02, 0x12, 0x12, 0x12, 0x12, 0x71, 0x8b, 0xb4, 0x15, 0x02, 0x75,
	0xdd, 0xee, 0x0a, 0xb8, 0x58, 0x13, 0xcf, 0x34, 0x3b, 0x34, 0xb1, 0x83, 0x3d, 0xee, 0xb6, 0x57,
	0x24, 0x84, 0x84, 0x84, 0x54, 0x69, 0x0f, 0x5c, 0xf8, 0x03, 0x40, 0x42, 0x42, 0xe2, 0x5f, 0xe0,
	0xd2, 0x03, 0x87, 0x3d, 0x22, 0x0e, 0x01, 0xda, 0xff, 0x20, 0x47, 0xc4, 0x01, 0xcd, 0x9b, 0x13,
	0xa7, 0x69, 0xb3, 0xde, 0x2d, 0x9c, 0x5a, 0x8f, 0x9f, 0xe7, 0xf9, 0x7e, 0xe6, 0x99, 0x67, 0xbe,
	0x49, 0x0b, 0xfe, 0xef, 0x05, 0x4d, 0x84, 0x8f, 0x2b, 0x30, 0xf6, 0x28, 0x09, 0xfc, 0xca, 0xd1,
	0x66, 0x0d, 0x53, 0xb8, 0xa9, 0x9e, 0xcb, 0xad, 0x30, 0xa0, 0x81, 0xbe, 0x20, 0xa2, 0xca, 0x6a,
	0x55, 0x46, 0x2d, 0xcf, 0xd5, 0x83, 0x7a, 0xc0, 0x43, 0x2a, 0xec, 0x37, 0x11, 0xbd, 0x6c, 0xd6,
	0x83, 0xa0, 0xde, 0xc0, 0x15, 0xfe, 0x54, 0x8b, 0x0f, 0x2a, 0x94, 0x34, 0x71, 0x44, 0x61, 0xb3,
	0x25, 0x03, 0x4a, 0x5e, 0x10, 0x35, 0x83, 0xa8, 0x52, 0x83, 0x11, 0x4e, 0x14, 0xbd, 0x80, 0xf8,
	0xaa, 0x80, 0x82, 0x8a, 0x22, 0x4c, 0x93, 0x80, 0x16, 0x24, 0xa1, 0x08, 0xb0, 0xfe, 0x1e, 0x07,
	0x33, 0x5b, 0x41, 0xa3, 0x01, 0x29, 0x0e, 0x61, 0xa3, 0x2a, 0xa8, 0xf4, 0xbb, 0xe0, 0x16, 0x41,
	0x86, 0xb6, 0xa6, 0xad, 0x8f, 0xd8, 0x93, 0x9d, 0xb6, 0x59, 0x38, 0x81, 0xcd, 0xc6, 0xdb, 0x16,
	0x41, 0x96, 0x73, 0x8b, 0x20, 0xdd, 0x06, 0xd3, 0x8d, 0xc0, 0x3b, 0xc4, 0xc8, 0x3d, 0x82, 0x71,
	0x83, 0xba, 0x04, 0x19, 0xb7, 0x78, 0xec, 0x72, 0xa7, 0x6d, 0x2e, 0x88, 0xd8, 0xbe, 0x00, 0xcb,
	0x99, 0x14, 0x2b, 0x8f, 0xd8, 0xc2, 0x0e, 0xd2, 0xbf, 0xd5, 0xc0, 0x9c, 0x6c, 0x02, 0x46, 0xae,
	0x97, 0x20, 0x18, 0xb7, 0xd7, 0xb4, 0xf5, 0xe2, 0xeb, 0x4b, 0x65, 0xb1, 0xb3, 0x32, 0xdb, 0x99,
	0xea, 0x52, 0x79, 0x2b, 0x20, 0xbe, 0xfd, 0xe1, 0x59, 0xdb, 0xcc, 0x75, 0xda, 0xe6, 0x8a, 0x10,
	0x1a, 0x54, 0xc4, 0xfa, 0xab, 0x6d, 0xbe, 0x5a, 0x27, 0xf4, 0x71, 0x5c, 0x2b, 0x7b, 0x41, 0xb3,
	0x22, 0xbb, 0x24, 0x7e, 0x6c, 0x44, 0xe8, 0xb0, 0x42, 0x4f, 0x5a, 0x38, 0xe2, 0xf5, 0x9c, 0xd9,
	0xa4, 0x42, 0xb7, 0x11, 0xfa, 0x53, 0x0d, 0xcc, 0x20, 0x12, 0x79, 0x41, 0xec, 0x53, 0xf7, 0xb3,
	0x18, 0xfa, 0x94, 0xd0, 0x13, 0x63, 0x64, 0x18, 0xdb, 0xfb, 0x92, 0xcd, 0x10, 0x6c, 0x97, 0x2a,
	0x64, 0x02, 0xbb, 0xa3, 0xd2, 0x1f, 0xc8, 0x6c, 0xfd, 0x3e, 0x98, 0x81, 0x1e, 0x25, 0x47, 0xd8,
	0xad, 0x11, 0x84, 0x88, 0x5f, 0x67, 0xad, 0x1f, 0xe5, 0xad, 0x5f, 0xed, 0xaa, 0x5e, 0x0a, 0xb1,
	0x9c, 0x69, 0xb1, 0x66, 0x8b, 0xa5, 0x1d, 0xa4, 0x7f, 0x0c, 0xc6, 0xd8, 0x7b, 0x1c, 0x1a, 0x63,
	0x6b, 0xda, 0x7a, 0xc1, 0xae, 0x76, 0xda, 0xe6, 0x84, 0x48, 0x0f, 0x9e, 0xf8, 0x38, 0x64, 0xa0,
	0x1b, 0xcf, 0x01, 0x5a, 0xf5, 0xbc, 0x2a, 0x42, 0x21, 0x8e, 0x22, 0x47, 0x16, 0xd4, 0x3f, 0x05,
	0xb7, 0x6b, 0x04, 0x19, 0xf9, 0x61, 0xbd, 0x7a, 0x47, 0xf6, 0x0a, 0x08, 0xd9, 0x1a, 0x41, 0x99,
	0xba, 0xc3, 0x44, 0xf4, 0x18, 0xe4, 0x9b, 0xc4, 0x67, 0x5b, 0x35, 0xc6, 0x87, 0xe9, 0x55, 0xa5,
	0xde, 0x94, 0xd0, 0x93, 0x79, 0x99, 0x34, 0xc7, 0x9a, 0xc4, 0xb7, 0xa5, 0x2c, 0x3c, 0xe6, 0xb2,
	0x85, 0xac, 0xb2, 0x22, 0x2f, 0xa3, 0x2c, 0x3c, 0x66, 0xb2, 0x0e, 0x18, 0xc7, 0x3e, 0x72, 0x99,
	0x09, 0x18, 0x80, 0xeb, 0x2e, 0x97, 0x85, 0x43, 0x94, 0x95, 0x43, 0x94, 0xf7, 0x95, 0x43, 0xd8,
	0x2b, 0x52, 0x78, 0x5a, 0x08, 0xab, 0x4c, 0xeb, 0xf4, 0x77, 0x53, 0x73, 0xf2, 0xd8, 0x47, 0x2c,
	0x54, 0xdf, 0x02, 0x23, 0xcc, 0x0e, 0x8c, 0xa2, 0xac, 0xa7, 0xfc, 0x89, 0x19, 0x46, 0xb2, 0x91,
	0x5d, 0x48, 0x42, 0x7b, 0x56, 0xd6, 0x2b, 0x8a, 0x7a, 0x2c, 0xcb, 0x72, 0x78, 0xb2, 0xfe, 0x16,
	0x28, 0x76, 0xa7, 0x2d, 0x32, 0x26, 0xd6, 0x6e, 0xaf, 0x8f, 0xd8, 0x0b, 0x9d, 0xb6, 0xa9, 0x27,
	0x67, 0xab, 0x5e, 0x5a, 0x0e, 0xa8, 0xa9, 0x29, 0x8c, 0xac, 0x9f, 0xf3, 0xa0, 0xb8, 0x8d, 0x6b,
	0x54, 0x19, 0xcf, 0x6b, 0x00, 0xc8, 0xdb, 0xe8, 0x5e, 0x65, 0x40, 0x05, 0x19, 0xb0, 0x83, 0xf4,
	0xaf, 0x35, 0x30, 0xdd, 0xbd, 0xfe, 0x34, 0x38, 0xc4, 0x3e, 0x37, 0xa2, 0x6b, 0xcf, 0x63, 0x47,
	0x6e, 0x63, 0xa1, 0xdf, 0x3e, 0x78, 0x7e, 0xa6, 0x73, 0x99, 0x4a, 0x92, 0xf7, 0x59, 0x2e, 0x33,
	0x8d, 0x59, 0x7c, 0xdc, 0xc2, 0x1e, 0xc5, 0xc8, 0x8d, 0x23, 0x1c, 0x4a, 0xa6, 0xa1, 0x96, 0x76,
	0x5f, 0x32, 0xcd, 0xcb, 0xa3, 0x52, 0x35, 0xb2, 0x23, 0xcd, 0xa8, 0xdc, 0x87, 0x11, 0x0e, 0x05,
	0xd5, 0x37, 0x1a, 0x98, 0x4f, 0x2a, 0x36, 0x89, 0x9f, 0x14, 0x1e, 0x6e, 0x67, 0x37, 0xc7, 0x95,
	0xf4, 0xe5, 0x03, 0x0e, 0x20, 0xc8, 0x7a, 0xe7, 0x79, 0xf4, 0x86, 0xe6, 0x79, 0xa0, 0x45, 0x8e,
	0xbd, 0x9c, 0x45, 0xe6, 0x6f, 0xda, 0x22, 0xbf, 0xd2, 0x80, 0xee, 0xc5, 0x61, 0x88, 0x7d, 0xca,
	0x18, 0x5c, 0xd8, 0x64, 0x36, 0xff, 0x9f, 0x58, 0xd8, 0x1d, 0xa9, 0x6b, 0x13, 0x54, 0xe5, 0xaa,
	0xfa, 0xbb, 0x40, 0xcd, 0xb1, 0x1b, 0x51, 0x48, 0xe3, 0x88, 0x7b, 0xda, 0x88, 0xbd, 0xd4, 0x3d,
	0xf8, 0xf4, 0x7b, 0xcb, 0x99, 0x94, 0x0b, 0x7b, 0xe2, 0xf9, 0x97, 0x29, 0x30, 0xb1, 0x1d, 0x53,
	0xef, 0xb1, 0xba, 0xc6, 0x6f, 0x0e, 0xb8, 0xc6, 0xf3, 0x9d, 0xb6, 0x39, 0x93, 0x2e, 0xd7, 0x77,
	0x9d, 0xbf, 0xd7, 0xc0, 0x52, 0x10, 0xd3, 0x83, 0x46, 0xf0, 0x44, 0x4c, 0x98, 0x4b, 0x7c, 0x42,
	0x55, 0x73, 0x86, 0x5e, 0xec, 0x3d, 0xd9, 0x9c, 0x35, 0x79, 0x46, 0x57, 0x55, 0xca, 0xd4, 0xae,
	0x05, 0x59, 0x86, 0x0f, 0xec, 0x8e, 0x4f, 0xa8, 0x6c, 0xda, 0x4f, 0x1a, 0x58, 0x4d, 0x2b, 0xa8,
	0xf3, 0x94, 0xb8, 0x43, 0xef, 0xfc, 0x23, 0x89, 0xfb, 0xbf, 0x41, 0xb8, 0xe9, 0x62, 0x99, 0x88,
	0x97, 0x7a, 0x89, 0xb7, 0x44, 0x1d, 0x09, 0xfd, 0x83, 0x06, 0x96, 0x89, 0xdf, 0x23, 0x43, 0x61,
	0x58, 0xc7, 0x09, 0xf2, 0x50, 0x3b, 0xd8, 0x97, 0xc8, 0xf7, 0xa4, 0x1b, 0x5f, 0x59, 0x2a, 0x13,
	0xf0, 0xa2, 0xa8, 0xc3, 0x79, 0xf7, 0x79, 0x15, 0x89, 0xfb, 0xa3, 0x06, 0x56, 0x52, 0x1a, 0x7d,
	0x2d, 0x1e, 0x1d, 0xc6, 0xfb, 0x50, 0xf2, 0x5a, 0x03, 0x78, 0x5f, 0xa2, 0xc3, 0x46, 0x0f, 0x70,
	0xba, 0xc1, 0x4f, 0x35, 0xb0, 0x72, 0x79, 0xee, 0x08, 0x6c, 0xb8, 0xad, 0x90, 0x78, 0x58, 0x7e,
	0xd7, 0xe2, 0x6d, 0xfc, 0xad, 0x6d, 0xbe, 0xf2, 0x1c, 0x82, 0xdb, 0xd8, 0xeb, 0x6e, 0xe0, 0x9a,
	0xd2, 0x96, 0x63, 0xf4, 0x4f, 0x2a, 0x81, 0x8d, 0x5d, 0xf6, 0x6a, 0x00, 0x95, 0xda, 0xbc, 0xa0,
	0xca, 0xdf, 0x24, 0x55, 0xaa, 0x74, 0x1f, 0x95, 0x6c, 0x96, 0xa0, 0xfa, 0x52, 0x03, 0x8b, 0xe9,
	0x54, 0xe6, 0xe8, 0x82, 0x68, 0x9c, 0x13, 0xed, 0x66, 0x26, 0x2a, 0x0d, 0x22, 0x4a, 0xca, 0x5a,
	0xce, 0x5c, 0x2f, 0xcd, 0x7b, 0x3e, 0x12, 0x24, 0xa7, 0xfd, 0xd7, 0x22, 0xdd, 0x9e, 0x02, 0x87,
	0xd9, 0xcb, 0x0c, 0x73, 0xef, 0x9a, 0xa9, 0x93, 0x3c, 0x8b, 0x97, 0x27, 0x49, 0x20, 0xfd, 0x1b,
	0xdf, 0xf4, 0x2e, 0xfb, 0x7c, 0x31, 0x9b, 0xcf, 0xeb, 0x9f, 0x6b, 0x60, 0x2e, 0xb5, 0x1d, 0x28,
	0x3e, 0xd7, 0x8c, 0x09, 0x71, 0x5e, 0xdd, 0x3f, 0xca, 0x06, 0x45, 0xbd, 0xc0, 0xe7, 0xa5, 0xde,
	0xd3, 0x1f, 0xb9, 0xa6, 0x7f, 0xa1, 0x81, 0xf9, 0xf4, 0x01, 0x2b, 0x8a, 0x49, 0x4e, 0xf1, 0xa0,
	0xd3, 0x36, 0x57, 0x07, 0xcd, 0xc1, 0x8b, 0x63, 0xcc, 0xf6, 0x8e, 0x8d, 0xe2, 0xf8, 0x08, 0x80,
	0x88, 0xc2, 0x90, 0x8a, 0x43, 0x9a, 0x1a, 0x7a, 0x48, 0x77, 0xe5, 0x21, 0xc9, 0xcf, 0xc0, 0x6e,
	0xae, 0x38, 0xa6, 0x02, 0x5f, 0x60, 0xe1, 0xf6, 0xde, 0xd9, 0x9f, 0xa5, 0xdc, 0x77, 0xe7, 0xa5,
	0xdc, 0xd9, 0x79, 0x49, 0x7b, 0x76, 0x5e, 0xd2, 0xfe, 0x38, 0x2f, 0x69, 0xa7, 0x17, 0xa5, 0xdc,
	0xb3, 0x8b, 0x52, 0xee, 0xd7, 0x8b, 0x52, 0xee, 0x93, 0xcd, 0x14, 0x3f, 0xfb, 0xc2, 0xbe, 0x11,
	0x1c, 0x1c, 0x10, 0x8f, 0xc0, 0x86, 0x7c, 0xae, 0x74, 0xff, 0x11, 0xc1, 0xb7, 0x53, 0x1b, 0xe3,
	0x48, 0x6f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x12, 0xe7, 0xa8, 0x05, 0xa7, 0x10, 0x00, 0x00,
}

func (m *CollateralAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BiddingIds) > 0 {
		dAtA2 := make([]byte, len(m.BiddingIds)*10)
		var j1 int
		for _, num := range m.BiddingIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAuction(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	{
		size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintAuction(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x52
	{
		size, err := m.MaxBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.MinBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x32
	}
	if m.ActiveBiddingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ActiveBiddingId))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.DiscountQuantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AuctionedCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LockedVaultId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebtAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebtAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.CurrentBidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActiveBiddingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ActiveBiddingId))
		i--
		dAtA[i] = 0x30
	}
	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintAuction(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ExpectedMintedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ExpectedUserToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AuctionedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DutchAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutchAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DutchAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintAuction(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x72
	if len(m.OutflowTokenAddress) > 0 {
		i -= len(m.OutflowTokenAddress)
		copy(dAtA[i:], m.OutflowTokenAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.OutflowTokenAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.InflowTokenAddress) > 0 {
		i -= len(m.InflowTokenAddress)
		copy(dAtA[i:], m.InflowTokenAddress)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.InflowTokenAddress)))
		i--
		dAtA[i] = 0x62
	}
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x58
	}
	n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err16 != nil {
		return 0, err16
	}
	i -= n16
	i = encodeVarintAuction(dAtA, i, uint64(n16))
	i--
	dAtA[i] = 0x52
	{
		size := m.InflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.InflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.OutflowTokenEndPrice.Size()
		i -= size
		if _, err := m.OutflowTokenEndPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.OutflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.OutflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OutflowTokenInitialPrice.Size()
		i -= size
		if _, err := m.OutflowTokenInitialPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.InflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.InflowTokenTargetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.OutflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutflowTokenInitAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollateralAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	if m.LockedVaultId != 0 {
		n += 1 + sovAuction(uint64(m.LockedVaultId))
	}
	l = m.AuctionedCollateral.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.DiscountQuantity.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.ActiveBiddingId != 0 {
		n += 1 + sovAuction(uint64(m.ActiveBiddingId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MinBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MaxBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.Pair.Size()
	n += 1 + l + sovAuction(uint64(l))
	if len(m.BiddingIds) > 0 {
		l = 0
		for _, e := range m.BiddingIds {
			l += sovAuction(uint64(e))
		}
		n += 1 + sovAuction(uint64(l)) + l
	}
	return n
}

func (m *DebtAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.AuctionedToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.ExpectedUserToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.ExpectedMintedToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.ActiveBiddingId != 0 {
		n += 1 + sovAuction(uint64(m.ActiveBiddingId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.CurrentBidAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.AuctionStatus != 0 {
		n += 1 + sovAuction(uint64(m.AuctionStatus))
	}
	return n
}

func (m *DutchAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.OutflowTokenInitAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenTargetAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenInitialPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenEndPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.AuctionStatus != 0 {
		n += 1 + sovAuction(uint64(m.AuctionStatus))
	}
	l = len(m.InflowTokenAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.OutflowTokenAddress)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollateralAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionedCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionedCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountQuantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DiscountQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBiddingId", wireType)
			}
			m.ActiveBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BiddingIds = append(m.BiddingIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAuction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAuction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BiddingIds) == 0 {
					m.BiddingIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BiddingIds = append(m.BiddingIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedUserToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedUserToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedMintedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedMintedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBiddingId", wireType)
			}
			m.ActiveBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutchAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutchAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutchAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenTargetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitialPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitialPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenEndPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenEndPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InflowTokenAddress = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutflowTokenAddress = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
