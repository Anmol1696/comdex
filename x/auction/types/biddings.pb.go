// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/biddings.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SurplusBiddings struct {
	BiddingId           uint64                                  `protobuf:"varint,1,opt,name=bidding_id,json=biddingId,proto3" json:"bidding_id,omitempty" yaml:"bidding_idd"`
	AuctionId           uint64                                  `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	AuctionStatus       string                                  `protobuf:"bytes,3,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	AuctionedCollateral github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=auctioned_collateral,json=auctionedCollateral,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"auctioned_collateral" yaml:"auctioned_collateral"`
	Bidder              string                                  `protobuf:"bytes,5,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Bid                 github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	BiddingTimestamp    time.Time                               `protobuf:"bytes,7,opt,name=bidding_timestamp,json=biddingTimestamp,proto3,stdtime" json:"bidding_timestamp" yaml:"bidding_timestamp"`
	BiddingStatus       string                                  `protobuf:"bytes,8,opt,name=bidding_status,json=biddingStatus,proto3" json:"bidding_status,omitempty" yaml:"bidding_status"`
	AuctionMappingId    uint64                                  `protobuf:"varint,9,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AppId               uint64                                  `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *SurplusBiddings) Reset()         { *m = SurplusBiddings{} }
func (m *SurplusBiddings) String() string { return proto.CompactTextString(m) }
func (*SurplusBiddings) ProtoMessage()    {}
func (*SurplusBiddings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5a3f4b8597bafd2, []int{0}
}
func (m *SurplusBiddings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SurplusBiddings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SurplusBiddings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SurplusBiddings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurplusBiddings.Merge(m, src)
}
func (m *SurplusBiddings) XXX_Size() int {
	return m.Size()
}
func (m *SurplusBiddings) XXX_DiscardUnknown() {
	xxx_messageInfo_SurplusBiddings.DiscardUnknown(m)
}

var xxx_messageInfo_SurplusBiddings proto.InternalMessageInfo

type DebtBiddings struct {
	BiddingId        uint64                                  `protobuf:"varint,1,opt,name=bidding_id,json=biddingId,proto3" json:"bidding_id,omitempty" yaml:"bidding_id"`
	AuctionId        uint64                                  `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	AuctionStatus    string                                  `protobuf:"bytes,3,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	OutflowTokens    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=OutflowTokens,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"OutflowTokens" yaml:"auctioned_collateral"`
	Bidder           string                                  `protobuf:"bytes,5,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Bid              github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	BiddingTimestamp time.Time                               `protobuf:"bytes,7,opt,name=bidding_timestamp,json=biddingTimestamp,proto3,stdtime" json:"bidding_timestamp" yaml:"bidding_timestamp"`
	BiddingStatus    string                                  `protobuf:"bytes,8,opt,name=bidding_status,json=biddingStatus,proto3" json:"bidding_status,omitempty" yaml:"bidding_status"`
	AuctionMappingId uint64                                  `protobuf:"varint,9,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AppId            uint64                                  `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *DebtBiddings) Reset()         { *m = DebtBiddings{} }
func (m *DebtBiddings) String() string { return proto.CompactTextString(m) }
func (*DebtBiddings) ProtoMessage()    {}
func (*DebtBiddings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5a3f4b8597bafd2, []int{1}
}
func (m *DebtBiddings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtBiddings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtBiddings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtBiddings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtBiddings.Merge(m, src)
}
func (m *DebtBiddings) XXX_Size() int {
	return m.Size()
}
func (m *DebtBiddings) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtBiddings.DiscardUnknown(m)
}

var xxx_messageInfo_DebtBiddings proto.InternalMessageInfo

type DutchBiddings struct {
	BiddingId          uint64                                  `protobuf:"varint,1,opt,name=bidding_id,json=biddingId,proto3" json:"bidding_id,omitempty" yaml:"bidding_id"`
	AuctionId          uint64                                  `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	AuctionStatus      string                                  `protobuf:"bytes,3,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	OutflowTokenAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=outflow_token_amount,json=outflowTokenAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_amount" yaml:"outflow_token_amount"`
	InflowTokenAmount  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=inflow_token_amount,json=inflowTokenAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_amount" yaml:"inflow_token_amount"`
	Bidder             string                                  `protobuf:"bytes,6,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	BiddingTimestamp   time.Time                               `protobuf:"bytes,7,opt,name=bidding_timestamp,json=biddingTimestamp,proto3,stdtime" json:"bidding_timestamp" yaml:"bidding_timestamp"`
	BiddingStatus      string                                  `protobuf:"bytes,8,opt,name=bidding_status,json=biddingStatus,proto3" json:"bidding_status,omitempty" yaml:"bidding_status"`
	AuctionMappingId   uint64                                  `protobuf:"varint,9,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AppId              uint64                                  `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *DutchBiddings) Reset()         { *m = DutchBiddings{} }
func (m *DutchBiddings) String() string { return proto.CompactTextString(m) }
func (*DutchBiddings) ProtoMessage()    {}
func (*DutchBiddings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5a3f4b8597bafd2, []int{2}
}
func (m *DutchBiddings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutchBiddings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutchBiddings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutchBiddings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutchBiddings.Merge(m, src)
}
func (m *DutchBiddings) XXX_Size() int {
	return m.Size()
}
func (m *DutchBiddings) XXX_DiscardUnknown() {
	xxx_messageInfo_DutchBiddings.DiscardUnknown(m)
}

var xxx_messageInfo_DutchBiddings proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SurplusBiddings)(nil), "comdex.auction.v1beta1.SurplusBiddings")
	proto.RegisterType((*DebtBiddings)(nil), "comdex.auction.v1beta1.DebtBiddings")
	proto.RegisterType((*DutchBiddings)(nil), "comdex.auction.v1beta1.DutchBiddings")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/biddings.proto", fileDescriptor_a5a3f4b8597bafd2)
}

var fileDescriptor_a5a3f4b8597bafd2 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xbf, 0xb6, 0xfe, 0xc8, 0x40, 0xa0, 0x99, 0xfe, 0xc8, 0x0d, 0xc2, 0xae, 0x2c, 0x10,
	0x61, 0x51, 0x5b, 0x85, 0xb2, 0x41, 0x42, 0x82, 0xb4, 0x9b, 0x08, 0x15, 0x24, 0xb7, 0x2b, 0x36,
	0xd1, 0xf8, 0x27, 0xe9, 0x50, 0xdb, 0x63, 0xc5, 0x63, 0xa0, 0x0f, 0x81, 0xe8, 0x12, 0x09, 0xc4,
	0x9a, 0x47, 0x29, 0xbb, 0x2e, 0x59, 0x19, 0x48, 0xdf, 0x20, 0x4b, 0x56, 0xc8, 0x33, 0x63, 0x3b,
	0x86, 0x4a, 0x25, 0x1b, 0x44, 0xa5, 0xae, 0xda, 0xb9, 0x3f, 0xe7, 0x9e, 0xdc, 0x7b, 0x8e, 0x64,
	0x70, 0xcb, 0x21, 0x81, 0xeb, 0xbd, 0x36, 0x51, 0xe2, 0x50, 0x4c, 0x42, 0xf3, 0xe5, 0xba, 0xed,
	0x51, 0xb4, 0x6e, 0xda, 0xd8, 0x75, 0x71, 0x38, 0x88, 0x8d, 0x68, 0x48, 0x28, 0x81, 0xcb, 0xbc,
	0xcc, 0x10, 0x65, 0x86, 0x28, 0x6b, 0x2d, 0x0e, 0xc8, 0x80, 0xb0, 0x12, 0x33, 0xfb, 0x8f, 0x57,
	0xb7, 0xb4, 0x01, 0x21, 0x03, 0xdf, 0x33, 0xd9, 0xcb, 0x4e, 0xfa, 0x26, 0xc5, 0x81, 0x17, 0x53,
	0x14, 0x44, 0xa2, 0x40, 0x75, 0x48, 0x1c, 0x90, 0xd8, 0xb4, 0x51, 0xec, 0x15, 0x23, 0x1d, 0x82,
	0x43, 0x9e, 0xd7, 0x3f, 0xca, 0xe0, 0xda, 0x4e, 0x32, 0x8c, 0xfc, 0x24, 0xee, 0x08, 0x22, 0xf0,
	0x3e, 0x00, 0x82, 0x54, 0x0f, 0xbb, 0x8a, 0xb4, 0x2a, 0xb5, 0x67, 0x3b, 0xcb, 0xe3, 0x54, 0x83,
	0x07, 0x28, 0xf0, 0x1f, 0xe8, 0x65, 0xce, 0xd5, 0xad, 0xba, 0x78, 0x75, 0x5d, 0xb8, 0x01, 0x80,
	0x20, 0x9d, 0xb5, 0xfd, 0xc7, 0xda, 0x96, 0xc6, 0xa9, 0xd6, 0xe4, 0x6d, 0x65, 0x4e, 0xb7, 0xea,
	0xe2, 0xd1, 0x75, 0xe1, 0x23, 0x70, 0x35, 0xcf, 0xc4, 0x14, 0xd1, 0x24, 0x56, 0x66, 0x56, 0xa5,
	0x76, 0xbd, 0xb3, 0x32, 0x4e, 0xb5, 0xa5, 0x6a, 0x27, 0xcf, 0xeb, 0x56, 0x43, 0x04, 0x76, 0xd8,
	0x1b, 0x7e, 0x90, 0xc0, 0xa2, 0x88, 0x78, 0x6e, 0xcf, 0x21, 0xbe, 0x8f, 0xa8, 0x37, 0x44, 0xbe,
	0x32, 0xbb, 0x2a, 0xb5, 0x2f, 0xdf, 0x5d, 0x31, 0xf8, 0x0a, 0x8c, 0x6c, 0x05, 0xf9, 0x3a, 0x8d,
	0x4d, 0x82, 0xc3, 0xce, 0xd3, 0xa3, 0x54, 0xab, 0x8d, 0x53, 0xed, 0x7a, 0x65, 0x4e, 0x05, 0x44,
	0xff, 0x91, 0x6a, 0xb7, 0x07, 0x98, 0xee, 0x25, 0xb6, 0xe1, 0x90, 0xc0, 0x14, 0xeb, 0xe4, 0x7f,
	0xd6, 0x62, 0x77, 0xdf, 0xa4, 0x07, 0x91, 0x17, 0x33, 0x3c, 0x6b, 0xa1, 0x40, 0xd8, 0x2c, 0x00,
	0xe0, 0x1d, 0x20, 0x67, 0x3b, 0xf2, 0x86, 0xca, 0x1c, 0xfb, 0x61, 0xcd, 0x71, 0xaa, 0x35, 0xca,
	0x4d, 0x7a, 0x43, 0xdd, 0x12, 0x05, 0xf0, 0x05, 0x98, 0xb1, 0xb1, 0xab, 0xc8, 0x67, 0xf1, 0x7e,
	0x28, 0x78, 0x83, 0x02, 0x66, 0x2a, 0x9a, 0xd9, 0x10, 0x18, 0x80, 0x66, 0x7e, 0xc8, 0x42, 0x33,
	0xca, 0xff, 0x6c, 0x72, 0xcb, 0xe0, 0xaa, 0x32, 0x72, 0x55, 0x19, 0xbb, 0x79, 0x45, 0xe7, 0xa6,
	0x18, 0xad, 0x54, 0xb5, 0x50, 0x40, 0xe8, 0x87, 0x5f, 0x35, 0xc9, 0x9a, 0x17, 0xf1, 0xa2, 0x2f,
	0x3b, 0x73, 0x5e, 0x2b, 0xce, 0x7c, 0xe9, 0xd7, 0x33, 0x57, 0xf3, 0xba, 0xd5, 0x10, 0x01, 0x71,
	0xe6, 0x27, 0x00, 0xe6, 0x42, 0x08, 0x50, 0x14, 0x09, 0x75, 0xd6, 0x99, 0xcc, 0x6e, 0x8c, 0x53,
	0x6d, 0xa5, 0x2a, 0x96, 0xb2, 0x46, 0xb7, 0xe6, 0x45, 0x70, 0x9b, 0xc7, 0xba, 0x2e, 0x6c, 0x03,
	0x19, 0x45, 0x51, 0x06, 0x00, 0x18, 0xc0, 0xc4, 0x51, 0x78, 0x5c, 0xb7, 0xe6, 0x50, 0x14, 0x75,
	0x5d, 0xfd, 0x8d, 0x0c, 0xae, 0x6c, 0x79, 0x36, 0x2d, 0xdc, 0xb1, 0x71, 0x8a, 0x3b, 0x26, 0x64,
	0x5e, 0xe6, 0xfe, 0x09, 0x73, 0xbc, 0x95, 0x40, 0xe3, 0x59, 0x42, 0xfb, 0x3e, 0x79, 0xb5, 0x4b,
	0xf6, 0xbd, 0x30, 0xfe, 0xfb, 0xae, 0xa8, 0xce, 0xbf, 0xf0, 0xc3, 0xf9, 0xf6, 0xc3, 0x67, 0x19,
	0x34, 0xb6, 0x12, 0xea, 0xec, 0x9d, 0x53, 0x43, 0xbc, 0x97, 0xc0, 0x22, 0xe1, 0x82, 0xec, 0xd1,
	0x4c, 0x91, 0x3d, 0x14, 0x90, 0x24, 0xa4, 0x53, 0xfb, 0xe2, 0x34, 0x90, 0xa9, 0x64, 0x07, 0xc9,
	0x84, 0x2f, 0x1e, 0xb3, 0x7e, 0xf8, 0x4e, 0x02, 0x0b, 0x38, 0xfc, 0x9d, 0xdc, 0xdc, 0x59, 0xe4,
	0xb6, 0x05, 0xb9, 0x16, 0x27, 0x77, 0x0a, 0xc6, 0x54, 0xdc, 0x9a, 0x1c, 0x60, 0x92, 0x5a, 0xe9,
	0x5b, 0xf9, 0x2c, 0xdf, 0x5e, 0x78, 0xe9, 0x8f, 0xbc, 0xd4, 0xd9, 0x39, 0xfa, 0xae, 0xd6, 0x3e,
	0x8d, 0xd4, 0xda, 0xd1, 0x48, 0x95, 0x8e, 0x47, 0xaa, 0xf4, 0x6d, 0xa4, 0x4a, 0x87, 0x27, 0x6a,
	0xed, 0xf8, 0x44, 0xad, 0x7d, 0x39, 0x51, 0x6b, 0xcf, 0xd7, 0x2b, 0x07, 0xcb, 0x3e, 0x0c, 0xd7,
	0x48, 0xbf, 0x8f, 0x1d, 0x8c, 0x7c, 0xf1, 0x36, 0xcb, 0x2f, 0x4a, 0x76, 0x3f, 0x5b, 0x66, 0x9b,
	0xbd, 0xf7, 0x33, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x7b, 0x9c, 0x14, 0x70, 0x0a, 0x00, 0x00,
}

func (m *SurplusBiddings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurplusBiddings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SurplusBiddings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x50
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BiddingStatus) > 0 {
		i -= len(m.BiddingStatus)
		copy(dAtA[i:], m.BiddingStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.BiddingStatus)))
		i--
		dAtA[i] = 0x42
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BiddingTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBiddings(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.AuctionedCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.AuctionStatus) > 0 {
		i -= len(m.AuctionStatus)
		copy(dAtA[i:], m.AuctionStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.AuctionStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.BiddingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.BiddingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebtBiddings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtBiddings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebtBiddings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x50
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BiddingStatus) > 0 {
		i -= len(m.BiddingStatus)
		copy(dAtA[i:], m.BiddingStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.BiddingStatus)))
		i--
		dAtA[i] = 0x42
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BiddingTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintBiddings(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.OutflowTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.AuctionStatus) > 0 {
		i -= len(m.AuctionStatus)
		copy(dAtA[i:], m.AuctionStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.AuctionStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.BiddingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.BiddingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DutchBiddings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutchBiddings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DutchBiddings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x50
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BiddingStatus) > 0 {
		i -= len(m.BiddingStatus)
		copy(dAtA[i:], m.BiddingStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.BiddingStatus)))
		i--
		dAtA[i] = 0x42
	}
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BiddingTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintBiddings(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x3a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.InflowTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.OutflowTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.AuctionStatus) > 0 {
		i -= len(m.AuctionStatus)
		copy(dAtA[i:], m.AuctionStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.AuctionStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuctionId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.BiddingId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.BiddingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBiddings(dAtA []byte, offset int, v uint64) int {
	offset -= sovBiddings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SurplusBiddings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BiddingId != 0 {
		n += 1 + sovBiddings(uint64(m.BiddingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionId))
	}
	l = len(m.AuctionStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.AuctionedCollateral.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp)
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.BiddingStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionMappingId))
	}
	if m.AppId != 0 {
		n += 1 + sovBiddings(uint64(m.AppId))
	}
	return n
}

func (m *DebtBiddings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BiddingId != 0 {
		n += 1 + sovBiddings(uint64(m.BiddingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionId))
	}
	l = len(m.AuctionStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.OutflowTokens.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp)
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.BiddingStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionMappingId))
	}
	if m.AppId != 0 {
		n += 1 + sovBiddings(uint64(m.AppId))
	}
	return n
}

func (m *DutchBiddings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BiddingId != 0 {
		n += 1 + sovBiddings(uint64(m.BiddingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionId))
	}
	l = len(m.AuctionStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.OutflowTokenAmount.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = m.InflowTokenAmount.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp)
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.BiddingStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionMappingId))
	}
	if m.AppId != 0 {
		n += 1 + sovBiddings(uint64(m.AppId))
	}
	return n
}

func sovBiddings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBiddings(x uint64) (n int) {
	return sovBiddings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SurplusBiddings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurplusBiddings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurplusBiddings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingId", wireType)
			}
			m.BiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionedCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionedCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BiddingTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBiddings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBiddings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtBiddings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtBiddings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtBiddings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingId", wireType)
			}
			m.BiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BiddingTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBiddings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBiddings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutchBiddings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutchBiddings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutchBiddings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingId", wireType)
			}
			m.BiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BiddingTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBiddings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBiddings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBiddings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBiddings
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBiddings
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBiddings
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBiddings        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBiddings          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBiddings = fmt.Errorf("proto: unexpected end of group")
)
