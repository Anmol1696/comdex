// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/msg.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPlaceBidRequest struct {
	AuctionId uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder    string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgPlaceBidRequest) Reset()         { *m = MsgPlaceBidRequest{} }
func (m *MsgPlaceBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBidRequest) ProtoMessage()    {}
func (*MsgPlaceBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{0}
}
func (m *MsgPlaceBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBidRequest.Merge(m, src)
}
func (m *MsgPlaceBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBidRequest proto.InternalMessageInfo

type MsgPlaceBidResponse struct {
}

func (m *MsgPlaceBidResponse) Reset()         { *m = MsgPlaceBidResponse{} }
func (m *MsgPlaceBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBidResponse) ProtoMessage()    {}
func (*MsgPlaceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{1}
}
func (m *MsgPlaceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBidResponse.Merge(m, src)
}
func (m *MsgPlaceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBidResponse proto.InternalMessageInfo

type MsgPlaceDebtBidRequest struct {
	AuctionId         uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder            string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Bid               types.Coin `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid"`
	ExpectedUserToken types.Coin `protobuf:"bytes,4,opt,name=expectedUserToken,proto3" json:"expectedUserToken"`
}

func (m *MsgPlaceDebtBidRequest) Reset()         { *m = MsgPlaceDebtBidRequest{} }
func (m *MsgPlaceDebtBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceDebtBidRequest) ProtoMessage()    {}
func (*MsgPlaceDebtBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{2}
}
func (m *MsgPlaceDebtBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceDebtBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceDebtBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceDebtBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceDebtBidRequest.Merge(m, src)
}
func (m *MsgPlaceDebtBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceDebtBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceDebtBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceDebtBidRequest proto.InternalMessageInfo

type MsgPlaceDebtBidResponse struct {
}

func (m *MsgPlaceDebtBidResponse) Reset()         { *m = MsgPlaceDebtBidResponse{} }
func (m *MsgPlaceDebtBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceDebtBidResponse) ProtoMessage()    {}
func (*MsgPlaceDebtBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{3}
}
func (m *MsgPlaceDebtBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceDebtBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceDebtBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceDebtBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceDebtBidResponse.Merge(m, src)
}
func (m *MsgPlaceDebtBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceDebtBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceDebtBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceDebtBidResponse proto.InternalMessageInfo

type MsgPlaceDutchBidRequest struct {
	AuctionId uint64                                 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder    string                                 `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount    types.Coin                             `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Max       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=max,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max" yaml:"max"`
}

func (m *MsgPlaceDutchBidRequest) Reset()         { *m = MsgPlaceDutchBidRequest{} }
func (m *MsgPlaceDutchBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceDutchBidRequest) ProtoMessage()    {}
func (*MsgPlaceDutchBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{4}
}
func (m *MsgPlaceDutchBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceDutchBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceDutchBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceDutchBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceDutchBidRequest.Merge(m, src)
}
func (m *MsgPlaceDutchBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceDutchBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceDutchBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceDutchBidRequest proto.InternalMessageInfo

type MsgPlaceDutchBidResponse struct {
}

func (m *MsgPlaceDutchBidResponse) Reset()         { *m = MsgPlaceDutchBidResponse{} }
func (m *MsgPlaceDutchBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceDutchBidResponse) ProtoMessage()    {}
func (*MsgPlaceDutchBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e59f645cf13bf48f, []int{5}
}
func (m *MsgPlaceDutchBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceDutchBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceDutchBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceDutchBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceDutchBidResponse.Merge(m, src)
}
func (m *MsgPlaceDutchBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceDutchBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceDutchBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceDutchBidResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPlaceBidRequest)(nil), "comdex.auction.v1beta1.MsgPlaceBidRequest")
	proto.RegisterType((*MsgPlaceBidResponse)(nil), "comdex.auction.v1beta1.MsgPlaceBidResponse")
	proto.RegisterType((*MsgPlaceDebtBidRequest)(nil), "comdex.auction.v1beta1.MsgPlaceDebtBidRequest")
	proto.RegisterType((*MsgPlaceDebtBidResponse)(nil), "comdex.auction.v1beta1.MsgPlaceDebtBidResponse")
	proto.RegisterType((*MsgPlaceDutchBidRequest)(nil), "comdex.auction.v1beta1.MsgPlaceDutchBidRequest")
	proto.RegisterType((*MsgPlaceDutchBidResponse)(nil), "comdex.auction.v1beta1.MsgPlaceDutchBidResponse")
}

func init() { proto.RegisterFile("comdex/auction/v1beta1/msg.proto", fileDescriptor_e59f645cf13bf48f) }

var fileDescriptor_e59f645cf13bf48f = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xb6, 0x51, 0xa4, 0x4c, 0x0f, 0xc0, 0x02, 0xc1, 0xb5, 0x84, 0x13, 0xf9, 0x80, 0x22,
	0x50, 0xd7, 0xa4, 0x1c, 0x90, 0x10, 0xa7, 0xd0, 0x0b, 0x87, 0x20, 0xe4, 0xc2, 0x85, 0x0b, 0xb2,
	0xd7, 0x13, 0x77, 0xd5, 0xd8, 0x1b, 0xbc, 0xeb, 0x2a, 0xbd, 0xf3, 0x01, 0x7c, 0x06, 0x9f, 0x92,
	0x63, 0xb9, 0x01, 0x87, 0x00, 0xc9, 0x1f, 0xf0, 0x05, 0xc8, 0xf1, 0x16, 0x9a, 0x06, 0xa9, 0x96,
	0x38, 0x70, 0x4a, 0x76, 0xe7, 0xcd, 0x7b, 0xf3, 0x3c, 0x4f, 0x0b, 0x5d, 0x2e, 0xd3, 0x18, 0xa7,
	0x7e, 0x58, 0x70, 0x2d, 0x64, 0xe6, 0x9f, 0xf4, 0x23, 0xd4, 0x61, 0xdf, 0x4f, 0x55, 0xc2, 0x26,
	0xb9, 0xd4, 0x92, 0xb6, 0x2b, 0x04, 0x33, 0x08, 0x66, 0x10, 0xce, 0xad, 0x44, 0x26, 0x72, 0x05,
	0xf1, 0xcb, 0x7f, 0x15, 0xda, 0x71, 0xb9, 0x54, 0xa9, 0x54, 0x7e, 0x14, 0x2a, 0xfc, 0x4d, 0xc6,
	0xa5, 0xc8, 0xaa, 0xba, 0xf7, 0x9e, 0x00, 0x1d, 0xaa, 0xe4, 0xe5, 0x38, 0xe4, 0x38, 0x10, 0x71,
	0x80, 0xef, 0x0a, 0x54, 0x9a, 0xde, 0x05, 0x30, 0xfc, 0x6f, 0x45, 0x6c, 0x93, 0x2e, 0xe9, 0x35,
	0x82, 0x96, 0xb9, 0x79, 0x1e, 0xd3, 0x36, 0x34, 0x23, 0x11, 0xc7, 0x98, 0xdb, 0x5b, 0x5d, 0xd2,
	0x6b, 0x05, 0xe6, 0x44, 0x1f, 0x43, 0x33, 0x4c, 0x65, 0x91, 0x69, 0x7b, 0xbb, 0x4b, 0x7a, 0x3b,
	0xfb, 0xbb, 0xac, 0x92, 0x67, 0xa5, 0xfc, 0xf9, 0xa4, 0xec, 0x99, 0x14, 0xd9, 0xa0, 0x31, 0x9b,
	0x77, 0xac, 0xc0, 0xc0, 0xbd, 0xdb, 0x70, 0x73, 0x6d, 0x0a, 0x35, 0x91, 0x99, 0x42, 0xef, 0x13,
	0x81, 0xf6, 0xf9, 0xfd, 0x01, 0x46, 0xfa, 0xdf, 0x27, 0xec, 0xc3, 0x76, 0x24, 0xe2, 0xba, 0xe3,
	0x95, 0x58, 0x3a, 0x84, 0x1b, 0x38, 0x9d, 0x20, 0xd7, 0x18, 0xbf, 0x56, 0x98, 0xbf, 0x92, 0xc7,
	0x98, 0xd9, 0x8d, 0x7a, 0x04, 0x9b, 0x9d, 0xde, 0x2e, 0xdc, 0xd9, 0xb0, 0x64, 0xec, 0x7e, 0x21,
	0x17, 0x6a, 0x85, 0xe6, 0x47, 0xff, 0x6f, 0x23, 0xf4, 0x05, 0x6c, 0xa7, 0xe1, 0x74, 0xe5, 0xb3,
	0x35, 0x78, 0x5a, 0x96, 0xbe, 0xce, 0x3b, 0xf7, 0x12, 0xa1, 0x8f, 0x8a, 0x88, 0x71, 0x99, 0xfa,
	0x26, 0x58, 0xd5, 0xcf, 0x9e, 0x8a, 0x8f, 0x7d, 0x7d, 0x3a, 0x41, 0xc5, 0x0e, 0x90, 0xff, 0x9c,
	0x77, 0xe0, 0x34, 0x4c, 0xc7, 0x4f, 0xbc, 0x34, 0x9c, 0x7a, 0x41, 0x49, 0xe4, 0x39, 0x60, 0x6f,
	0x5a, 0xab, 0x7c, 0xef, 0x7f, 0xdb, 0x02, 0x18, 0xaa, 0xe4, 0x10, 0xf3, 0x13, 0xc1, 0x91, 0x8e,
	0x60, 0xe7, 0x42, 0x18, 0xe8, 0x7d, 0xf6, 0xf7, 0xc4, 0xb3, 0xcd, 0xdc, 0x3a, 0x0f, 0x6a, 0x61,
	0x2b, 0x59, 0x9a, 0xc3, 0xb5, 0x4b, 0x9b, 0xa0, 0xec, 0xaa, 0xfe, 0xf5, 0x14, 0x3a, 0x7e, 0x6d,
	0xbc, 0xd1, 0x2c, 0xe0, 0xfa, 0xe5, 0xcf, 0x40, 0xaf, 0x26, 0x59, 0xcf, 0x82, 0xf3, 0xb0, 0x7e,
	0x43, 0x25, 0x3b, 0x38, 0x9c, 0xfd, 0x70, 0xad, 0x8f, 0x0b, 0xd7, 0x9a, 0x2d, 0x5c, 0x72, 0xb6,
	0x70, 0xc9, 0xf7, 0x85, 0x4b, 0x3e, 0x2c, 0x5d, 0xeb, 0x6c, 0xe9, 0x5a, 0x9f, 0x97, 0xae, 0xf5,
	0xa6, 0xbf, 0xb6, 0xda, 0x92, 0x7d, 0x4f, 0x8e, 0x46, 0x82, 0x8b, 0x70, 0x6c, 0xce, 0xfe, 0x9f,
	0x57, 0x69, 0xb5, 0xe9, 0xa8, 0xb9, 0x7a, 0x42, 0x1e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x17,
	0x88, 0xed, 0xf8, 0xb4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	MsgPlaceBid(ctx context.Context, in *MsgPlaceBidRequest, opts ...grpc.CallOption) (*MsgPlaceBidResponse, error)
	MsgPlaceDebtBid(ctx context.Context, in *MsgPlaceDebtBidRequest, opts ...grpc.CallOption) (*MsgPlaceDebtBidResponse, error)
	MsgPlaceDutchBid(ctx context.Context, in *MsgPlaceDutchBidRequest, opts ...grpc.CallOption) (*MsgPlaceDutchBidResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) MsgPlaceBid(ctx context.Context, in *MsgPlaceBidRequest, opts ...grpc.CallOption) (*MsgPlaceBidResponse, error) {
	out := new(MsgPlaceBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.MsgService/MsgPlaceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgPlaceDebtBid(ctx context.Context, in *MsgPlaceDebtBidRequest, opts ...grpc.CallOption) (*MsgPlaceDebtBidResponse, error) {
	out := new(MsgPlaceDebtBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.MsgService/MsgPlaceDebtBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgPlaceDutchBid(ctx context.Context, in *MsgPlaceDutchBidRequest, opts ...grpc.CallOption) (*MsgPlaceDutchBidResponse, error) {
	out := new(MsgPlaceDutchBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.MsgService/MsgPlaceDutchBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	MsgPlaceBid(context.Context, *MsgPlaceBidRequest) (*MsgPlaceBidResponse, error)
	MsgPlaceDebtBid(context.Context, *MsgPlaceDebtBidRequest) (*MsgPlaceDebtBidResponse, error)
	MsgPlaceDutchBid(context.Context, *MsgPlaceDutchBidRequest) (*MsgPlaceDutchBidResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) MsgPlaceBid(ctx context.Context, req *MsgPlaceBidRequest) (*MsgPlaceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgPlaceBid not implemented")
}
func (*UnimplementedMsgServiceServer) MsgPlaceDebtBid(ctx context.Context, req *MsgPlaceDebtBidRequest) (*MsgPlaceDebtBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgPlaceDebtBid not implemented")
}
func (*UnimplementedMsgServiceServer) MsgPlaceDutchBid(ctx context.Context, req *MsgPlaceDutchBidRequest) (*MsgPlaceDutchBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgPlaceDutchBid not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_MsgPlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgPlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.MsgService/MsgPlaceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgPlaceBid(ctx, req.(*MsgPlaceBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgPlaceDebtBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceDebtBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgPlaceDebtBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.MsgService/MsgPlaceDebtBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgPlaceDebtBid(ctx, req.(*MsgPlaceDebtBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgPlaceDutchBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceDutchBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgPlaceDutchBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.MsgService/MsgPlaceDutchBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgPlaceDutchBid(ctx, req.(*MsgPlaceDutchBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.auction.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgPlaceBid",
			Handler:    _MsgService_MsgPlaceBid_Handler,
		},
		{
			MethodName: "MsgPlaceDebtBid",
			Handler:    _MsgService_MsgPlaceDebtBid_Handler,
		},
		{
			MethodName: "MsgPlaceDutchBid",
			Handler:    _MsgService_MsgPlaceDutchBid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/auction/v1beta1/msg.proto",
}

func (m *MsgPlaceBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPlaceDebtBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceDebtBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceDebtBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpectedUserToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceDebtBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceDebtBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceDebtBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPlaceDutchBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceDutchBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceDutchBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Max.Size()
		i -= size
		if _, err := m.Max.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceDutchBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceDutchBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceDutchBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPlaceBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovMsg(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgPlaceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPlaceDebtBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovMsg(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.ExpectedUserToken.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgPlaceDebtBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPlaceDutchBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovMsg(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Max.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgPlaceDutchBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPlaceBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceDebtBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceDebtBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceDebtBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedUserToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedUserToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceDebtBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceDebtBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceDebtBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceDutchBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceDutchBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceDutchBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceDutchBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceDutchBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceDutchBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
