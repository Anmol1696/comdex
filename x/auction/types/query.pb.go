// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySurplusAuctionRequest struct {
	AppId            uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AuctionMappingId uint64 `protobuf:"varint,2,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty"`
	AuctionId        uint64 `protobuf:"varint,3,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	History          bool   `protobuf:"varint,4,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QuerySurplusAuctionRequest) Reset()         { *m = QuerySurplusAuctionRequest{} }
func (m *QuerySurplusAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusAuctionRequest) ProtoMessage()    {}
func (*QuerySurplusAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{0}
}
func (m *QuerySurplusAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusAuctionRequest.Merge(m, src)
}
func (m *QuerySurplusAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusAuctionRequest proto.InternalMessageInfo

type QuerySurplusAuctionResponse struct {
	Auction SurplusAuction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction" yaml:"auction"`
}

func (m *QuerySurplusAuctionResponse) Reset()         { *m = QuerySurplusAuctionResponse{} }
func (m *QuerySurplusAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusAuctionResponse) ProtoMessage()    {}
func (*QuerySurplusAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{1}
}
func (m *QuerySurplusAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusAuctionResponse.Merge(m, src)
}
func (m *QuerySurplusAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusAuctionResponse proto.InternalMessageInfo

type QuerySurplusAuctionsRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History    bool               `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QuerySurplusAuctionsRequest) Reset()         { *m = QuerySurplusAuctionsRequest{} }
func (m *QuerySurplusAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusAuctionsRequest) ProtoMessage()    {}
func (*QuerySurplusAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{2}
}
func (m *QuerySurplusAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusAuctionsRequest.Merge(m, src)
}
func (m *QuerySurplusAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusAuctionsRequest proto.InternalMessageInfo

type QuerySurplusAuctionsResponse struct {
	Auctions   []SurplusAuction    `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions" yaml:"auctions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QuerySurplusAuctionsResponse) Reset()         { *m = QuerySurplusAuctionsResponse{} }
func (m *QuerySurplusAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusAuctionsResponse) ProtoMessage()    {}
func (*QuerySurplusAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{3}
}
func (m *QuerySurplusAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusAuctionsResponse.Merge(m, src)
}
func (m *QuerySurplusAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusAuctionsResponse proto.InternalMessageInfo

type QuerySurplusBiddingsRequest struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	AppId   uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History bool   `protobuf:"varint,3,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QuerySurplusBiddingsRequest) Reset()         { *m = QuerySurplusBiddingsRequest{} }
func (m *QuerySurplusBiddingsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusBiddingsRequest) ProtoMessage()    {}
func (*QuerySurplusBiddingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{4}
}
func (m *QuerySurplusBiddingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusBiddingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusBiddingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusBiddingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusBiddingsRequest.Merge(m, src)
}
func (m *QuerySurplusBiddingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusBiddingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusBiddingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusBiddingsRequest proto.InternalMessageInfo

type QuerySurplusBiddingsResponse struct {
	Bidder   string            `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Biddings []SurplusBiddings `protobuf:"bytes,2,rep,name=biddings,proto3" json:"biddings" yaml:"biddings"`
}

func (m *QuerySurplusBiddingsResponse) Reset()         { *m = QuerySurplusBiddingsResponse{} }
func (m *QuerySurplusBiddingsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySurplusBiddingsResponse) ProtoMessage()    {}
func (*QuerySurplusBiddingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{5}
}
func (m *QuerySurplusBiddingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySurplusBiddingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySurplusBiddingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySurplusBiddingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySurplusBiddingsResponse.Merge(m, src)
}
func (m *QuerySurplusBiddingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySurplusBiddingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySurplusBiddingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySurplusBiddingsResponse proto.InternalMessageInfo

type QueryDebtAuctionRequest struct {
	AppId            uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AuctionMappingId uint64 `protobuf:"varint,2,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty"`
	AuctionId        uint64 `protobuf:"varint,3,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	History          bool   `protobuf:"varint,4,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QueryDebtAuctionRequest) Reset()         { *m = QueryDebtAuctionRequest{} }
func (m *QueryDebtAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDebtAuctionRequest) ProtoMessage()    {}
func (*QueryDebtAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{6}
}
func (m *QueryDebtAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtAuctionRequest.Merge(m, src)
}
func (m *QueryDebtAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtAuctionRequest proto.InternalMessageInfo

type QueryDebtAuctionResponse struct {
	Auction DebtAuction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction" yaml:"auction"`
}

func (m *QueryDebtAuctionResponse) Reset()         { *m = QueryDebtAuctionResponse{} }
func (m *QueryDebtAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDebtAuctionResponse) ProtoMessage()    {}
func (*QueryDebtAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{7}
}
func (m *QueryDebtAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtAuctionResponse.Merge(m, src)
}
func (m *QueryDebtAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtAuctionResponse proto.InternalMessageInfo

type QueryDebtAuctionsRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History    bool               `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryDebtAuctionsRequest) Reset()         { *m = QueryDebtAuctionsRequest{} }
func (m *QueryDebtAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDebtAuctionsRequest) ProtoMessage()    {}
func (*QueryDebtAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{8}
}
func (m *QueryDebtAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtAuctionsRequest.Merge(m, src)
}
func (m *QueryDebtAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtAuctionsRequest proto.InternalMessageInfo

type QueryDebtAuctionsResponse struct {
	Auctions   []DebtAuction       `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions" yaml:"auctions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryDebtAuctionsResponse) Reset()         { *m = QueryDebtAuctionsResponse{} }
func (m *QueryDebtAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDebtAuctionsResponse) ProtoMessage()    {}
func (*QueryDebtAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{9}
}
func (m *QueryDebtAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtAuctionsResponse.Merge(m, src)
}
func (m *QueryDebtAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtAuctionsResponse proto.InternalMessageInfo

type QueryDebtBiddingsRequest struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	AppId   uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History bool   `protobuf:"varint,3,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QueryDebtBiddingsRequest) Reset()         { *m = QueryDebtBiddingsRequest{} }
func (m *QueryDebtBiddingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDebtBiddingsRequest) ProtoMessage()    {}
func (*QueryDebtBiddingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{10}
}
func (m *QueryDebtBiddingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtBiddingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtBiddingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtBiddingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtBiddingsRequest.Merge(m, src)
}
func (m *QueryDebtBiddingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtBiddingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtBiddingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtBiddingsRequest proto.InternalMessageInfo

type QueryDebtBiddingsResponse struct {
	Bidder   string         `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Biddings []DebtBiddings `protobuf:"bytes,2,rep,name=biddings,proto3" json:"biddings" yaml:"biddings"`
}

func (m *QueryDebtBiddingsResponse) Reset()         { *m = QueryDebtBiddingsResponse{} }
func (m *QueryDebtBiddingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDebtBiddingsResponse) ProtoMessage()    {}
func (*QueryDebtBiddingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{11}
}
func (m *QueryDebtBiddingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebtBiddingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebtBiddingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebtBiddingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebtBiddingsResponse.Merge(m, src)
}
func (m *QueryDebtBiddingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebtBiddingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebtBiddingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebtBiddingsResponse proto.InternalMessageInfo

type QueryDutchAuctionRequest struct {
	AppId            uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AuctionMappingId uint64 `protobuf:"varint,2,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty"`
	AuctionId        uint64 `protobuf:"varint,3,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	History          bool   `protobuf:"varint,4,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QueryDutchAuctionRequest) Reset()         { *m = QueryDutchAuctionRequest{} }
func (m *QueryDutchAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDutchAuctionRequest) ProtoMessage()    {}
func (*QueryDutchAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{12}
}
func (m *QueryDutchAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchAuctionRequest.Merge(m, src)
}
func (m *QueryDutchAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchAuctionRequest proto.InternalMessageInfo

type QueryDutchAuctionResponse struct {
	Auction DutchAuction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction" yaml:"auction"`
}

func (m *QueryDutchAuctionResponse) Reset()         { *m = QueryDutchAuctionResponse{} }
func (m *QueryDutchAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDutchAuctionResponse) ProtoMessage()    {}
func (*QueryDutchAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{13}
}
func (m *QueryDutchAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchAuctionResponse.Merge(m, src)
}
func (m *QueryDutchAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchAuctionResponse proto.InternalMessageInfo

type QueryDutchAuctionsRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History    bool               `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryDutchAuctionsRequest) Reset()         { *m = QueryDutchAuctionsRequest{} }
func (m *QueryDutchAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDutchAuctionsRequest) ProtoMessage()    {}
func (*QueryDutchAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{14}
}
func (m *QueryDutchAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchAuctionsRequest.Merge(m, src)
}
func (m *QueryDutchAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchAuctionsRequest proto.InternalMessageInfo

type QueryDutchAuctionsResponse struct {
	Auctions   []DutchAuction      `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions" yaml:"auctions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryDutchAuctionsResponse) Reset()         { *m = QueryDutchAuctionsResponse{} }
func (m *QueryDutchAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDutchAuctionsResponse) ProtoMessage()    {}
func (*QueryDutchAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{15}
}
func (m *QueryDutchAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchAuctionsResponse.Merge(m, src)
}
func (m *QueryDutchAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchAuctionsResponse proto.InternalMessageInfo

type QueryDutchBiddingsRequest struct {
	Bidder  string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	AppId   uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	History bool   `protobuf:"varint,3,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QueryDutchBiddingsRequest) Reset()         { *m = QueryDutchBiddingsRequest{} }
func (m *QueryDutchBiddingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDutchBiddingsRequest) ProtoMessage()    {}
func (*QueryDutchBiddingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{16}
}
func (m *QueryDutchBiddingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchBiddingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchBiddingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchBiddingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchBiddingsRequest.Merge(m, src)
}
func (m *QueryDutchBiddingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchBiddingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchBiddingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchBiddingsRequest proto.InternalMessageInfo

type QueryDutchBiddingsResponse struct {
	Bidder   string          `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Biddings []DutchBiddings `protobuf:"bytes,2,rep,name=biddings,proto3" json:"biddings" yaml:"biddings"`
}

func (m *QueryDutchBiddingsResponse) Reset()         { *m = QueryDutchBiddingsResponse{} }
func (m *QueryDutchBiddingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDutchBiddingsResponse) ProtoMessage()    {}
func (*QueryDutchBiddingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{17}
}
func (m *QueryDutchBiddingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDutchBiddingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDutchBiddingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDutchBiddingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDutchBiddingsResponse.Merge(m, src)
}
func (m *QueryDutchBiddingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDutchBiddingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDutchBiddingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDutchBiddingsResponse proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{18}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff4a64a3f291f95, []int{19}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QuerySurplusAuctionRequest)(nil), "comdex.auction.v1beta1.QuerySurplusAuctionRequest")
	proto.RegisterType((*QuerySurplusAuctionResponse)(nil), "comdex.auction.v1beta1.QuerySurplusAuctionResponse")
	proto.RegisterType((*QuerySurplusAuctionsRequest)(nil), "comdex.auction.v1beta1.QuerySurplusAuctionsRequest")
	proto.RegisterType((*QuerySurplusAuctionsResponse)(nil), "comdex.auction.v1beta1.QuerySurplusAuctionsResponse")
	proto.RegisterType((*QuerySurplusBiddingsRequest)(nil), "comdex.auction.v1beta1.QuerySurplusBiddingsRequest")
	proto.RegisterType((*QuerySurplusBiddingsResponse)(nil), "comdex.auction.v1beta1.QuerySurplusBiddingsResponse")
	proto.RegisterType((*QueryDebtAuctionRequest)(nil), "comdex.auction.v1beta1.QueryDebtAuctionRequest")
	proto.RegisterType((*QueryDebtAuctionResponse)(nil), "comdex.auction.v1beta1.QueryDebtAuctionResponse")
	proto.RegisterType((*QueryDebtAuctionsRequest)(nil), "comdex.auction.v1beta1.QueryDebtAuctionsRequest")
	proto.RegisterType((*QueryDebtAuctionsResponse)(nil), "comdex.auction.v1beta1.QueryDebtAuctionsResponse")
	proto.RegisterType((*QueryDebtBiddingsRequest)(nil), "comdex.auction.v1beta1.QueryDebtBiddingsRequest")
	proto.RegisterType((*QueryDebtBiddingsResponse)(nil), "comdex.auction.v1beta1.QueryDebtBiddingsResponse")
	proto.RegisterType((*QueryDutchAuctionRequest)(nil), "comdex.auction.v1beta1.QueryDutchAuctionRequest")
	proto.RegisterType((*QueryDutchAuctionResponse)(nil), "comdex.auction.v1beta1.QueryDutchAuctionResponse")
	proto.RegisterType((*QueryDutchAuctionsRequest)(nil), "comdex.auction.v1beta1.QueryDutchAuctionsRequest")
	proto.RegisterType((*QueryDutchAuctionsResponse)(nil), "comdex.auction.v1beta1.QueryDutchAuctionsResponse")
	proto.RegisterType((*QueryDutchBiddingsRequest)(nil), "comdex.auction.v1beta1.QueryDutchBiddingsRequest")
	proto.RegisterType((*QueryDutchBiddingsResponse)(nil), "comdex.auction.v1beta1.QueryDutchBiddingsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.auction.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.auction.v1beta1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/query.proto", fileDescriptor_5ff4a64a3f291f95)
}

var fileDescriptor_5ff4a64a3f291f95 = []byte{
	// 1111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5d, 0x6b, 0x1c, 0x55,
	0x18, 0xde, 0xb3, 0x69, 0xd3, 0xf4, 0x94, 0xda, 0xe6, 0x98, 0xa4, 0xeb, 0x5a, 0x27, 0xe1, 0xf4,
	0xd3, 0xaa, 0x3b, 0xee, 0x56, 0x50, 0x83, 0x60, 0x3b, 0x55, 0x30, 0x48, 0xa1, 0x4e, 0x51, 0x4c,
	0x63, 0x2d, 0xb3, 0x3b, 0x93, 0xc9, 0x40, 0x76, 0x67, 0xb2, 0x33, 0xab, 0x86, 0x90, 0x1b, 0x7f,
	0x80, 0x08, 0x5e, 0x28, 0xde, 0x89, 0x17, 0x8a, 0xe2, 0x0f, 0xf0, 0xc2, 0x1b, 0x41, 0xc9, 0x95,
	0x14, 0x44, 0x14, 0x0a, 0x41, 0x93, 0xe2, 0x0f, 0xc8, 0x2f, 0x90, 0x39, 0xe7, 0x3d, 0xb3, 0xf3,
	0xb9, 0x33, 0x63, 0x28, 0xec, 0x5d, 0xf6, 0xec, 0xfb, 0xf1, 0x3c, 0xcf, 0xfb, 0x3e, 0x33, 0x27,
	0x8b, 0x69, 0xc7, 0xee, 0xea, 0xc6, 0x47, 0xb2, 0x36, 0xe8, 0x78, 0x96, 0xdd, 0x93, 0x3f, 0x68,
	0xb6, 0x0d, 0x4f, 0x6b, 0xca, 0x1b, 0x03, 0xa3, 0xbf, 0xd9, 0x70, 0xfa, 0xb6, 0x67, 0x93, 0x39,
	0x1e, 0xd3, 0x80, 0x98, 0x06, 0xc4, 0xd4, 0x67, 0x4c, 0xdb, 0xb4, 0x59, 0x88, 0xec, 0xff, 0xc5,
	0xa3, 0xeb, 0x67, 0x4d, 0xdb, 0x36, 0xd7, 0x0d, 0x59, 0x73, 0x2c, 0x59, 0xeb, 0xf5, 0x6c, 0x4f,
	0xf3, 0x93, 0x5c, 0xf8, 0xf6, 0x5c, 0x46, 0x3f, 0x47, 0xeb, 0x6b, 0x5d, 0x11, 0x74, 0x3e, 0x23,
	0x48, 0x00, 0xe0, 0x51, 0x17, 0x32, 0xa2, 0xda, 0x96, 0xae, 0x5b, 0x3d, 0x53, 0x14, 0xbb, 0xd2,
	0xb1, 0xdd, 0xae, 0xed, 0xca, 0x6d, 0xcd, 0x35, 0x38, 0xad, 0x50, 0x53, 0xd3, 0xea, 0x69, 0xc3,
	0x92, 0xf4, 0x4b, 0x84, 0xeb, 0x6f, 0xf9, 0x21, 0xb7, 0x07, 0x7d, 0x67, 0x7d, 0xe0, 0x5e, 0xe7,
	0xa5, 0x55, 0x63, 0x63, 0x60, 0xb8, 0x1e, 0x99, 0xc5, 0x93, 0x9a, 0xe3, 0xdc, 0xb3, 0xf4, 0x1a,
	0x5a, 0x40, 0x97, 0x8f, 0xa8, 0x47, 0x35, 0xc7, 0x59, 0xd2, 0xc9, 0xb3, 0x98, 0x00, 0x86, 0x7b,
	0x5d, 0xcd, 0x71, 0xac, 0x9e, 0xe9, 0x87, 0x54, 0x59, 0xc8, 0x69, 0xf8, 0xe6, 0x26, 0xff, 0x62,
	0x49, 0x27, 0x4f, 0x61, 0x2c, 0xa2, 0x2d, 0xbd, 0x36, 0xc1, 0xa2, 0x8e, 0xc3, 0xc9, 0x92, 0x4e,
	0x6a, 0xf8, 0xd8, 0x9a, 0xe5, 0x7a, 0x76, 0x7f, 0xb3, 0x76, 0x64, 0x01, 0x5d, 0x9e, 0x52, 0xc5,
	0x47, 0xfa, 0x21, 0x7e, 0x32, 0x15, 0x9b, 0xeb, 0xd8, 0x3d, 0xd7, 0x20, 0xef, 0xe2, 0x63, 0x50,
	0x85, 0xa1, 0x3b, 0xd1, 0xba, 0xd8, 0x48, 0x9f, 0x5b, 0x23, 0x5a, 0x40, 0x99, 0xdb, 0xd9, 0x9d,
	0xaf, 0x1c, 0xec, 0xce, 0x3f, 0xb6, 0xa9, 0x75, 0xd7, 0x17, 0x29, 0x44, 0x53, 0x55, 0x94, 0xa3,
	0x3f, 0xa0, 0xd4, 0xce, 0x6e, 0x8e, 0x2c, 0x21, 0x26, 0xd5, 0x08, 0x13, 0x72, 0x17, 0xe3, 0xa1,
	0xf4, 0x4c, 0x02, 0x8e, 0xd6, 0x9f, 0x53, 0xc3, 0x9f, 0x53, 0x83, 0xaf, 0x9f, 0x00, 0x7c, 0x4b,
	0x33, 0x0d, 0x68, 0xa6, 0xcc, 0x1e, 0xec, 0xce, 0x4f, 0x73, 0xa4, 0xc3, 0x1a, 0x54, 0x0d, 0x15,
	0xa4, 0x0f, 0x10, 0x3e, 0x9b, 0x8e, 0x17, 0xa4, 0x5a, 0xc1, 0x53, 0xc0, 0xcd, 0xad, 0xa1, 0x85,
	0x89, 0x12, 0x5a, 0x9d, 0x01, 0xad, 0x4e, 0x45, 0xb4, 0x72, 0xa9, 0x1a, 0x14, 0x24, 0xef, 0x47,
	0xc8, 0x55, 0x19, 0xb9, 0x4b, 0xb9, 0xe4, 0x38, 0xb2, 0x22, 0xec, 0x56, 0xa3, 0xc3, 0x50, 0x60,
	0xdb, 0xc5, 0x30, 0xe6, 0xf0, 0xa4, 0x6f, 0x00, 0xa3, 0xcf, 0x86, 0x71, 0x5c, 0x85, 0x4f, 0xa1,
	0x21, 0x55, 0x33, 0x86, 0x34, 0x11, 0x5d, 0xb7, 0x6f, 0x62, 0x2a, 0x0e, 0x1b, 0x81, 0x8a, 0x4f,
	0x47, 0x3b, 0x29, 0xd3, 0x07, 0xbb, 0xf3, 0x27, 0x39, 0x76, 0x7e, 0x4e, 0x83, 0xe6, 0xef, 0xe1,
	0x29, 0xe1, 0xca, 0x5a, 0x95, 0x09, 0x7e, 0x29, 0x47, 0x70, 0xd1, 0x2d, 0xae, 0xb8, 0x28, 0x43,
	0xd5, 0xa0, 0x22, 0xfd, 0x1c, 0xe1, 0x33, 0x0c, 0xe9, 0x6b, 0x46, 0xdb, 0x1b, 0x2b, 0xcb, 0x6e,
	0xe0, 0x5a, 0x12, 0x18, 0xc8, 0xf7, 0x76, 0xdc, 0xaf, 0xe7, 0xb2, 0x24, 0x09, 0x65, 0xe7, 0x9b,
	0xf5, 0x3b, 0x94, 0xec, 0x39, 0xb6, 0x4e, 0xfd, 0x03, 0xe1, 0x27, 0x52, 0xc0, 0x06, 0x4f, 0xb4,
	0xb8, 0x4d, 0x0b, 0x49, 0x34, 0x06, 0x1e, 0xed, 0x84, 0x66, 0xf0, 0xc8, 0x0c, 0xfa, 0x55, 0x58,
	0xbc, 0xc3, 0xb8, 0x73, 0x39, 0xe1, 0xce, 0xf3, 0xa3, 0x74, 0x2e, 0x63, 0xcd, 0x2f, 0x82, 0x6d,
	0x1c, 0x78, 0x9d, 0xb5, 0xb1, 0xf2, 0xa6, 0x2b, 0xd4, 0x8b, 0x20, 0x03, 0xf5, 0xde, 0x89, 0x9b,
	0x33, 0x5b, 0x91, 0x50, 0x7a, 0xbe, 0x3b, 0xbf, 0x47, 0x29, 0x5d, 0xc7, 0xd6, 0x9e, 0x7f, 0x8a,
	0xeb, 0x50, 0x0c, 0x2d, 0x88, 0xb4, 0x9c, 0xf0, 0x67, 0x31, 0x95, 0xc6, 0xc0, 0xa0, 0x7a, 0x78,
	0x0c, 0x8f, 0xcc, 0xa1, 0x5f, 0x47, 0xf4, 0x3b, 0x8c, 0x45, 0xef, 0x24, 0x2c, 0x7a, 0x61, 0xa4,
	0xd4, 0x65, 0x3c, 0x3a, 0x83, 0x09, 0x03, 0x79, 0x8b, 0x5d, 0xc1, 0x41, 0x04, 0xaa, 0xe3, 0xc7,
	0x23, 0xa7, 0x80, 0xf9, 0x26, 0x9e, 0xe4, 0x57, 0x75, 0xf0, 0x85, 0x94, 0x05, 0x83, 0xe7, 0x29,
	0xb3, 0xd0, 0xff, 0xa4, 0x98, 0x87, 0x7f, 0x4a, 0x55, 0x28, 0xd2, 0xfa, 0xf7, 0x14, 0x3e, 0xca,
	0xda, 0x90, 0x7d, 0x04, 0x0d, 0xa3, 0x37, 0x2e, 0xd2, 0xca, 0x6a, 0x90, 0x7d, 0x4f, 0xaf, 0x5f,
	0x2d, 0x95, 0xc3, 0x99, 0xd1, 0xce, 0xc7, 0xbf, 0x3f, 0xfc, 0xac, 0x7a, 0x97, 0xac, 0xc8, 0x19,
	0xff, 0x57, 0xb8, 0x3c, 0x4f, 0x1c, 0x6f, 0xf1, 0x5d, 0xd8, 0x96, 0xb7, 0x92, 0x4f, 0xab, 0xd0,
	0x21, 0xfb, 0x00, 0x0b, 0xb1, 0x4d, 0x7e, 0x41, 0x78, 0x26, 0xed, 0x6a, 0x4a, 0xca, 0x40, 0x16,
	0x33, 0xaa, 0xbf, 0x50, 0x2e, 0x09, 0x88, 0x2a, 0x8c, 0xe8, 0x2b, 0x64, 0xb1, 0x18, 0x51, 0x37,
	0xc4, 0x34, 0xe0, 0xf1, 0x5b, 0x8c, 0x87, 0xd8, 0xb7, 0x62, 0x3c, 0x62, 0x86, 0x2b, 0xc6, 0x23,
	0x6e, 0x1f, 0xfa, 0x26, 0xe3, 0xf1, 0x3a, 0xb9, 0x91, 0xc3, 0x43, 0x2c, 0xba, 0xbc, 0xc5, 0xcd,
	0xb4, 0x9d, 0x46, 0xe8, 0x21, 0xc2, 0xa7, 0xe3, 0x37, 0x11, 0x22, 0x8f, 0xc4, 0x95, 0xbc, 0x6d,
	0xd6, 0x9f, 0x2f, 0x9e, 0x00, 0x24, 0xba, 0x8c, 0x84, 0x49, 0x8c, 0x2c, 0x12, 0xba, 0xd1, 0xf6,
	0x86, 0x2b, 0x17, 0x5e, 0xaa, 0xff, 0xb3, 0x7f, 0x3f, 0x22, 0x3c, 0x9d, 0xb8, 0x70, 0x91, 0xc2,
	0xb0, 0x83, 0x89, 0x35, 0x4b, 0x64, 0x00, 0xd3, 0x57, 0x19, 0xd3, 0x97, 0xc9, 0x8b, 0x05, 0x98,
	0xa6, 0xee, 0xdc, 0xcf, 0x61, 0xec, 0xc1, 0xc2, 0xe5, 0x63, 0x8f, 0x6f, 0x5b, 0xb3, 0x44, 0x06,
	0x60, 0x7f, 0x83, 0x61, 0x57, 0xc8, 0xb5, 0x51, 0xd8, 0x0b, 0xed, 0xd9, 0x83, 0x80, 0x44, 0xe8,
	0x8d, 0x98, 0x47, 0x22, 0x79, 0x77, 0xca, 0x23, 0x91, 0x72, 0xa7, 0xa1, 0x1a, 0x23, 0xb1, 0x42,
	0x96, 0x33, 0x49, 0xf8, 0x59, 0x87, 0x7a, 0xbc, 0xfd, 0x84, 0xe0, 0x5d, 0x12, 0xb9, 0x30, 0x90,
	0xe2, 0x60, 0x83, 0x21, 0xb5, 0xca, 0xa4, 0x00, 0xc1, 0x6b, 0x8c, 0xe0, 0x22, 0x79, 0xa9, 0x08,
	0xc1, 0xd4, 0x15, 0xfb, 0x35, 0x82, 0x3f, 0xd8, 0xb1, 0x02, 0xf8, 0xe3, 0x4b, 0xd6, 0x2a, 0x93,
	0x02, 0xf8, 0x97, 0x18, 0xfe, 0x1b, 0xe4, 0xfa, 0x48, 0xfc, 0x85, 0xd6, 0xec, 0x13, 0x84, 0x4f,
	0x84, 0x5e, 0xdf, 0xe4, 0xca, 0x48, 0x38, 0x91, 0x37, 0x7f, 0xfd, 0x99, 0x42, 0xb1, 0x80, 0xf9,
	0x22, 0xc3, 0xbc, 0x40, 0x24, 0x79, 0xe4, 0x0f, 0x7b, 0xca, 0xed, 0x9d, 0x7f, 0xa4, 0xca, 0xb7,
	0x7b, 0x52, 0x65, 0x67, 0x4f, 0x42, 0xf7, 0xf7, 0x24, 0xf4, 0xf7, 0x9e, 0x84, 0x3e, 0xdd, 0x97,
	0x2a, 0xf7, 0xf7, 0xa5, 0xca, 0x5f, 0xfb, 0x52, 0xe5, 0x4e, 0xd3, 0xb4, 0xbc, 0xb5, 0x41, 0xdb,
	0x6f, 0x0e, 0xb5, 0x9e, 0xb3, 0x57, 0x57, 0xad, 0x8e, 0xa5, 0xad, 0x8b, 0xda, 0xc3, 0xea, 0xde,
	0xa6, 0x63, 0xb8, 0xed, 0x49, 0xf6, 0xab, 0xdd, 0xd5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5,
	0x95, 0x6f, 0x73, 0xc5, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QuerySurplusAuction(ctx context.Context, in *QuerySurplusAuctionRequest, opts ...grpc.CallOption) (*QuerySurplusAuctionResponse, error)
	QuerySurplusAuctions(ctx context.Context, in *QuerySurplusAuctionsRequest, opts ...grpc.CallOption) (*QuerySurplusAuctionsResponse, error)
	QuerySurplusBiddings(ctx context.Context, in *QuerySurplusBiddingsRequest, opts ...grpc.CallOption) (*QuerySurplusBiddingsResponse, error)
	QueryDebtAuction(ctx context.Context, in *QueryDebtAuctionRequest, opts ...grpc.CallOption) (*QueryDebtAuctionResponse, error)
	QueryDebtAuctions(ctx context.Context, in *QueryDebtAuctionsRequest, opts ...grpc.CallOption) (*QueryDebtAuctionsResponse, error)
	QueryDebtBiddings(ctx context.Context, in *QueryDebtBiddingsRequest, opts ...grpc.CallOption) (*QueryDebtBiddingsResponse, error)
	QueryDutchAuction(ctx context.Context, in *QueryDutchAuctionRequest, opts ...grpc.CallOption) (*QueryDutchAuctionResponse, error)
	QueryDutchAuctions(ctx context.Context, in *QueryDutchAuctionsRequest, opts ...grpc.CallOption) (*QueryDutchAuctionsResponse, error)
	QueryDutchBiddings(ctx context.Context, in *QueryDutchBiddingsRequest, opts ...grpc.CallOption) (*QueryDutchBiddingsResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QuerySurplusAuction(ctx context.Context, in *QuerySurplusAuctionRequest, opts ...grpc.CallOption) (*QuerySurplusAuctionResponse, error) {
	out := new(QuerySurplusAuctionResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QuerySurplusAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySurplusAuctions(ctx context.Context, in *QuerySurplusAuctionsRequest, opts ...grpc.CallOption) (*QuerySurplusAuctionsResponse, error) {
	out := new(QuerySurplusAuctionsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QuerySurplusAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySurplusBiddings(ctx context.Context, in *QuerySurplusBiddingsRequest, opts ...grpc.CallOption) (*QuerySurplusBiddingsResponse, error) {
	out := new(QuerySurplusBiddingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QuerySurplusBiddings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDebtAuction(ctx context.Context, in *QueryDebtAuctionRequest, opts ...grpc.CallOption) (*QueryDebtAuctionResponse, error) {
	out := new(QueryDebtAuctionResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDebtAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDebtAuctions(ctx context.Context, in *QueryDebtAuctionsRequest, opts ...grpc.CallOption) (*QueryDebtAuctionsResponse, error) {
	out := new(QueryDebtAuctionsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDebtAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDebtBiddings(ctx context.Context, in *QueryDebtBiddingsRequest, opts ...grpc.CallOption) (*QueryDebtBiddingsResponse, error) {
	out := new(QueryDebtBiddingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDebtBiddings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDutchAuction(ctx context.Context, in *QueryDutchAuctionRequest, opts ...grpc.CallOption) (*QueryDutchAuctionResponse, error) {
	out := new(QueryDutchAuctionResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDutchAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDutchAuctions(ctx context.Context, in *QueryDutchAuctionsRequest, opts ...grpc.CallOption) (*QueryDutchAuctionsResponse, error) {
	out := new(QueryDutchAuctionsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDutchAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDutchBiddings(ctx context.Context, in *QueryDutchBiddingsRequest, opts ...grpc.CallOption) (*QueryDutchBiddingsResponse, error) {
	out := new(QueryDutchBiddingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryDutchBiddings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auction.v1beta1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QuerySurplusAuction(context.Context, *QuerySurplusAuctionRequest) (*QuerySurplusAuctionResponse, error)
	QuerySurplusAuctions(context.Context, *QuerySurplusAuctionsRequest) (*QuerySurplusAuctionsResponse, error)
	QuerySurplusBiddings(context.Context, *QuerySurplusBiddingsRequest) (*QuerySurplusBiddingsResponse, error)
	QueryDebtAuction(context.Context, *QueryDebtAuctionRequest) (*QueryDebtAuctionResponse, error)
	QueryDebtAuctions(context.Context, *QueryDebtAuctionsRequest) (*QueryDebtAuctionsResponse, error)
	QueryDebtBiddings(context.Context, *QueryDebtBiddingsRequest) (*QueryDebtBiddingsResponse, error)
	QueryDutchAuction(context.Context, *QueryDutchAuctionRequest) (*QueryDutchAuctionResponse, error)
	QueryDutchAuctions(context.Context, *QueryDutchAuctionsRequest) (*QueryDutchAuctionsResponse, error)
	QueryDutchBiddings(context.Context, *QueryDutchBiddingsRequest) (*QueryDutchBiddingsResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QuerySurplusAuction(ctx context.Context, req *QuerySurplusAuctionRequest) (*QuerySurplusAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySurplusAuction not implemented")
}
func (*UnimplementedQueryServer) QuerySurplusAuctions(ctx context.Context, req *QuerySurplusAuctionsRequest) (*QuerySurplusAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySurplusAuctions not implemented")
}
func (*UnimplementedQueryServer) QuerySurplusBiddings(ctx context.Context, req *QuerySurplusBiddingsRequest) (*QuerySurplusBiddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySurplusBiddings not implemented")
}
func (*UnimplementedQueryServer) QueryDebtAuction(ctx context.Context, req *QueryDebtAuctionRequest) (*QueryDebtAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDebtAuction not implemented")
}
func (*UnimplementedQueryServer) QueryDebtAuctions(ctx context.Context, req *QueryDebtAuctionsRequest) (*QueryDebtAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDebtAuctions not implemented")
}
func (*UnimplementedQueryServer) QueryDebtBiddings(ctx context.Context, req *QueryDebtBiddingsRequest) (*QueryDebtBiddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDebtBiddings not implemented")
}
func (*UnimplementedQueryServer) QueryDutchAuction(ctx context.Context, req *QueryDutchAuctionRequest) (*QueryDutchAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDutchAuction not implemented")
}
func (*UnimplementedQueryServer) QueryDutchAuctions(ctx context.Context, req *QueryDutchAuctionsRequest) (*QueryDutchAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDutchAuctions not implemented")
}
func (*UnimplementedQueryServer) QueryDutchBiddings(ctx context.Context, req *QueryDutchBiddingsRequest) (*QueryDutchBiddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDutchBiddings not implemented")
}
func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QuerySurplusAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySurplusAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySurplusAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QuerySurplusAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySurplusAuction(ctx, req.(*QuerySurplusAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySurplusAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySurplusAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySurplusAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QuerySurplusAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySurplusAuctions(ctx, req.(*QuerySurplusAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySurplusBiddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySurplusBiddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySurplusBiddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QuerySurplusBiddings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySurplusBiddings(ctx, req.(*QuerySurplusBiddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDebtAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebtAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDebtAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDebtAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDebtAuction(ctx, req.(*QueryDebtAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDebtAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebtAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDebtAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDebtAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDebtAuctions(ctx, req.(*QueryDebtAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDebtBiddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebtBiddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDebtBiddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDebtBiddings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDebtBiddings(ctx, req.(*QueryDebtBiddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDutchAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDutchAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDutchAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDutchAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDutchAuction(ctx, req.(*QueryDutchAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDutchAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDutchAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDutchAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDutchAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDutchAuctions(ctx, req.(*QueryDutchAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDutchBiddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDutchBiddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDutchBiddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryDutchBiddings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDutchBiddings(ctx, req.(*QueryDutchBiddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auction.v1beta1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.auction.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuerySurplusAuction",
			Handler:    _Query_QuerySurplusAuction_Handler,
		},
		{
			MethodName: "QuerySurplusAuctions",
			Handler:    _Query_QuerySurplusAuctions_Handler,
		},
		{
			MethodName: "QuerySurplusBiddings",
			Handler:    _Query_QuerySurplusBiddings_Handler,
		},
		{
			MethodName: "QueryDebtAuction",
			Handler:    _Query_QueryDebtAuction_Handler,
		},
		{
			MethodName: "QueryDebtAuctions",
			Handler:    _Query_QueryDebtAuctions_Handler,
		},
		{
			MethodName: "QueryDebtBiddings",
			Handler:    _Query_QueryDebtBiddings_Handler,
		},
		{
			MethodName: "QueryDutchAuction",
			Handler:    _Query_QueryDutchAuction_Handler,
		},
		{
			MethodName: "QueryDutchAuctions",
			Handler:    _Query_QueryDutchAuctions_Handler,
		},
		{
			MethodName: "QueryDutchBiddings",
			Handler:    _Query_QueryDutchBiddings_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/auction/v1beta1/query.proto",
}

func (m *QuerySurplusAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySurplusAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySurplusAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySurplusAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySurplusBiddingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusBiddingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusBiddingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySurplusBiddingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySurplusBiddingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySurplusBiddingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Biddings) > 0 {
		for iNdEx := len(m.Biddings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Biddings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebtAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebtAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDebtAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebtAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebtBiddingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtBiddingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtBiddingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebtBiddingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebtBiddingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebtBiddingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Biddings) > 0 {
		for iNdEx := len(m.Biddings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Biddings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDutchAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDutchAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDutchAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDutchAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDutchBiddingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchBiddingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchBiddingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDutchBiddingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDutchBiddingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDutchBiddingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Biddings) > 0 {
		for iNdEx := len(m.Biddings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Biddings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySurplusAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionMappingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QuerySurplusAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySurplusAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySurplusAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySurplusBiddingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QuerySurplusBiddingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Biddings) > 0 {
		for _, e := range m.Biddings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDebtAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionMappingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QueryDebtAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDebtAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDebtAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDebtBiddingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QueryDebtBiddingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Biddings) > 0 {
		for _, e := range m.Biddings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDutchAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionMappingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QueryDutchAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDutchAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDutchAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDutchBiddingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QueryDutchBiddingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Biddings) > 0 {
		for _, e := range m.Biddings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySurplusAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySurplusAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySurplusAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySurplusAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, SurplusAuction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySurplusBiddingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusBiddingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusBiddingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySurplusBiddingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySurplusBiddingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySurplusBiddingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biddings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biddings = append(m.Biddings, SurplusBiddings{})
			if err := m.Biddings[len(m.Biddings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, DebtAuction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtBiddingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtBiddingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtBiddingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebtBiddingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebtBiddingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebtBiddingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biddings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biddings = append(m.Biddings, DebtBiddings{})
			if err := m.Biddings[len(m.Biddings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, DutchAuction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchBiddingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchBiddingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchBiddingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDutchBiddingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDutchBiddingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDutchBiddingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biddings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biddings = append(m.Biddings, DutchBiddings{})
			if err := m.Biddings[len(m.Biddings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
