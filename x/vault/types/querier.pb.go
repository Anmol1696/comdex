// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/vault/v1beta1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VaultInfo struct {
	Id                     uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PairID                 uint64                                 `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Owner                  string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Collateral             types.Coin                             `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral" yaml:"collateral"`
	Debt                   types.Coin                             `protobuf:"bytes,5,opt,name=debt,proto3" json:"debt" yaml:"debt"`
	CollateralizationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=collateralization_ratio,json=collateralizationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateralization_ratio" yaml:"collateralization_ratio"`
}

func (m *VaultInfo) Reset()         { *m = VaultInfo{} }
func (m *VaultInfo) String() string { return proto.CompactTextString(m) }
func (*VaultInfo) ProtoMessage()    {}
func (*VaultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{0}
}
func (m *VaultInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultInfo.Merge(m, src)
}
func (m *VaultInfo) XXX_Size() int {
	return m.Size()
}
func (m *VaultInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VaultInfo proto.InternalMessageInfo

type QueryVaultRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryVaultRequest) Reset()         { *m = QueryVaultRequest{} }
func (m *QueryVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultRequest) ProtoMessage()    {}
func (*QueryVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{1}
}
func (m *QueryVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultRequest.Merge(m, src)
}
func (m *QueryVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultRequest proto.InternalMessageInfo

type QueryVaultResponse struct {
	Vault Vault `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault" yaml:"vault"`
}

func (m *QueryVaultResponse) Reset()         { *m = QueryVaultResponse{} }
func (m *QueryVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultResponse) ProtoMessage()    {}
func (*QueryVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{2}
}
func (m *QueryVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultResponse.Merge(m, src)
}
func (m *QueryVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultResponse proto.InternalMessageInfo

type QueryAllVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsRequest) Reset()         { *m = QueryAllVaultsRequest{} }
func (m *QueryAllVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsRequest) ProtoMessage()    {}
func (*QueryAllVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{3}
}
func (m *QueryAllVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsRequest.Merge(m, src)
}
func (m *QueryAllVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsRequest proto.InternalMessageInfo

type QueryAllVaultsResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsResponse) Reset()         { *m = QueryAllVaultsResponse{} }
func (m *QueryAllVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsResponse) ProtoMessage()    {}
func (*QueryAllVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{4}
}
func (m *QueryAllVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsResponse.Merge(m, src)
}
func (m *QueryAllVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsResponse proto.InternalMessageInfo

type QueryVaultOfOwnerByPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Owner          string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ExtendedPairId uint64             `protobuf:"varint,3,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultOfOwnerByPairRequest) Reset()         { *m = QueryVaultOfOwnerByPairRequest{} }
func (m *QueryVaultOfOwnerByPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultOfOwnerByPairRequest) ProtoMessage()    {}
func (*QueryVaultOfOwnerByPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{5}
}
func (m *QueryVaultOfOwnerByPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultOfOwnerByPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultOfOwnerByPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultOfOwnerByPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultOfOwnerByPairRequest.Merge(m, src)
}
func (m *QueryVaultOfOwnerByPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultOfOwnerByPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultOfOwnerByPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultOfOwnerByPairRequest proto.InternalMessageInfo

type QueryVaultOfOwnerByPairResponse struct {
	Vault_Id string `protobuf:"bytes,1,opt,name=vault_Id,json=vaultId,proto3" json:"vault_Id,omitempty" yaml:"vault_Id"`
}

func (m *QueryVaultOfOwnerByPairResponse) Reset()         { *m = QueryVaultOfOwnerByPairResponse{} }
func (m *QueryVaultOfOwnerByPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultOfOwnerByPairResponse) ProtoMessage()    {}
func (*QueryVaultOfOwnerByPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{6}
}
func (m *QueryVaultOfOwnerByPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultOfOwnerByPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultOfOwnerByPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultOfOwnerByPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultOfOwnerByPairResponse.Merge(m, src)
}
func (m *QueryVaultOfOwnerByPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultOfOwnerByPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultOfOwnerByPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultOfOwnerByPairResponse proto.InternalMessageInfo

type QueryVaultByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultByProductRequest) Reset()         { *m = QueryVaultByProductRequest{} }
func (m *QueryVaultByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByProductRequest) ProtoMessage()    {}
func (*QueryVaultByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{7}
}
func (m *QueryVaultByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByProductRequest.Merge(m, src)
}
func (m *QueryVaultByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByProductRequest proto.InternalMessageInfo

type QueryVaultByProductResponse struct {
	Vault_Ids []string `protobuf:"bytes,1,rep,name=vault_Ids,json=vaultIds,proto3" json:"vault_Ids,omitempty" yaml:"vault_Ids"`
}

func (m *QueryVaultByProductResponse) Reset()         { *m = QueryVaultByProductResponse{} }
func (m *QueryVaultByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByProductResponse) ProtoMessage()    {}
func (*QueryVaultByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{8}
}
func (m *QueryVaultByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByProductResponse.Merge(m, src)
}
func (m *QueryVaultByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByProductResponse proto.InternalMessageInfo

type QueryAllVaultByProductsRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultByProductsRequest) Reset()         { *m = QueryAllVaultByProductsRequest{} }
func (m *QueryAllVaultByProductsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultByProductsRequest) ProtoMessage()    {}
func (*QueryAllVaultByProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{9}
}
func (m *QueryAllVaultByProductsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultByProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultByProductsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultByProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultByProductsRequest.Merge(m, src)
}
func (m *QueryAllVaultByProductsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultByProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultByProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultByProductsRequest proto.InternalMessageInfo

type QueryAllVaultByProductsResponse struct {
	Vault_Ids []string `protobuf:"bytes,1,rep,name=vault_Ids,json=vaultIds,proto3" json:"vault_Ids,omitempty" yaml:"vault_Ids"`
}

func (m *QueryAllVaultByProductsResponse) Reset()         { *m = QueryAllVaultByProductsResponse{} }
func (m *QueryAllVaultByProductsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultByProductsResponse) ProtoMessage()    {}
func (*QueryAllVaultByProductsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{10}
}
func (m *QueryAllVaultByProductsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultByProductsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultByProductsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultByProductsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultByProductsResponse.Merge(m, src)
}
func (m *QueryAllVaultByProductsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultByProductsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultByProductsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultByProductsResponse proto.InternalMessageInfo

type QueryTokenMintedAllProductsByPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedAllProductsByPairRequest) Reset() {
	*m = QueryTokenMintedAllProductsByPairRequest{}
}
func (m *QueryTokenMintedAllProductsByPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAllProductsByPairRequest) ProtoMessage()    {}
func (*QueryTokenMintedAllProductsByPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{11}
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest proto.InternalMessageInfo

type QueryTokenMintedAllProductsByPairResponse struct {
	Token_Minted *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_Minted,json=tokenMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_Minted,omitempty" yaml:"token_Minted"`
}

func (m *QueryTokenMintedAllProductsByPairResponse) Reset() {
	*m = QueryTokenMintedAllProductsByPairResponse{}
}
func (m *QueryTokenMintedAllProductsByPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedAllProductsByPairResponse) ProtoMessage() {}
func (*QueryTokenMintedAllProductsByPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{12}
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse proto.InternalMessageInfo

type QueryTokenMintedAllProductsRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedAllProductsRequest) Reset()         { *m = QueryTokenMintedAllProductsRequest{} }
func (m *QueryTokenMintedAllProductsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAllProductsRequest) ProtoMessage()    {}
func (*QueryTokenMintedAllProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{13}
}
func (m *QueryTokenMintedAllProductsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsRequest.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsRequest proto.InternalMessageInfo

type QueryTokenMintedAllProductsResponse struct {
	Token_Minted *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_Minted,json=tokenMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_Minted,omitempty" yaml:"token_Minted"`
}

func (m *QueryTokenMintedAllProductsResponse) Reset()         { *m = QueryTokenMintedAllProductsResponse{} }
func (m *QueryTokenMintedAllProductsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAllProductsResponse) ProtoMessage()    {}
func (*QueryTokenMintedAllProductsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{14}
}
func (m *QueryTokenMintedAllProductsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsResponse.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsResponse proto.InternalMessageInfo

type QueryVaultCountByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultCountByProductRequest) Reset()         { *m = QueryVaultCountByProductRequest{} }
func (m *QueryVaultCountByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductRequest) ProtoMessage()    {}
func (*QueryVaultCountByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{15}
}
func (m *QueryVaultCountByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductRequest.Merge(m, src)
}
func (m *QueryVaultCountByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductRequest proto.InternalMessageInfo

type QueryVaultCountByProductResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByProductResponse) Reset()         { *m = QueryVaultCountByProductResponse{} }
func (m *QueryVaultCountByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductResponse) ProtoMessage()    {}
func (*QueryVaultCountByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{16}
}
func (m *QueryVaultCountByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductResponse.Merge(m, src)
}
func (m *QueryVaultCountByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductResponse proto.InternalMessageInfo

type QueryVaultCountByProductAndPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultCountByProductAndPairRequest) Reset() {
	*m = QueryVaultCountByProductAndPairRequest{}
}
func (m *QueryVaultCountByProductAndPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductAndPairRequest) ProtoMessage()    {}
func (*QueryVaultCountByProductAndPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{17}
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductAndPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductAndPairRequest.Merge(m, src)
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductAndPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductAndPairRequest proto.InternalMessageInfo

type QueryVaultCountByProductAndPairResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByProductAndPairResponse) Reset() {
	*m = QueryVaultCountByProductAndPairResponse{}
}
func (m *QueryVaultCountByProductAndPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductAndPairResponse) ProtoMessage()    {}
func (*QueryVaultCountByProductAndPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{18}
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductAndPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductAndPairResponse.Merge(m, src)
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductAndPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductAndPairResponse proto.InternalMessageInfo

type QueryTotalValueLockedByProductExtendedPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Reset() {
	*m = QueryTotalValueLockedByProductExtendedPairRequest{}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByProductExtendedPairRequest) ProtoMessage() {}
func (*QueryTotalValueLockedByProductExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{19}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.Merge(m, src)
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest proto.InternalMessageInfo

type QueryTotalValueLockedByProductExtendedPairResponse struct {
	ValueLocked *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=value_locked,json=valueLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"value_locked,omitempty"`
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Reset() {
	*m = QueryTotalValueLockedByProductExtendedPairResponse{}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByProductExtendedPairResponse) ProtoMessage() {}
func (*QueryTotalValueLockedByProductExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{20}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.Merge(m, src)
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairIDByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairIDByProductRequest) Reset()         { *m = QueryExtendedPairIDByProductRequest{} }
func (m *QueryExtendedPairIDByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDByProductRequest) ProtoMessage()    {}
func (*QueryExtendedPairIDByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{21}
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDByProductRequest.Merge(m, src)
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDByProductRequest proto.InternalMessageInfo

type QueryExtendedPairIDByProductResponse struct {
	ExtendedPairIds []uint64 `protobuf:"varint,1,rep,packed,name=extended_pair_ids,json=extendedPairIds,proto3" json:"extended_pair_ids,omitempty" yaml:"extended_pair_ids"`
}

func (m *QueryExtendedPairIDByProductResponse) Reset()         { *m = QueryExtendedPairIDByProductResponse{} }
func (m *QueryExtendedPairIDByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDByProductResponse) ProtoMessage()    {}
func (*QueryExtendedPairIDByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{22}
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDByProductResponse.Merge(m, src)
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDByProductResponse proto.InternalMessageInfo

type QueryStableVaultInfoRequest struct {
	StableVaultId string `protobuf:"bytes,1,opt,name=stable_vault_id,json=stableVaultId,proto3" json:"stable_vault_id,omitempty" yaml:"stable_vault_id"`
}

func (m *QueryStableVaultInfoRequest) Reset()         { *m = QueryStableVaultInfoRequest{} }
func (m *QueryStableVaultInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultInfoRequest) ProtoMessage()    {}
func (*QueryStableVaultInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{23}
}
func (m *QueryStableVaultInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultInfoRequest.Merge(m, src)
}
func (m *QueryStableVaultInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultInfoRequest proto.InternalMessageInfo

type QueryStableVaultInfoResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultInfoResponse) Reset()         { *m = QueryStableVaultInfoResponse{} }
func (m *QueryStableVaultInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultInfoResponse) ProtoMessage()    {}
func (*QueryStableVaultInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{24}
}
func (m *QueryStableVaultInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultInfoResponse.Merge(m, src)
}
func (m *QueryStableVaultInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultInfoResponse proto.InternalMessageInfo

type QueryAllStableVaultsRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryAllStableVaultsRequest) Reset()         { *m = QueryAllStableVaultsRequest{} }
func (m *QueryAllStableVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStableVaultsRequest) ProtoMessage()    {}
func (*QueryAllStableVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{25}
}
func (m *QueryAllStableVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStableVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStableVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStableVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStableVaultsRequest.Merge(m, src)
}
func (m *QueryAllStableVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStableVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStableVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStableVaultsRequest proto.InternalMessageInfo

type QueryAllStableVaultsResponse struct {
	StableMintVault []*StableMintVault `protobuf:"bytes,1,rep,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryAllStableVaultsResponse) Reset()         { *m = QueryAllStableVaultsResponse{} }
func (m *QueryAllStableVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStableVaultsResponse) ProtoMessage()    {}
func (*QueryAllStableVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{26}
}
func (m *QueryAllStableVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStableVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStableVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStableVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStableVaultsResponse.Merge(m, src)
}
func (m *QueryAllStableVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStableVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStableVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStableVaultsResponse proto.InternalMessageInfo

type QueryStableVaultByProductExtendedPairRequest struct {
	AppId          uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
}

func (m *QueryStableVaultByProductExtendedPairRequest) Reset() {
	*m = QueryStableVaultByProductExtendedPairRequest{}
}
func (m *QueryStableVaultByProductExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByProductExtendedPairRequest) ProtoMessage() {}
func (*QueryStableVaultByProductExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{27}
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.Merge(m, src)
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest proto.InternalMessageInfo

type QueryStableVaultByProductExtendedPairResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultByProductExtendedPairResponse) Reset() {
	*m = QueryStableVaultByProductExtendedPairResponse{}
}
func (m *QueryStableVaultByProductExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByProductExtendedPairResponse) ProtoMessage() {}
func (*QueryStableVaultByProductExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3453303216b6f983, []int{28}
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.Merge(m, src)
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VaultInfo)(nil), "comdex.vault.v1beta1.VaultInfo")
	proto.RegisterType((*QueryVaultRequest)(nil), "comdex.vault.v1beta1.QueryVaultRequest")
	proto.RegisterType((*QueryVaultResponse)(nil), "comdex.vault.v1beta1.QueryVaultResponse")
	proto.RegisterType((*QueryAllVaultsRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultsRequest")
	proto.RegisterType((*QueryAllVaultsResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultsResponse")
	proto.RegisterType((*QueryVaultOfOwnerByPairRequest)(nil), "comdex.vault.v1beta1.QueryVaultOfOwnerByPairRequest")
	proto.RegisterType((*QueryVaultOfOwnerByPairResponse)(nil), "comdex.vault.v1beta1.QueryVaultOfOwnerByPairResponse")
	proto.RegisterType((*QueryVaultByProductRequest)(nil), "comdex.vault.v1beta1.QueryVaultByProductRequest")
	proto.RegisterType((*QueryVaultByProductResponse)(nil), "comdex.vault.v1beta1.QueryVaultByProductResponse")
	proto.RegisterType((*QueryAllVaultByProductsRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultByProductsRequest")
	proto.RegisterType((*QueryAllVaultByProductsResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultByProductsResponse")
	proto.RegisterType((*QueryTokenMintedAllProductsByPairRequest)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsByPairRequest")
	proto.RegisterType((*QueryTokenMintedAllProductsByPairResponse)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsByPairResponse")
	proto.RegisterType((*QueryTokenMintedAllProductsRequest)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsRequest")
	proto.RegisterType((*QueryTokenMintedAllProductsResponse)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsResponse")
	proto.RegisterType((*QueryVaultCountByProductRequest)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductRequest")
	proto.RegisterType((*QueryVaultCountByProductResponse)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductResponse")
	proto.RegisterType((*QueryVaultCountByProductAndPairRequest)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductAndPairRequest")
	proto.RegisterType((*QueryVaultCountByProductAndPairResponse)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductAndPairResponse")
	proto.RegisterType((*QueryTotalValueLockedByProductExtendedPairRequest)(nil), "comdex.vault.v1beta1.QueryTotalValueLockedByProductExtendedPairRequest")
	proto.RegisterType((*QueryTotalValueLockedByProductExtendedPairResponse)(nil), "comdex.vault.v1beta1.QueryTotalValueLockedByProductExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairIDByProductRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairIDByProductRequest")
	proto.RegisterType((*QueryExtendedPairIDByProductResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairIDByProductResponse")
	proto.RegisterType((*QueryStableVaultInfoRequest)(nil), "comdex.vault.v1beta1.QueryStableVaultInfoRequest")
	proto.RegisterType((*QueryStableVaultInfoResponse)(nil), "comdex.vault.v1beta1.QueryStableVaultInfoResponse")
	proto.RegisterType((*QueryAllStableVaultsRequest)(nil), "comdex.vault.v1beta1.QueryAllStableVaultsRequest")
	proto.RegisterType((*QueryAllStableVaultsResponse)(nil), "comdex.vault.v1beta1.QueryAllStableVaultsResponse")
	proto.RegisterType((*QueryStableVaultByProductExtendedPairRequest)(nil), "comdex.vault.v1beta1.QueryStableVaultByProductExtendedPairRequest")
	proto.RegisterType((*QueryStableVaultByProductExtendedPairResponse)(nil), "comdex.vault.v1beta1.QueryStableVaultByProductExtendedPairResponse")
}

func init() {
	proto.RegisterFile("comdex/vault/v1beta1/querier.proto", fileDescriptor_3453303216b6f983)
}

var fileDescriptor_3453303216b6f983 = []byte{
	// 1714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcf, 0x6f, 0xd4, 0xc6,
	0x17, 0x8f, 0x9d, 0x1f, 0x90, 0x49, 0x08, 0x64, 0x12, 0x92, 0x65, 0xc9, 0x77, 0x1d, 0x06, 0x08,
	0x81, 0x2f, 0x5e, 0x37, 0x29, 0x50, 0x4a, 0x81, 0x2a, 0x0e, 0x08, 0x56, 0x2a, 0x22, 0xb8, 0x51,
	0x54, 0x51, 0x60, 0xe5, 0x5d, 0x3b, 0xa9, 0x85, 0x63, 0x2f, 0x6b, 0x6f, 0x4a, 0x1a, 0xe5, 0xd2,
	0x56, 0x95, 0x4a, 0x0f, 0x80, 0x7a, 0xec, 0xa1, 0x1c, 0x2a, 0xb5, 0xd7, 0x5e, 0xaa, 0xb6, 0x52,
	0x0f, 0xdc, 0xb8, 0x54, 0x42, 0xea, 0xa1, 0x15, 0x95, 0xac, 0x36, 0xf0, 0x17, 0xec, 0x1f, 0x50,
	0x55, 0x9e, 0x19, 0x7b, 0xbd, 0x1b, 0xdb, 0xeb, 0x4d, 0x42, 0x5b, 0xc4, 0x29, 0x5e, 0xcf, 0xbc,
	0xcf, 0xbc, 0xcf, 0xe7, 0xbd, 0x37, 0x33, 0xcf, 0x01, 0xa8, 0x68, 0x2e, 0x2a, 0xea, 0x6d, 0x61,
	0x49, 0xae, 0xe8, 0xb6, 0xb0, 0x34, 0x51, 0x50, 0x6d, 0x79, 0x42, 0xb8, 0x55, 0x51, 0xcb, 0x9a,
	0x5a, 0xce, 0x96, 0xca, 0xa6, 0x6d, 0xc2, 0x41, 0x32, 0x27, 0x8b, 0xe7, 0x64, 0xe9, 0x9c, 0xf4,
	0x91, 0xa2, 0x69, 0x2d, 0x9a, 0x96, 0x50, 0x90, 0x2d, 0x15, 0x1b, 0x2c, 0xfb, 0xe6, 0x25, 0x79,
	0x41, 0x33, 0x64, 0x5b, 0x33, 0x0d, 0x82, 0x90, 0x1e, 0x5c, 0x30, 0x17, 0x4c, 0xfc, 0x28, 0xb8,
	0x4f, 0xf4, 0xed, 0xc8, 0x82, 0x69, 0x2e, 0xe8, 0xaa, 0x20, 0x97, 0x34, 0x41, 0x36, 0x0c, 0xd3,
	0xc6, 0x26, 0x16, 0x1d, 0xcd, 0x04, 0xf1, 0x3d, 0xe4, 0xa2, 0xa9, 0x79, 0x98, 0xa3, 0xa1, 0x9e,
	0x13, 0x1f, 0xf1, 0x0c, 0xf4, 0xa0, 0x1d, 0x74, 0xcf, 0xb9, 0xbf, 0x73, 0xc6, 0xbc, 0x09, 0xfb,
	0x00, 0xab, 0x29, 0x29, 0x66, 0x94, 0x19, 0xef, 0x90, 0x58, 0x4d, 0x81, 0xc7, 0xc1, 0xb6, 0x92,
	0xac, 0x95, 0xf3, 0x9a, 0x92, 0x62, 0xdd, 0x97, 0xe2, 0xc8, 0x9a, 0xc3, 0x75, 0xcd, 0xc8, 0x5a,
	0x39, 0x77, 0xae, 0xea, 0x70, 0x7d, 0xcb, 0xf2, 0xa2, 0x7e, 0x0a, 0xd1, 0x29, 0x48, 0xea, 0x72,
	0x9f, 0x72, 0x0a, 0x1c, 0x03, 0x9d, 0xe6, 0xfb, 0x86, 0x5a, 0x4e, 0xb5, 0x8f, 0x32, 0xe3, 0xdd,
	0xe2, 0xae, 0xaa, 0xc3, 0xf5, 0x92, 0xa9, 0xf8, 0x35, 0x92, 0xc8, 0x30, 0x9c, 0x05, 0xa0, 0x68,
	0xea, 0xba, 0x6c, 0xab, 0x65, 0x59, 0x4f, 0x75, 0x8c, 0x32, 0xe3, 0x3d, 0x93, 0x7b, 0xb2, 0x84,
	0x53, 0xd6, 0xe5, 0xe4, 0x09, 0x99, 0x9d, 0x36, 0x35, 0x43, 0xdc, 0xf3, 0xc8, 0xe1, 0xda, 0xaa,
	0x0e, 0xd7, 0x4f, 0xb0, 0x6a, 0xa6, 0x48, 0x0a, 0xe0, 0x40, 0x11, 0x74, 0x28, 0x6a, 0xc1, 0x4e,
	0x75, 0x36, 0xc3, 0x1b, 0xa0, 0x78, 0x3d, 0x04, 0xcf, 0x35, 0x42, 0x12, 0xb6, 0x85, 0x9f, 0x32,
	0x60, 0xb8, 0x06, 0xa9, 0x7d, 0x80, 0x55, 0xcf, 0x97, 0xdd, 0x3f, 0xa9, 0x2e, 0x4c, 0x6a, 0xc6,
	0x35, 0x7e, 0xe2, 0x70, 0x63, 0x0b, 0x9a, 0xfd, 0x5e, 0xa5, 0x90, 0x2d, 0x9a, 0x8b, 0x02, 0x8d,
	0x06, 0xf9, 0xc3, 0x5b, 0xca, 0x4d, 0xc1, 0x5e, 0x2e, 0xa9, 0x56, 0xf6, 0x9c, 0x5a, 0xac, 0x3a,
	0x5c, 0xa6, 0xd1, 0xed, 0x3a, 0x58, 0x24, 0x0d, 0xad, 0x1b, 0x91, 0xf0, 0xc0, 0x24, 0xe8, 0xbf,
	0xe2, 0xa6, 0x0e, 0x0e, 0x93, 0xa4, 0xde, 0xaa, 0xa8, 0x96, 0x0d, 0xff, 0xe7, 0x47, 0xaa, 0x5b,
	0xdc, 0x51, 0x75, 0xb8, 0x6e, 0x02, 0xee, 0x46, 0x81, 0xd5, 0x14, 0x74, 0x1d, 0xc0, 0xa0, 0x8d,
	0x55, 0x32, 0x0d, 0x4b, 0x85, 0x17, 0x40, 0x27, 0x8e, 0x3d, 0xb6, 0xeb, 0x99, 0xdc, 0x9b, 0x0d,
	0x4b, 0xda, 0x2c, 0xb6, 0x11, 0x07, 0xa9, 0x38, 0x34, 0x70, 0x78, 0x0a, 0x92, 0x88, 0x3d, 0x5a,
	0x02, 0xbb, 0x31, 0xfc, 0x94, 0xae, 0xe3, 0xd9, 0x96, 0xe7, 0xd6, 0x75, 0x00, 0x6a, 0x89, 0x4d,
	0x97, 0x19, 0xab, 0x8b, 0x00, 0xae, 0x02, 0x7f, 0xad, 0x19, 0x79, 0x41, 0xa5, 0xb6, 0xe2, 0xee,
	0x5a, 0x68, 0x6b, 0x18, 0x48, 0x0a, 0x00, 0xa2, 0x87, 0x0c, 0x18, 0x6a, 0x5c, 0x78, 0x3d, 0xb7,
	0xf6, 0xcd, 0x70, 0x83, 0x37, 0xea, 0x28, 0xb0, 0x98, 0xc2, 0xa1, 0xa6, 0x14, 0x88, 0x17, 0x49,
	0x38, 0x7c, 0xc5, 0x82, 0x4c, 0x2d, 0x36, 0x97, 0xe7, 0x2f, 0xbb, 0xa5, 0x20, 0x2e, 0xbb, 0x45,
	0xe5, 0xa9, 0x78, 0x0c, 0x80, 0x52, 0xd9, 0x54, 0x2a, 0x45, 0x3b, 0xef, 0x95, 0x63, 0x1d, 0xb2,
	0x3f, 0x86, 0xa4, 0x6e, 0xfa, 0x23, 0x58, 0x75, 0x6c, 0x7c, 0xd5, 0x9d, 0x07, 0xbb, 0xd4, 0xdb,
	0xb6, 0x6a, 0x28, 0xaa, 0x92, 0xf7, 0xaa, 0xbb, 0x1d, 0xaf, 0xb1, 0xb7, 0xea, 0x70, 0xc3, 0xc4,
	0xa4, 0x71, 0x06, 0x92, 0xfa, 0xbc, 0x57, 0x33, 0xa4, 0xc8, 0xeb, 0x43, 0xdd, 0xb1, 0xd5, 0xa1,
	0xbe, 0x02, 0xb8, 0x48, 0x95, 0x68, 0xc8, 0xb3, 0x60, 0x3b, 0x0e, 0x59, 0x3e, 0xe7, 0x55, 0xc2,
	0x40, 0xd5, 0xe1, 0x76, 0x06, 0x82, 0x9a, 0xcf, 0x29, 0x48, 0xda, 0x86, 0x1f, 0x73, 0x0a, 0xfa,
	0x96, 0x01, 0xe9, 0x1a, 0xa6, 0xb8, 0x3c, 0x43, 0xa4, 0xdb, 0x9c, 0xea, 0xd7, 0x43, 0xd2, 0x65,
	0x0b, 0x65, 0x98, 0x01, 0x7b, 0x43, 0x5d, 0xa6, 0x12, 0x4c, 0x80, 0x6e, 0x8f, 0xa8, 0x85, 0x33,
	0xbf, 0x5b, 0x1c, 0xac, 0x3a, 0xdc, 0xae, 0x7a, 0x0d, 0x2c, 0x24, 0x6d, 0xa7, 0x22, 0x58, 0xe8,
	0x6b, 0x86, 0xe6, 0x9f, 0x57, 0x43, 0x3e, 0xaa, 0x5f, 0xc5, 0x7e, 0x26, 0x31, 0xf1, 0x99, 0xf4,
	0x9c, 0xb9, 0xcf, 0xd2, 0x14, 0x08, 0x73, 0x74, 0xe3, 0xfc, 0x3f, 0x61, 0xc1, 0x38, 0x86, 0x9d,
	0x35, 0x6f, 0xaa, 0xc6, 0x25, 0xcd, 0xb0, 0x55, 0x65, 0x4a, 0xd7, 0x3d, 0xe8, 0xad, 0xa8, 0xc4,
	0xb0, 0x0a, 0x63, 0x37, 0x5b, 0x61, 0xed, 0x5b, 0x2d, 0xef, 0x7d, 0x06, 0x1c, 0x4e, 0x20, 0x04,
	0x55, 0x5a, 0x01, 0xbd, 0xb6, 0x3b, 0x2f, 0x4f, 0x26, 0xd2, 0xd4, 0x98, 0x4a, 0x78, 0x02, 0xe6,
	0x0c, 0xbb, 0xea, 0x70, 0x03, 0xc4, 0xa1, 0x20, 0x0e, 0x92, 0x7a, 0xec, 0xda, 0xf2, 0xe8, 0x07,
	0x06, 0xa0, 0x18, 0x9f, 0xfe, 0xd3, 0xa5, 0xfa, 0x19, 0x03, 0xf6, 0xc7, 0xfa, 0xfe, 0x8f, 0x2a,
	0xf9, 0x1d, 0x13, 0xdc, 0x40, 0xa7, 0xcd, 0x8a, 0xf1, 0x82, 0xec, 0x78, 0xef, 0x82, 0xd1, 0x68,
	0xbf, 0xa9, 0x84, 0xaf, 0x81, 0x1e, 0x52, 0xdb, 0x45, 0x77, 0x9c, 0x7a, 0x3e, 0x54, 0x75, 0x38,
	0x18, 0x2c, 0x7c, 0x3c, 0x88, 0x24, 0xb0, 0xe4, 0x23, 0xa1, 0x8f, 0x59, 0x30, 0x16, 0x85, 0x3e,
	0x65, 0x28, 0x2f, 0x4b, 0xe9, 0x17, 0xc0, 0xa1, 0xa6, 0x2a, 0x6c, 0x56, 0xea, 0xbb, 0x2c, 0x98,
	0xa0, 0xe5, 0x60, 0xcb, 0xfa, 0x9c, 0xac, 0x57, 0xd4, 0xb7, 0xcc, 0xe2, 0x4d, 0x55, 0xf1, 0x97,
	0x3a, 0x1f, 0xe0, 0xfc, 0x32, 0xa8, 0xfe, 0x11, 0x03, 0x26, 0x5b, 0x51, 0x84, 0x46, 0xe0, 0x12,
	0xe8, 0x5d, 0x72, 0xe7, 0xe6, 0x75, 0x3c, 0x99, 0xee, 0x17, 0x47, 0x92, 0xef, 0x17, 0x52, 0xcf,
	0x52, 0x6d, 0x2d, 0xf4, 0xa3, 0xb7, 0x4d, 0x05, 0x17, 0xcb, 0x9d, 0x7b, 0x31, 0x36, 0x87, 0x12,
	0x38, 0x10, 0xef, 0x3b, 0xd5, 0xec, 0x22, 0xe8, 0x6f, 0x0c, 0x37, 0xb9, 0x1f, 0x74, 0x88, 0x23,
	0x55, 0x87, 0x4b, 0x85, 0x67, 0x84, 0x85, 0xa4, 0x9d, 0xf5, 0x29, 0x61, 0x21, 0x99, 0x5e, 0xc0,
	0xde, 0xb6, 0xe5, 0x82, 0xae, 0xfa, 0xad, 0xb2, 0xa7, 0x92, 0x08, 0x76, 0x5a, 0x78, 0x24, 0x4f,
	0x0a, 0xc1, 0x6f, 0xca, 0xd2, 0x55, 0x87, 0x1b, 0x22, 0xcb, 0x34, 0x4c, 0x40, 0xd2, 0x0e, 0x2b,
	0x00, 0xa6, 0xa0, 0xbb, 0x0c, 0x18, 0x09, 0x5f, 0x83, 0xb2, 0x31, 0x41, 0x3f, 0xc5, 0x58, 0xd4,
	0x0c, 0x3b, 0x1f, 0xec, 0xe1, 0x0e, 0x86, 0xf7, 0x39, 0x04, 0xc9, 0x3d, 0x0a, 0xc8, 0xcd, 0x29,
	0x40, 0x7a, 0x1d, 0x12, 0x92, 0x28, 0x05, 0x7f, 0x3a, 0xba, 0x40, 0x49, 0x4f, 0xe9, 0x7a, 0xc0,
	0x27, 0xff, 0xf8, 0x1d, 0x07, 0x5d, 0x72, 0xa9, 0x54, 0x4b, 0x8b, 0xfe, 0xaa, 0xc3, 0xed, 0x20,
	0xe8, 0xe4, 0x3d, 0x92, 0x3a, 0xe5, 0x52, 0x29, 0x48, 0x6d, 0x1d, 0x52, 0x3c, 0xb5, 0xf6, 0xe7,
	0x46, 0xed, 0x4b, 0x06, 0x1c, 0x6d, 0x14, 0x3b, 0x76, 0x47, 0x4a, 0x4c, 0x76, 0x8b, 0x76, 0x21,
	0xf4, 0x80, 0x01, 0x7c, 0x42, 0x0f, 0xff, 0xa5, 0xfc, 0x98, 0xfc, 0x7d, 0x18, 0xf4, 0x12, 0x17,
	0xd5, 0xf2, 0x92, 0x56, 0x54, 0xe1, 0x1d, 0x06, 0x80, 0xda, 0x89, 0x02, 0x0f, 0x85, 0xaf, 0xba,
	0xee, 0x33, 0x46, 0x7a, 0xbc, 0xf9, 0x44, 0xc2, 0x11, 0x1d, 0xfe, 0xf0, 0x97, 0x67, 0x9f, 0xb3,
	0xfb, 0xe1, 0x3e, 0x21, 0xfa, 0x9b, 0x96, 0x25, 0xac, 0x68, 0xca, 0x2a, 0xbc, 0xcf, 0x80, 0xbe,
	0xfa, 0xaf, 0x04, 0xf0, 0xff, 0x31, 0xeb, 0x34, 0x7e, 0xc4, 0x48, 0x1f, 0x4d, 0x36, 0x99, 0x3a,
	0x76, 0x00, 0x3b, 0x96, 0x81, 0x23, 0x71, 0x8e, 0xc1, 0x67, 0x0c, 0x18, 0x8e, 0xe8, 0x67, 0xe1,
	0xb1, 0x66, 0x22, 0x84, 0x7d, 0x24, 0x48, 0x1f, 0x6f, 0xd1, 0x8a, 0xba, 0x7b, 0x0d, 0xbb, 0x3b,
	0x07, 0x67, 0x63, 0xdc, 0xe5, 0xcd, 0x79, 0x1e, 0x77, 0x78, 0x7c, 0x61, 0x99, 0x77, 0xf3, 0x54,
	0x58, 0xa9, 0x6d, 0xf7, 0xab, 0xc2, 0x0a, 0x1e, 0x5b, 0x15, 0x56, 0x1a, 0x73, 0x79, 0x15, 0x7e,
	0xcf, 0x80, 0x81, 0x90, 0x7e, 0x15, 0xbe, 0xd2, 0xcc, 0xd9, 0xc6, 0xe3, 0x27, 0x3d, 0xd1, 0x82,
	0x05, 0xa5, 0x76, 0x1a, 0x53, 0x3b, 0x01, 0x8f, 0xc5, 0x45, 0x02, 0x53, 0x22, 0x86, 0x75, 0xac,
	0xe0, 0x4f, 0x5e, 0x84, 0xd6, 0xb7, 0x9b, 0xb1, 0x11, 0x8a, 0x6c, 0xa3, 0x63, 0x23, 0x14, 0xdd,
	0xd3, 0xa2, 0xe3, 0x98, 0x86, 0x00, 0xf9, 0x66, 0x34, 0x70, 0x18, 0xbc, 0x68, 0xc0, 0x3b, 0x2c,
	0xd8, 0xd7, 0xb4, 0x9d, 0x83, 0x67, 0x63, 0x7c, 0x4a, 0xd0, 0x10, 0xa7, 0xdf, 0xdc, 0xb0, 0x3d,
	0x65, 0xa7, 0x60, 0x76, 0x37, 0xe0, 0xb5, 0x70, 0x76, 0xb8, 0x85, 0xe1, 0x17, 0x31, 0x48, 0x20,
	0x54, 0x16, 0xef, 0xe5, 0x5a, 0x58, 0x3e, 0xae, 0xcf, 0xc3, 0x5f, 0x19, 0x7a, 0x82, 0x85, 0xfb,
	0x04, 0x4f, 0xb6, 0x4c, 0xc3, 0x13, 0xe0, 0xf5, 0x0d, 0x58, 0x52, 0xea, 0xd3, 0x98, 0xfa, 0x19,
	0xf8, 0x46, 0x6b, 0xd4, 0xeb, 0xd3, 0xf4, 0x67, 0x06, 0xa4, 0xa2, 0xee, 0xee, 0xb0, 0xe9, 0x9e,
	0x10, 0xda, 0x07, 0xa6, 0x4f, 0xb4, 0x6a, 0x46, 0x09, 0x89, 0x98, 0xd0, 0x69, 0x78, 0x2a, 0x6e,
	0x2f, 0xc1, 0xad, 0x41, 0x34, 0x9f, 0xbf, 0x62, 0xfa, 0x54, 0xda, 0x8b, 0xc0, 0xd3, 0xad, 0xf9,
	0x57, 0xdf, 0xc8, 0xa5, 0xcf, 0x6c, 0xd0, 0x9a, 0x92, 0xbc, 0x81, 0x49, 0xbe, 0x03, 0xe7, 0x5a,
	0x22, 0xc9, 0xcb, 0x46, 0xc2, 0x54, 0xfd, 0x82, 0x05, 0x47, 0x92, 0x77, 0x05, 0xf0, 0x42, 0x6c,
	0xfe, 0x25, 0xef, 0xb4, 0xd2, 0x17, 0x37, 0x0f, 0x44, 0x15, 0xba, 0x8a, 0x15, 0x9a, 0x85, 0x52,
	0x94, 0x42, 0x7a, 0x45, 0xe5, 0x49, 0xf3, 0x12, 0x90, 0x28, 0x99, 0x3a, 0x4f, 0xbc, 0x0b, 0x64,
	0xc4, 0x8d, 0x1f, 0xc6, 0xd5, 0x63, 0x7c, 0x87, 0x93, 0x3e, 0xb5, 0x11, 0xd3, 0x64, 0xb5, 0xec,
	0x12, 0x29, 0x1b, 0xb2, 0x8e, 0x49, 0x46, 0x1e, 0x39, 0x0f, 0x19, 0x30, 0x18, 0x76, 0xf1, 0x87,
	0x71, 0x87, 0x5f, 0x78, 0x23, 0x92, 0x9e, 0x6c, 0xc5, 0x24, 0x59, 0xfd, 0x92, 0x5b, 0x1f, 0x4f,
	0x32, 0xbc, 0xb0, 0xcc, 0x6b, 0x8a, 0xb0, 0xd2, 0xd0, 0xcb, 0xe0, 0x63, 0x73, 0x30, 0xec, 0x86,
	0x1f, 0xcb, 0x21, 0xbc, 0xaf, 0x88, 0xe5, 0x10, 0xd1, 0x40, 0xa0, 0xb3, 0x98, 0xc3, 0x49, 0x78,
	0x22, 0x19, 0x07, 0x3f, 0x0e, 0xe4, 0xee, 0xbe, 0x0a, 0xef, 0xb1, 0xe0, 0x60, 0xa2, 0xdb, 0x36,
	0x14, 0x93, 0x29, 0x1c, 0x5b, 0x74, 0xd3, 0x9b, 0xc2, 0x48, 0xb6, 0x23, 0x45, 0x50, 0xe6, 0x83,
	0x6d, 0x86, 0xcf, 0x3f, 0xa4, 0xe6, 0xc4, 0x2b, 0x8f, 0xfe, 0xcc, 0xb4, 0x7d, 0xb3, 0x96, 0x69,
	0x7b, 0xb4, 0x96, 0x61, 0x1e, 0xaf, 0x65, 0x98, 0x3f, 0xd6, 0x32, 0xcc, 0xbd, 0xa7, 0x99, 0xb6,
	0xc7, 0x4f, 0x33, 0x6d, 0xbf, 0x3d, 0xcd, 0xb4, 0x5d, 0x15, 0xea, 0x3e, 0x3c, 0xb8, 0x3e, 0xf0,
	0xe6, 0xfc, 0xbc, 0x56, 0xd4, 0x64, 0xdd, 0xf3, 0xc9, 0xf3, 0x0a, 0x7f, 0x85, 0x28, 0x74, 0xe1,
	0xff, 0x36, 0xbf, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0xc2, 0xae, 0xdf, 0x4b, 0x1f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	QueryVaultOfOwnerByPair(ctx context.Context, in *QueryVaultOfOwnerByPairRequest, opts ...grpc.CallOption) (*QueryVaultOfOwnerByPairResponse, error)
	QueryVaultByProduct(ctx context.Context, in *QueryVaultByProductRequest, opts ...grpc.CallOption) (*QueryVaultByProductResponse, error)
	QueryAllVaultByProducts(ctx context.Context, in *QueryAllVaultByProductsRequest, opts ...grpc.CallOption) (*QueryAllVaultByProductsResponse, error)
	QueryTokenMintedAllProductsByPair(ctx context.Context, in *QueryTokenMintedAllProductsByPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsByPairResponse, error)
	QueryTokenMintedAllProducts(ctx context.Context, in *QueryTokenMintedAllProductsRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsResponse, error)
	QueryVaultCountByProduct(ctx context.Context, in *QueryVaultCountByProductRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductResponse, error)
	QueryVaultCountByProductAndPair(ctx context.Context, in *QueryVaultCountByProductAndPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductAndPairResponse, error)
	QueryTotalValueLockedByProductExtendedPair(ctx context.Context, in *QueryTotalValueLockedByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByProductExtendedPairResponse, error)
	QueryExtendedPairIDByProduct(ctx context.Context, in *QueryExtendedPairIDByProductRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDByProductResponse, error)
	QueryStableVaultInfo(ctx context.Context, in *QueryStableVaultInfoRequest, opts ...grpc.CallOption) (*QueryStableVaultInfoResponse, error)
	QueryAllStableVaults(ctx context.Context, in *QueryAllStableVaultsRequest, opts ...grpc.CallOption) (*QueryAllStableVaultsResponse, error)
	QueryStableVaultByProductExtendedPair(ctx context.Context, in *QueryStableVaultByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByProductExtendedPairResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryAllVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryVaultOfOwnerByPair(ctx context.Context, in *QueryVaultOfOwnerByPairRequest, opts ...grpc.CallOption) (*QueryVaultOfOwnerByPairResponse, error) {
	out := new(QueryVaultOfOwnerByPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryVaultOfOwnerByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryVaultByProduct(ctx context.Context, in *QueryVaultByProductRequest, opts ...grpc.CallOption) (*QueryVaultByProductResponse, error) {
	out := new(QueryVaultByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryVaultByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAllVaultByProducts(ctx context.Context, in *QueryAllVaultByProductsRequest, opts ...grpc.CallOption) (*QueryAllVaultByProductsResponse, error) {
	out := new(QueryAllVaultByProductsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryAllVaultByProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTokenMintedAllProductsByPair(ctx context.Context, in *QueryTokenMintedAllProductsByPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsByPairResponse, error) {
	out := new(QueryTokenMintedAllProductsByPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryTokenMintedAllProductsByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTokenMintedAllProducts(ctx context.Context, in *QueryTokenMintedAllProductsRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsResponse, error) {
	out := new(QueryTokenMintedAllProductsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryTokenMintedAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryVaultCountByProduct(ctx context.Context, in *QueryVaultCountByProductRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductResponse, error) {
	out := new(QueryVaultCountByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryVaultCountByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryVaultCountByProductAndPair(ctx context.Context, in *QueryVaultCountByProductAndPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductAndPairResponse, error) {
	out := new(QueryVaultCountByProductAndPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryVaultCountByProductAndPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTotalValueLockedByProductExtendedPair(ctx context.Context, in *QueryTotalValueLockedByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByProductExtendedPairResponse, error) {
	out := new(QueryTotalValueLockedByProductExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryTotalValueLockedByProductExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryExtendedPairIDByProduct(ctx context.Context, in *QueryExtendedPairIDByProductRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDByProductResponse, error) {
	out := new(QueryExtendedPairIDByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryExtendedPairIDByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryStableVaultInfo(ctx context.Context, in *QueryStableVaultInfoRequest, opts ...grpc.CallOption) (*QueryStableVaultInfoResponse, error) {
	out := new(QueryStableVaultInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryStableVaultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryAllStableVaults(ctx context.Context, in *QueryAllStableVaultsRequest, opts ...grpc.CallOption) (*QueryAllStableVaultsResponse, error) {
	out := new(QueryAllStableVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryAllStableVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryStableVaultByProductExtendedPair(ctx context.Context, in *QueryStableVaultByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByProductExtendedPairResponse, error) {
	out := new(QueryStableVaultByProductExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.QueryService/QueryStableVaultByProductExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryVault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	QueryAllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	QueryVaultOfOwnerByPair(context.Context, *QueryVaultOfOwnerByPairRequest) (*QueryVaultOfOwnerByPairResponse, error)
	QueryVaultByProduct(context.Context, *QueryVaultByProductRequest) (*QueryVaultByProductResponse, error)
	QueryAllVaultByProducts(context.Context, *QueryAllVaultByProductsRequest) (*QueryAllVaultByProductsResponse, error)
	QueryTokenMintedAllProductsByPair(context.Context, *QueryTokenMintedAllProductsByPairRequest) (*QueryTokenMintedAllProductsByPairResponse, error)
	QueryTokenMintedAllProducts(context.Context, *QueryTokenMintedAllProductsRequest) (*QueryTokenMintedAllProductsResponse, error)
	QueryVaultCountByProduct(context.Context, *QueryVaultCountByProductRequest) (*QueryVaultCountByProductResponse, error)
	QueryVaultCountByProductAndPair(context.Context, *QueryVaultCountByProductAndPairRequest) (*QueryVaultCountByProductAndPairResponse, error)
	QueryTotalValueLockedByProductExtendedPair(context.Context, *QueryTotalValueLockedByProductExtendedPairRequest) (*QueryTotalValueLockedByProductExtendedPairResponse, error)
	QueryExtendedPairIDByProduct(context.Context, *QueryExtendedPairIDByProductRequest) (*QueryExtendedPairIDByProductResponse, error)
	QueryStableVaultInfo(context.Context, *QueryStableVaultInfoRequest) (*QueryStableVaultInfoResponse, error)
	QueryAllStableVaults(context.Context, *QueryAllStableVaultsRequest) (*QueryAllStableVaultsResponse, error)
	QueryStableVaultByProductExtendedPair(context.Context, *QueryStableVaultByProductExtendedPairRequest) (*QueryStableVaultByProductExtendedPairResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryVault(ctx context.Context, req *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVault not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAllVaults(ctx context.Context, req *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaults not implemented")
}
func (*UnimplementedQueryServiceServer) QueryVaultOfOwnerByPair(ctx context.Context, req *QueryVaultOfOwnerByPairRequest) (*QueryVaultOfOwnerByPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultOfOwnerByPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryVaultByProduct(ctx context.Context, req *QueryVaultByProductRequest) (*QueryVaultByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultByProduct not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAllVaultByProducts(ctx context.Context, req *QueryAllVaultByProductsRequest) (*QueryAllVaultByProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultByProducts not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTokenMintedAllProductsByPair(ctx context.Context, req *QueryTokenMintedAllProductsByPairRequest) (*QueryTokenMintedAllProductsByPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedAllProductsByPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTokenMintedAllProducts(ctx context.Context, req *QueryTokenMintedAllProductsRequest) (*QueryTokenMintedAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedAllProducts not implemented")
}
func (*UnimplementedQueryServiceServer) QueryVaultCountByProduct(ctx context.Context, req *QueryVaultCountByProductRequest) (*QueryVaultCountByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByProduct not implemented")
}
func (*UnimplementedQueryServiceServer) QueryVaultCountByProductAndPair(ctx context.Context, req *QueryVaultCountByProductAndPairRequest) (*QueryVaultCountByProductAndPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByProductAndPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTotalValueLockedByProductExtendedPair(ctx context.Context, req *QueryTotalValueLockedByProductExtendedPairRequest) (*QueryTotalValueLockedByProductExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalValueLockedByProductExtendedPair not implemented")
}
func (*UnimplementedQueryServiceServer) QueryExtendedPairIDByProduct(ctx context.Context, req *QueryExtendedPairIDByProductRequest) (*QueryExtendedPairIDByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairIDByProduct not implemented")
}
func (*UnimplementedQueryServiceServer) QueryStableVaultInfo(ctx context.Context, req *QueryStableVaultInfoRequest) (*QueryStableVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultInfo not implemented")
}
func (*UnimplementedQueryServiceServer) QueryAllStableVaults(ctx context.Context, req *QueryAllStableVaultsRequest) (*QueryAllStableVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllStableVaults not implemented")
}
func (*UnimplementedQueryServiceServer) QueryStableVaultByProductExtendedPair(ctx context.Context, req *QueryStableVaultByProductExtendedPairRequest) (*QueryStableVaultByProductExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultByProductExtendedPair not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryVault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryAllVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryVaultOfOwnerByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultOfOwnerByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryVaultOfOwnerByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryVaultOfOwnerByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryVaultOfOwnerByPair(ctx, req.(*QueryVaultOfOwnerByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryVaultByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryVaultByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryVaultByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryVaultByProduct(ctx, req.(*QueryVaultByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAllVaultByProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultByProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAllVaultByProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryAllVaultByProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAllVaultByProducts(ctx, req.(*QueryAllVaultByProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTokenMintedAllProductsByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedAllProductsByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTokenMintedAllProductsByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryTokenMintedAllProductsByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTokenMintedAllProductsByPair(ctx, req.(*QueryTokenMintedAllProductsByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTokenMintedAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTokenMintedAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryTokenMintedAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTokenMintedAllProducts(ctx, req.(*QueryTokenMintedAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryVaultCountByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryVaultCountByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryVaultCountByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryVaultCountByProduct(ctx, req.(*QueryVaultCountByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryVaultCountByProductAndPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByProductAndPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryVaultCountByProductAndPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryVaultCountByProductAndPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryVaultCountByProductAndPair(ctx, req.(*QueryVaultCountByProductAndPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTotalValueLockedByProductExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalValueLockedByProductExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTotalValueLockedByProductExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryTotalValueLockedByProductExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTotalValueLockedByProductExtendedPair(ctx, req.(*QueryTotalValueLockedByProductExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryExtendedPairIDByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairIDByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryExtendedPairIDByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryExtendedPairIDByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryExtendedPairIDByProduct(ctx, req.(*QueryExtendedPairIDByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryStableVaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryStableVaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryStableVaultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryStableVaultInfo(ctx, req.(*QueryStableVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryAllStableVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStableVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryAllStableVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryAllStableVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryAllStableVaults(ctx, req.(*QueryAllStableVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryStableVaultByProductExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultByProductExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryStableVaultByProductExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.QueryService/QueryStableVaultByProductExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryStableVaultByProductExtendedPair(ctx, req.(*QueryStableVaultByProductExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.vault.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryVault",
			Handler:    _QueryService_QueryVault_Handler,
		},
		{
			MethodName: "QueryAllVaults",
			Handler:    _QueryService_QueryAllVaults_Handler,
		},
		{
			MethodName: "QueryVaultOfOwnerByPair",
			Handler:    _QueryService_QueryVaultOfOwnerByPair_Handler,
		},
		{
			MethodName: "QueryVaultByProduct",
			Handler:    _QueryService_QueryVaultByProduct_Handler,
		},
		{
			MethodName: "QueryAllVaultByProducts",
			Handler:    _QueryService_QueryAllVaultByProducts_Handler,
		},
		{
			MethodName: "QueryTokenMintedAllProductsByPair",
			Handler:    _QueryService_QueryTokenMintedAllProductsByPair_Handler,
		},
		{
			MethodName: "QueryTokenMintedAllProducts",
			Handler:    _QueryService_QueryTokenMintedAllProducts_Handler,
		},
		{
			MethodName: "QueryVaultCountByProduct",
			Handler:    _QueryService_QueryVaultCountByProduct_Handler,
		},
		{
			MethodName: "QueryVaultCountByProductAndPair",
			Handler:    _QueryService_QueryVaultCountByProductAndPair_Handler,
		},
		{
			MethodName: "QueryTotalValueLockedByProductExtendedPair",
			Handler:    _QueryService_QueryTotalValueLockedByProductExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairIDByProduct",
			Handler:    _QueryService_QueryExtendedPairIDByProduct_Handler,
		},
		{
			MethodName: "QueryStableVaultInfo",
			Handler:    _QueryService_QueryStableVaultInfo_Handler,
		},
		{
			MethodName: "QueryAllStableVaults",
			Handler:    _QueryService_QueryAllStableVaults_Handler,
		},
		{
			MethodName: "QueryStableVaultByProductExtendedPair",
			Handler:    _QueryService_QueryStableVaultByProductExtendedPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/vault/v1beta1/querier.proto",
}

func (m *VaultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralizationRatio.Size()
		i -= size
		if _, err := m.CollateralizationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Debt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairID != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultOfOwnerByPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultOfOwnerByPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultOfOwnerByPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultOfOwnerByPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultOfOwnerByPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultOfOwnerByPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vault_Id) > 0 {
		i -= len(m.Vault_Id)
		copy(dAtA[i:], m.Vault_Id)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Vault_Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vault_Ids) > 0 {
		for iNdEx := len(m.Vault_Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vault_Ids[iNdEx])
			copy(dAtA[i:], m.Vault_Ids[iNdEx])
			i = encodeVarintQuerier(dAtA, i, uint64(len(m.Vault_Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultByProductsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultByProductsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultByProductsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultByProductsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultByProductsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultByProductsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vault_Ids) > 0 {
		for iNdEx := len(m.Vault_Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vault_Ids[iNdEx])
			copy(dAtA[i:], m.Vault_Ids[iNdEx])
			i = encodeVarintQuerier(dAtA, i, uint64(len(m.Vault_Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsByPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsByPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsByPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsByPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsByPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsByPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token_Minted != nil {
		{
			size := m.Token_Minted.Size()
			i -= size
			if _, err := m.Token_Minted.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token_Minted != nil {
		{
			size := m.Token_Minted.Size()
			i -= size
			if _, err := m.Token_Minted.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductAndPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductAndPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductAndPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductAndPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductAndPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductAndPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueLocked != nil {
		{
			size := m.ValueLocked.Size()
			i -= size
			if _, err := m.ValueLocked.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairIds) > 0 {
		dAtA16 := make([]byte, len(m.ExtendedPairIds)*10)
		var j15 int
		for _, num := range m.ExtendedPairIds {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintQuerier(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StableVaultId) > 0 {
		i -= len(m.StableVaultId)
		copy(dAtA[i:], m.StableVaultId)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.StableVaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStableVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStableVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStableVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStableVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStableVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStableVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StableMintVault) > 0 {
		for iNdEx := len(m.StableMintVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StableMintVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByProductExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByProductExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByProductExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByProductExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByProductExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByProductExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	if m.PairID != 0 {
		n += 1 + sovQuerier(uint64(m.PairID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovQuerier(uint64(l))
	l = m.Debt.Size()
	n += 1 + l + sovQuerier(uint64(l))
	l = m.CollateralizationRatio.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryAllVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultOfOwnerByPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuerier(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultOfOwnerByPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vault_Id)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault_Ids) > 0 {
		for _, s := range m.Vault_Ids {
			l = len(s)
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryAllVaultByProductsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllVaultByProductsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault_Ids) > 0 {
		for _, s := range m.Vault_Ids {
			l = len(s)
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenMintedAllProductsByPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuerier(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedAllProductsByPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token_Minted != nil {
		l = m.Token_Minted.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedAllProductsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedAllProductsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token_Minted != nil {
		l = m.Token_Minted.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuerier(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryVaultCountByProductAndPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuerier(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByProductAndPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuerier(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuerier(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueLocked != nil {
		l = m.ValueLocked.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuerier(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairIds) > 0 {
		l = 0
		for _, e := range m.ExtendedPairIds {
			l += sovQuerier(uint64(e))
		}
		n += 1 + sovQuerier(uint64(l)) + l
	}
	return n
}

func (m *QueryStableVaultInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StableVaultId)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryStableVaultInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryAllStableVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuerier(uint64(m.AppId))
	}
	return n
}

func (m *QueryAllStableVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StableMintVault) > 0 {
		for _, e := range m.StableMintVault {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *QueryStableVaultByProductExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuerier(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuerier(uint64(m.ExtendedPairId))
	}
	return n
}

func (m *QueryStableVaultByProductExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Debt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralizationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultOfOwnerByPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultOfOwnerByPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultOfOwnerByPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultOfOwnerByPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultOfOwnerByPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultOfOwnerByPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault_Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault_Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault_Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault_Ids = append(m.Vault_Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultByProductsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultByProductsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultByProductsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultByProductsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultByProductsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultByProductsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault_Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault_Ids = append(m.Vault_Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsByPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsByPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token_Minted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Token_Minted = &v
			if err := m.Token_Minted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token_Minted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Token_Minted = &v
			if err := m.Token_Minted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductAndPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductAndPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.ValueLocked = &v
			if err := m.ValueLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedPairIds = append(m.ExtendedPairIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuerier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuerier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtendedPairIds) == 0 {
					m.ExtendedPairIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuerier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedPairIds = append(m.ExtendedPairIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableVaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StableVaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStableVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStableVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStableVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStableVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStableVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStableVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StableMintVault = append(m.StableMintVault, &StableMintVault{})
			if err := m.StableMintVault[len(m.StableMintVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByProductExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByProductExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
