// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/vault/v1beta1/vault.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//app_vault_type_id will be the key for  the KVStore for this value.
type Vault struct {
	Id                    string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppMappingId          uint64                                 `protobuf:"varint,2,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	ExtendedPairVaultID   uint64                                 `protobuf:"varint,3,opt,name=extended_pair_vault_id,json=extendedPairVaultId,proto3" json:"extended_pair_vault_id,omitempty" yaml:"extended_pair_vault_id"`
	Owner                 string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn              github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	CreatedAt             time.Time                              `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
	InterestAccumulated   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=interest_accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"interest_accumulated" yaml:"interest_accumulated"`
	ClosingFeeAccumulated github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=closing_fee_accumulated,json=closingFeeAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"closing_fee_accumulated" yaml:"interest_accumulated"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{0}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

//user_address is the key
type UserVaultAssetMapping struct {
	Owner        string               `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	UserVaultApp []*VaultToAppMapping `protobuf:"bytes,2,rep,name=user_vault_app,json=userVaultApp,proto3" json:"user_vault_app,omitempty" yaml:"user_vault_app"`
}

func (m *UserVaultAssetMapping) Reset()         { *m = UserVaultAssetMapping{} }
func (m *UserVaultAssetMapping) String() string { return proto.CompactTextString(m) }
func (*UserVaultAssetMapping) ProtoMessage()    {}
func (*UserVaultAssetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{1}
}
func (m *UserVaultAssetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserVaultAssetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserVaultAssetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserVaultAssetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserVaultAssetMapping.Merge(m, src)
}
func (m *UserVaultAssetMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserVaultAssetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserVaultAssetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserVaultAssetMapping proto.InternalMessageInfo

type VaultToAppMapping struct {
	AppMappingId          uint64                        `protobuf:"varint,1,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty"`
	UserExtendedPairVault []*ExtendedPairToVaultMapping `protobuf:"bytes,2,rep,name=user_extended_pair_vault,json=userExtendedPairVault,proto3" json:"user_extended_pair_vault,omitempty" yaml:"user_extended_pair_vault"`
}

func (m *VaultToAppMapping) Reset()         { *m = VaultToAppMapping{} }
func (m *VaultToAppMapping) String() string { return proto.CompactTextString(m) }
func (*VaultToAppMapping) ProtoMessage()    {}
func (*VaultToAppMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{2}
}
func (m *VaultToAppMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultToAppMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultToAppMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultToAppMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultToAppMapping.Merge(m, src)
}
func (m *VaultToAppMapping) XXX_Size() int {
	return m.Size()
}
func (m *VaultToAppMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultToAppMapping.DiscardUnknown(m)
}

var xxx_messageInfo_VaultToAppMapping proto.InternalMessageInfo

type ExtendedPairToVaultMapping struct {
	ExtendedPairId uint64 `protobuf:"varint,1,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty"`
	VaultId        string `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty" yaml:"vault_id"`
}

func (m *ExtendedPairToVaultMapping) Reset()         { *m = ExtendedPairToVaultMapping{} }
func (m *ExtendedPairToVaultMapping) String() string { return proto.CompactTextString(m) }
func (*ExtendedPairToVaultMapping) ProtoMessage()    {}
func (*ExtendedPairToVaultMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{3}
}
func (m *ExtendedPairToVaultMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPairToVaultMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPairToVaultMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPairToVaultMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPairToVaultMapping.Merge(m, src)
}
func (m *ExtendedPairToVaultMapping) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPairToVaultMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPairToVaultMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPairToVaultMapping proto.InternalMessageInfo

//app_id is the key
type AppExtendedPairVaultMapping struct {
	AppMappingId       uint64                      `protobuf:"varint,1,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty"`
	Counter            uint64                      `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	ExtendedPairVaults []*ExtendedPairVaultMapping `protobuf:"bytes,3,rep,name=extended_pair_vaults,json=extendedPairVaults,proto3" json:"extended_pair_vaults,omitempty" yaml:"extended_pair_vaults"`
}

func (m *AppExtendedPairVaultMapping) Reset()         { *m = AppExtendedPairVaultMapping{} }
func (m *AppExtendedPairVaultMapping) String() string { return proto.CompactTextString(m) }
func (*AppExtendedPairVaultMapping) ProtoMessage()    {}
func (*AppExtendedPairVaultMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{4}
}
func (m *AppExtendedPairVaultMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppExtendedPairVaultMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppExtendedPairVaultMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppExtendedPairVaultMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppExtendedPairVaultMapping.Merge(m, src)
}
func (m *AppExtendedPairVaultMapping) XXX_Size() int {
	return m.Size()
}
func (m *AppExtendedPairVaultMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AppExtendedPairVaultMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AppExtendedPairVaultMapping proto.InternalMessageInfo

type ExtendedPairVaultMapping struct {
	ExtendedPairId         uint64                                 `protobuf:"varint,1,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	VaultIds               []string                               `protobuf:"bytes,2,rep,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
	TokenMintedAmount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=token_minted_amount,json=tokenMintedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_minted_amount" yaml:"token_minted_amount"`
	CollateralLockedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=collateral_locked_amount,json=collateralLockedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked_amount" yaml:"collateral_locked_amount"`
}

func (m *ExtendedPairVaultMapping) Reset()         { *m = ExtendedPairVaultMapping{} }
func (m *ExtendedPairVaultMapping) String() string { return proto.CompactTextString(m) }
func (*ExtendedPairVaultMapping) ProtoMessage()    {}
func (*ExtendedPairVaultMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{5}
}
func (m *ExtendedPairVaultMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPairVaultMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPairVaultMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPairVaultMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPairVaultMapping.Merge(m, src)
}
func (m *ExtendedPairVaultMapping) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPairVaultMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPairVaultMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPairVaultMapping proto.InternalMessageInfo

type TvlLockedDataMap struct {
	AssetDenom             string                                 `protobuf:"bytes,1,opt,name=asset_denom,json=assetDenom,proto3" json:"asset_denom,omitempty" yaml:"asset_denom"`
	CollateralLockedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=collateral_locked_amount,json=collateralLockedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked_amount" yaml:"collateral_locked_amount"`
}

func (m *TvlLockedDataMap) Reset()         { *m = TvlLockedDataMap{} }
func (m *TvlLockedDataMap) String() string { return proto.CompactTextString(m) }
func (*TvlLockedDataMap) ProtoMessage()    {}
func (*TvlLockedDataMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{6}
}
func (m *TvlLockedDataMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TvlLockedDataMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TvlLockedDataMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TvlLockedDataMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TvlLockedDataMap.Merge(m, src)
}
func (m *TvlLockedDataMap) XXX_Size() int {
	return m.Size()
}
func (m *TvlLockedDataMap) XXX_DiscardUnknown() {
	xxx_messageInfo_TvlLockedDataMap.DiscardUnknown(m)
}

var xxx_messageInfo_TvlLockedDataMap proto.InternalMessageInfo

type StableMintVault struct {
	Id                  string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AmountIn            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	AppMappingId        uint64                                 `protobuf:"varint,4,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	ExtendedPairVaultID uint64                                 `protobuf:"varint,5,opt,name=extended_pair_vault_id,json=extendedPairVaultId,proto3" json:"extended_pair_vault_id,omitempty" yaml:"extended_pair_vault_id"`
	CreatedAt           time.Time                              `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
}

func (m *StableMintVault) Reset()         { *m = StableMintVault{} }
func (m *StableMintVault) String() string { return proto.CompactTextString(m) }
func (*StableMintVault) ProtoMessage()    {}
func (*StableMintVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{7}
}
func (m *StableMintVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StableMintVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StableMintVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StableMintVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StableMintVault.Merge(m, src)
}
func (m *StableMintVault) XXX_Size() int {
	return m.Size()
}
func (m *StableMintVault) XXX_DiscardUnknown() {
	xxx_messageInfo_StableMintVault.DiscardUnknown(m)
}

var xxx_messageInfo_StableMintVault proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Vault)(nil), "comdex.vault.v1beta1.Vault")
	proto.RegisterType((*UserVaultAssetMapping)(nil), "comdex.vault.v1beta1.UserVaultAssetMapping")
	proto.RegisterType((*VaultToAppMapping)(nil), "comdex.vault.v1beta1.VaultToAppMapping")
	proto.RegisterType((*ExtendedPairToVaultMapping)(nil), "comdex.vault.v1beta1.ExtendedPairToVaultMapping")
	proto.RegisterType((*AppExtendedPairVaultMapping)(nil), "comdex.vault.v1beta1.AppExtendedPairVaultMapping")
	proto.RegisterType((*ExtendedPairVaultMapping)(nil), "comdex.vault.v1beta1.ExtendedPairVaultMapping")
	proto.RegisterType((*TvlLockedDataMap)(nil), "comdex.vault.v1beta1.TvlLockedDataMap")
	proto.RegisterType((*StableMintVault)(nil), "comdex.vault.v1beta1.StableMintVault")
}

func init() { proto.RegisterFile("comdex/vault/v1beta1/vault.proto", fileDescriptor_217d238efc540f4d) }

var fileDescriptor_217d238efc540f4d = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0xb7, 0x99, 0x96, 0x6e, 0x3b, 0x49, 0xbb, 0xde, 0x54, 0x8d, 0xa3, 0x01,
	0x2d, 0xe1, 0xb0, 0x0e, 0x5d, 0x0e, 0x20, 0x2e, 0x28, 0xa6, 0x8b, 0x14, 0x69, 0xab, 0x65, 0x4d,
	0x41, 0x88, 0x8b, 0x35, 0xb1, 0xa7, 0x59, 0xab, 0xb6, 0xc7, 0x8a, 0xc7, 0x61, 0x57, 0xe2, 0x00,
	0x07, 0x4e, 0x48, 0x68, 0x7f, 0x02, 0x47, 0xf6, 0x9f, 0x54, 0x9c, 0xf6, 0x08, 0x1c, 0x0c, 0x9b,
	0xfe, 0x83, 0xfc, 0x01, 0x90, 0x67, 0xec, 0x3a, 0xde, 0xb8, 0x8b, 0x22, 0x28, 0xa7, 0x64, 0xde,
	0x7b, 0xfe, 0xde, 0xf7, 0xde, 0xbc, 0xf7, 0xe6, 0xc1, 0x8e, 0xc5, 0x3c, 0x9b, 0x3e, 0xe9, 0x4d,
	0x48, 0xe4, 0xf2, 0xde, 0xe4, 0x70, 0x48, 0x39, 0x39, 0x94, 0x27, 0x2d, 0x18, 0x33, 0xce, 0x50,
	0x53, 0x5a, 0x68, 0x52, 0x96, 0x5a, 0xb4, 0x9a, 0x23, 0x36, 0x62, 0xc2, 0xa0, 0x97, 0xfc, 0x93,
	0xb6, 0x2d, 0x75, 0xc4, 0xd8, 0xc8, 0xa5, 0x3d, 0x71, 0x1a, 0x46, 0xa7, 0x3d, 0xee, 0x78, 0x34,
	0xe4, 0xc4, 0x0b, 0xa4, 0x01, 0x7e, 0xbe, 0x06, 0x57, 0xbf, 0x48, 0x80, 0xd0, 0x16, 0xac, 0x3a,
	0xb6, 0x02, 0x3a, 0xa0, 0x5b, 0x37, 0xaa, 0x8e, 0x8d, 0x1e, 0xc2, 0x2d, 0x12, 0x04, 0xa6, 0x47,
	0x82, 0xc0, 0xf1, 0x47, 0xa6, 0x63, 0x2b, 0xd5, 0x0e, 0xe8, 0xae, 0xe8, 0xef, 0x4c, 0x63, 0x75,
	0xb3, 0x1f, 0x04, 0xc7, 0x52, 0x31, 0xb0, 0x67, 0xb1, 0xba, 0xfb, 0x94, 0x78, 0xee, 0x87, 0xb8,
	0x68, 0x8f, 0x8d, 0x4d, 0x32, 0x67, 0x86, 0x3c, 0xb8, 0x47, 0x9f, 0x70, 0xea, 0xdb, 0xd4, 0x36,
	0x03, 0xe2, 0x8c, 0x4d, 0x11, 0x40, 0x02, 0x5c, 0x13, 0xc0, 0x1f, 0x4c, 0x63, 0xb5, 0x71, 0x3f,
	0xb5, 0xf8, 0x94, 0x38, 0x63, 0xc1, 0x6b, 0x70, 0x34, 0x8b, 0xd5, 0x03, 0x89, 0x5f, 0xfe, 0x39,
	0x36, 0x1a, 0x74, 0xe1, 0x2b, 0x1b, 0xdd, 0x81, 0xab, 0xec, 0x6b, 0x9f, 0x8e, 0x95, 0x95, 0x24,
	0x24, 0x7d, 0x7b, 0x16, 0xab, 0x9b, 0x12, 0x46, 0x88, 0xb1, 0x21, 0xd5, 0xc8, 0x84, 0x75, 0xe2,
	0xb1, 0xc8, 0xe7, 0xa6, 0xe3, 0x2b, 0xab, 0xc2, 0x56, 0x3f, 0x8f, 0xd5, 0xca, 0xef, 0xb1, 0x7a,
	0x67, 0xe4, 0xf0, 0xc7, 0xd1, 0x50, 0xb3, 0x98, 0xd7, 0xb3, 0x58, 0xe8, 0xb1, 0x30, 0xfd, 0xb9,
	0x1b, 0xda, 0x67, 0x3d, 0xfe, 0x34, 0xa0, 0xa1, 0x36, 0xf0, 0xf9, 0x2c, 0x56, 0xb7, 0xd3, 0x04,
	0x64, 0x40, 0xd8, 0x58, 0x97, 0xff, 0x07, 0x3e, 0x1a, 0x42, 0x98, 0xca, 0x59, 0xc4, 0x95, 0x35,
	0xe1, 0xe1, 0xe3, 0xa5, 0x3d, 0xec, 0x14, 0x3c, 0xb0, 0x88, 0x63, 0x23, 0xe5, 0xfd, 0x30, 0xe2,
	0xe8, 0x4b, 0x08, 0xad, 0x31, 0x25, 0x9c, 0xda, 0x26, 0xe1, 0xca, 0x8d, 0x0e, 0xe8, 0x6e, 0xdc,
	0x6b, 0x69, 0xf2, 0xf2, 0xb5, 0xec, 0xf2, 0xb5, 0x93, 0xec, 0xf2, 0xf5, 0x83, 0xc4, 0x7f, 0x8e,
	0x9a, 0x7f, 0x8b, 0x9f, 0xfd, 0xa1, 0x02, 0xa3, 0x9e, 0x0a, 0xfa, 0x1c, 0x7d, 0x0b, 0x60, 0xd3,
	0xf1, 0x39, 0x1d, 0xd3, 0x90, 0x9b, 0xc4, 0xb2, 0x22, 0x2f, 0x72, 0x13, 0x95, 0xb2, 0x2e, 0x02,
	0x39, 0x5e, 0x3a, 0x90, 0x7d, 0xe9, 0xb2, 0x0c, 0x13, 0x1b, 0x8d, 0x4c, 0xdc, 0xcf, 0xa5, 0xe8,
	0x7b, 0x00, 0x6f, 0x59, 0x2e, 0x0b, 0x93, 0xb2, 0x3a, 0xa5, 0xb4, 0xc0, 0xa2, 0x7e, 0x1d, 0x2c,
	0x76, 0x53, 0x6f, 0x9f, 0x50, 0x3a, 0xc7, 0x03, 0x3f, 0x07, 0x70, 0xf7, 0xf3, 0x90, 0xca, 0x0a,
	0xeb, 0x87, 0x21, 0xe5, 0x69, 0x71, 0xe7, 0xb5, 0x06, 0x5e, 0x5f, 0x6b, 0x8f, 0xe1, 0x56, 0x14,
	0xd2, 0xac, 0x74, 0x49, 0x10, 0x28, 0xd5, 0x4e, 0xad, 0xbb, 0x71, 0xef, 0x6d, 0xad, 0xac, 0xa7,
	0x35, 0xe1, 0xe8, 0x84, 0xe5, 0xcd, 0xa6, 0xdf, 0xce, 0x9b, 0xad, 0x08, 0x84, 0x8d, 0xcd, 0xe8,
	0x92, 0x5a, 0x10, 0xe0, 0x5f, 0x00, 0xdc, 0x59, 0xf8, 0x1c, 0xbd, 0xb5, 0xd0, 0xd3, 0x09, 0xe1,
	0x95, 0x57, 0x1a, 0xf5, 0x47, 0x00, 0x15, 0x81, 0x5e, 0xd2, 0x6f, 0x29, 0xe1, 0x77, 0xcb, 0x09,
	0xcf, 0x77, 0xef, 0x09, 0x13, 0xfe, 0x33, 0xe6, 0x6f, 0xce, 0x62, 0x55, 0x9d, 0x63, 0x5e, 0x82,
	0x8d, 0x8d, 0xdd, 0x44, 0xb5, 0x30, 0x02, 0xf0, 0x04, 0xb6, 0xae, 0x46, 0x46, 0x5d, 0xb8, 0x5d,
	0x04, 0xbb, 0x0c, 0x6b, 0x6b, 0x7e, 0x2e, 0x0c, 0x6c, 0xa4, 0xc1, 0xf5, 0xcb, 0x99, 0x53, 0x15,
	0x37, 0xd5, 0x98, 0xc5, 0xea, 0x4d, 0xc9, 0x2a, 0x1f, 0x27, 0x37, 0x26, 0x72, 0x84, 0xe0, 0x97,
	0x00, 0xee, 0xf7, 0x83, 0x60, 0x81, 0xd0, 0x72, 0xe9, 0x54, 0xe0, 0x0d, 0x2b, 0xe9, 0x53, 0x3a,
	0x96, 0x13, 0xd4, 0xc8, 0x8e, 0xe8, 0x3b, 0x00, 0x9b, 0x25, 0x79, 0x08, 0x95, 0x9a, 0x48, 0xb2,
	0xf6, 0xcf, 0x49, 0x2e, 0xa4, 0x58, 0xcd, 0xeb, 0xba, 0x0c, 0x15, 0x1b, 0x68, 0x61, 0x4e, 0x86,
	0xf8, 0xa7, 0x1a, 0x54, 0xae, 0x0c, 0xf0, 0xfe, 0x55, 0xa9, 0xd5, 0xf7, 0x67, 0xb1, 0x7a, 0xab,
	0xcc, 0x57, 0x92, 0xc0, 0x57, 0xf3, 0x7e, 0x08, 0xeb, 0x59, 0x76, 0x43, 0x51, 0x40, 0x75, 0xbd,
	0x99, 0x0f, 0xcd, 0x4b, 0x15, 0x36, 0xd6, 0xd3, 0xcc, 0x87, 0xe8, 0x1b, 0xd8, 0xe0, 0xec, 0x8c,
	0xfa, 0xa6, 0x97, 0xb4, 0xa8, 0x6d, 0xca, 0x51, 0x27, 0x5e, 0x8a, 0xba, 0xfe, 0x60, 0xe9, 0x76,
	0x6f, 0x49, 0x57, 0x25, 0x90, 0xd8, 0xd8, 0x11, 0xd2, 0x63, 0x21, 0xec, 0x0b, 0x19, 0xfa, 0x01,
	0x40, 0xc5, 0x62, 0x6e, 0xd2, 0xf6, 0x63, 0xe2, 0x9a, 0x2e, 0xb3, 0xce, 0x72, 0x0e, 0xf2, 0x3d,
	0x79, 0xb4, 0x34, 0x87, 0xb4, 0xfa, 0xaf, 0xc2, 0xc5, 0xc6, 0x5e, 0xae, 0x7a, 0x20, 0x34, 0x92,
	0x0d, 0xfe, 0x0d, 0xc0, 0xed, 0x93, 0x49, 0x2a, 0x3b, 0x22, 0x9c, 0x1c, 0x93, 0x00, 0xbd, 0x0f,
	0x37, 0x48, 0x32, 0x82, 0x4c, 0x9b, 0xfa, 0xcc, 0x4b, 0x07, 0xcf, 0xde, 0x2c, 0x56, 0x51, 0xfa,
	0x50, 0xe4, 0x4a, 0x6c, 0x40, 0x71, 0x3a, 0x4a, 0x0e, 0xaf, 0x8f, 0xad, 0xfa, 0x7f, 0xc7, 0xf6,
	0x57, 0x0d, 0xde, 0xfc, 0x8c, 0x93, 0xa1, 0x4b, 0x93, 0x0b, 0x90, 0x9b, 0xc8, 0x41, 0xbe, 0x89,
	0xe8, 0x6f, 0xcc, 0x62, 0xb5, 0x9e, 0xce, 0x6a, 0x1b, 0x8b, 0xc5, 0xa4, 0xf0, 0x60, 0x57, 0xaf,
	0xfd, 0xc1, 0xae, 0x5d, 0xcb, 0x83, 0xfd, 0xd1, 0xc2, 0xe8, 0x58, 0x11, 0x7d, 0x75, 0xfb, 0xdf,
	0x6f, 0x53, 0xab, 0xd7, 0xb1, 0x4d, 0x15, 0x17, 0x8c, 0xb5, 0xff, 0x6e, 0xc1, 0xd0, 0x1f, 0x9d,
	0xbf, 0x6c, 0x57, 0x7e, 0x9e, 0xb6, 0x2b, 0xe7, 0xd3, 0x36, 0x78, 0x31, 0x6d, 0x83, 0x3f, 0xa7,
	0x6d, 0xf0, 0xec, 0xa2, 0x5d, 0x79, 0x71, 0xd1, 0xae, 0xfc, 0x7a, 0xd1, 0xae, 0x7c, 0xd5, 0x2b,
	0xe4, 0x3c, 0x99, 0x88, 0x77, 0xd9, 0xe9, 0xa9, 0x63, 0x39, 0xc4, 0x4d, 0xcf, 0xbd, 0x6c, 0x5f,
	0x16, 0x17, 0x30, 0x5c, 0x13, 0x84, 0xde, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x49, 0xce, 0xe2,
	0xd0, 0x4c, 0x0b, 0x00, 0x00,
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClosingFeeAccumulated.Size()
		i -= size
		if _, err := m.ClosingFeeAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.InterestAccumulated.Size()
		i -= size
		if _, err := m.InterestAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVault(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExtendedPairVaultID != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ExtendedPairVaultID))
		i--
		dAtA[i] = 0x18
	}
	if m.AppMappingId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserVaultAssetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserVaultAssetMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserVaultAssetMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserVaultApp) > 0 {
		for iNdEx := len(m.UserVaultApp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserVaultApp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultToAppMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultToAppMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultToAppMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserExtendedPairVault) > 0 {
		for iNdEx := len(m.UserExtendedPairVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserExtendedPairVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppMappingId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedPairToVaultMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPairToVaultMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPairToVaultMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintVault(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppExtendedPairVaultMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppExtendedPairVaultMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppExtendedPairVaultMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairVaults) > 0 {
		for iNdEx := len(m.ExtendedPairVaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPairVaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Counter != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.AppMappingId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedPairVaultMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPairVaultMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPairVaultMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralLockedAmount.Size()
		i -= size
		if _, err := m.CollateralLockedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TokenMintedAmount.Size()
		i -= size
		if _, err := m.TokenMintedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultIds) > 0 {
		for iNdEx := len(m.VaultIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VaultIds[iNdEx])
			copy(dAtA[i:], m.VaultIds[iNdEx])
			i = encodeVarintVault(dAtA, i, uint64(len(m.VaultIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TvlLockedDataMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TvlLockedDataMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TvlLockedDataMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralLockedAmount.Size()
		i -= size
		if _, err := m.CollateralLockedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StableMintVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StableMintVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StableMintVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVault(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if m.ExtendedPairVaultID != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ExtendedPairVaultID))
		i--
		dAtA[i] = 0x28
	}
	if m.AppMappingId != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.AppMappingId != 0 {
		n += 1 + sovVault(uint64(m.AppMappingId))
	}
	if m.ExtendedPairVaultID != 0 {
		n += 1 + sovVault(uint64(m.ExtendedPairVaultID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovVault(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovVault(uint64(l))
	l = m.InterestAccumulated.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.ClosingFeeAccumulated.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func (m *UserVaultAssetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.UserVaultApp) > 0 {
		for _, e := range m.UserVaultApp {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func (m *VaultToAppMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppMappingId != 0 {
		n += 1 + sovVault(uint64(m.AppMappingId))
	}
	if len(m.UserExtendedPairVault) > 0 {
		for _, e := range m.UserExtendedPairVault {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func (m *ExtendedPairToVaultMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		n += 1 + sovVault(uint64(m.ExtendedPairId))
	}
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func (m *AppExtendedPairVaultMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppMappingId != 0 {
		n += 1 + sovVault(uint64(m.AppMappingId))
	}
	if m.Counter != 0 {
		n += 1 + sovVault(uint64(m.Counter))
	}
	if len(m.ExtendedPairVaults) > 0 {
		for _, e := range m.ExtendedPairVaults {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func (m *ExtendedPairVaultMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		n += 1 + sovVault(uint64(m.ExtendedPairId))
	}
	if len(m.VaultIds) > 0 {
		for _, s := range m.VaultIds {
			l = len(s)
			n += 1 + l + sovVault(uint64(l))
		}
	}
	l = m.TokenMintedAmount.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.CollateralLockedAmount.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func (m *TvlLockedDataMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.CollateralLockedAmount.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func (m *StableMintVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovVault(uint64(l))
	if m.AppMappingId != 0 {
		n += 1 + sovVault(uint64(m.AppMappingId))
	}
	if m.ExtendedPairVaultID != 0 {
		n += 1 + sovVault(uint64(m.ExtendedPairVaultID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovVault(uint64(l))
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultID", wireType)
			}
			m.ExtendedPairVaultID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairVaultID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingFeeAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosingFeeAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserVaultAssetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserVaultAssetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserVaultAssetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserVaultApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserVaultApp = append(m.UserVaultApp, &VaultToAppMapping{})
			if err := m.UserVaultApp[len(m.UserVaultApp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultToAppMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultToAppMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultToAppMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserExtendedPairVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserExtendedPairVault = append(m.UserExtendedPairVault, &ExtendedPairToVaultMapping{})
			if err := m.UserExtendedPairVault[len(m.UserExtendedPairVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedPairToVaultMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPairToVaultMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPairToVaultMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppExtendedPairVaultMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppExtendedPairVaultMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppExtendedPairVaultMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairVaults = append(m.ExtendedPairVaults, &ExtendedPairVaultMapping{})
			if err := m.ExtendedPairVaults[len(m.ExtendedPairVaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedPairVaultMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPairVaultMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPairVaultMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultIds = append(m.VaultIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMintedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenMintedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLockedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLockedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TvlLockedDataMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TvlLockedDataMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TvlLockedDataMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLockedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLockedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StableMintVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StableMintVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StableMintVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultID", wireType)
			}
			m.ExtendedPairVaultID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairVaultID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
