// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/vault/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VaultInfo struct {
	Id                     string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtendedPairID         uint64                                 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Owner                  string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Collateral             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=collateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral" yaml:"collateral"`
	Debt                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=debt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"debt" yaml:"debt"`
	CollateralizationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=collateralization_ratio,json=collateralizationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateralization_ratio" yaml:"collateralization_ratio"`
	ExtendedPairName       string                                 `protobuf:"bytes,7,opt,name=extended_pair_name,json=extendedPairName,proto3" json:"extended_pair_name,omitempty" yaml:"extended_pair_name"`
	InterestRate           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=interest_rate,json=interestRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_rate" yaml:"interest_rate"`
	AssetInDenom           string                                 `protobuf:"bytes,9,opt,name=asset_in_denom,json=assetInDenom,proto3" json:"asset_in_denom,omitempty" yaml:"asset_in_denom"`
	AssetOutDenom          string                                 `protobuf:"bytes,10,opt,name=asset_out_denom,json=assetOutDenom,proto3" json:"asset_out_denom,omitempty" yaml:"asset_out_denom"`
	MinCr                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=min_cr,json=minCr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_cr" yaml:"min_cr"`
}

func (m *VaultInfo) Reset()         { *m = VaultInfo{} }
func (m *VaultInfo) String() string { return proto.CompactTextString(m) }
func (*VaultInfo) ProtoMessage()    {}
func (*VaultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{0}
}
func (m *VaultInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultInfo.Merge(m, src)
}
func (m *VaultInfo) XXX_Size() int {
	return m.Size()
}
func (m *VaultInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VaultInfo proto.InternalMessageInfo

type QueryVaultRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryVaultRequest) Reset()         { *m = QueryVaultRequest{} }
func (m *QueryVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultRequest) ProtoMessage()    {}
func (*QueryVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{1}
}
func (m *QueryVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultRequest.Merge(m, src)
}
func (m *QueryVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultRequest proto.InternalMessageInfo

type QueryVaultResponse struct {
	Vault Vault `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault" yaml:"vault"`
}

func (m *QueryVaultResponse) Reset()         { *m = QueryVaultResponse{} }
func (m *QueryVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultResponse) ProtoMessage()    {}
func (*QueryVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{2}
}
func (m *QueryVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultResponse.Merge(m, src)
}
func (m *QueryVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultResponse proto.InternalMessageInfo

type QueryVaultInfoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryVaultInfoRequest) Reset()         { *m = QueryVaultInfoRequest{} }
func (m *QueryVaultInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoRequest) ProtoMessage()    {}
func (*QueryVaultInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{3}
}
func (m *QueryVaultInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoRequest.Merge(m, src)
}
func (m *QueryVaultInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoRequest proto.InternalMessageInfo

type QueryVaultInfoResponse struct {
	VaultsInfo VaultInfo `protobuf:"bytes,1,opt,name=vaultsInfo,proto3" json:"vaultsInfo" yaml:"vaultsInfo"`
}

func (m *QueryVaultInfoResponse) Reset()         { *m = QueryVaultInfoResponse{} }
func (m *QueryVaultInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoResponse) ProtoMessage()    {}
func (*QueryVaultInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{4}
}
func (m *QueryVaultInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoResponse.Merge(m, src)
}
func (m *QueryVaultInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoResponse proto.InternalMessageInfo

type QueryVaultInfoByAppByOwnerRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryVaultInfoByAppByOwnerRequest) Reset()         { *m = QueryVaultInfoByAppByOwnerRequest{} }
func (m *QueryVaultInfoByAppByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoByAppByOwnerRequest) ProtoMessage()    {}
func (*QueryVaultInfoByAppByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{5}
}
func (m *QueryVaultInfoByAppByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoByAppByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoByAppByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoByAppByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoByAppByOwnerRequest.Merge(m, src)
}
func (m *QueryVaultInfoByAppByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoByAppByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoByAppByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoByAppByOwnerRequest proto.InternalMessageInfo

type QueryVaultInfoByAppByOwnerResponse struct {
	VaultsInfo []VaultInfo         `protobuf:"bytes,1,rep,name=vaultsInfo,proto3" json:"vaultsInfo" yaml:"vaultsInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultInfoByAppByOwnerResponse) Reset()         { *m = QueryVaultInfoByAppByOwnerResponse{} }
func (m *QueryVaultInfoByAppByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoByAppByOwnerResponse) ProtoMessage()    {}
func (*QueryVaultInfoByAppByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{6}
}
func (m *QueryVaultInfoByAppByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoByAppByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoByAppByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoByAppByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoByAppByOwnerResponse.Merge(m, src)
}
func (m *QueryVaultInfoByAppByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoByAppByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoByAppByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoByAppByOwnerResponse proto.InternalMessageInfo

type QueryAllVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsRequest) Reset()         { *m = QueryAllVaultsRequest{} }
func (m *QueryAllVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsRequest) ProtoMessage()    {}
func (*QueryAllVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{7}
}
func (m *QueryAllVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsRequest.Merge(m, src)
}
func (m *QueryAllVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsRequest proto.InternalMessageInfo

type QueryAllVaultsResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsResponse) Reset()         { *m = QueryAllVaultsResponse{} }
func (m *QueryAllVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsResponse) ProtoMessage()    {}
func (*QueryAllVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{8}
}
func (m *QueryAllVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsResponse.Merge(m, src)
}
func (m *QueryAllVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsResponse proto.InternalMessageInfo

type QueryAllVaultsByProductRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryAllVaultsByProductRequest) Reset()         { *m = QueryAllVaultsByProductRequest{} }
func (m *QueryAllVaultsByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsByProductRequest) ProtoMessage()    {}
func (*QueryAllVaultsByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{9}
}
func (m *QueryAllVaultsByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByProductRequest.Merge(m, src)
}
func (m *QueryAllVaultsByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByProductRequest proto.InternalMessageInfo

type QueryAllVaultsByProductResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByProductResponse) Reset()         { *m = QueryAllVaultsByProductResponse{} }
func (m *QueryAllVaultsByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsByProductResponse) ProtoMessage()    {}
func (*QueryAllVaultsByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{10}
}
func (m *QueryAllVaultsByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByProductResponse.Merge(m, src)
}
func (m *QueryAllVaultsByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByProductResponse proto.InternalMessageInfo

type QueryAllVaultsByAppAndExtendedPairRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Reset() {
	*m = QueryAllVaultsByAppAndExtendedPairRequest{}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVaultsByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryAllVaultsByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{11}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryAllVaultsByAppAndExtendedPairResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Reset() {
	*m = QueryAllVaultsByAppAndExtendedPairResponse{}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVaultsByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryAllVaultsByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{12}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryVaultByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultByProductRequest) Reset()         { *m = QueryVaultByProductRequest{} }
func (m *QueryVaultByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByProductRequest) ProtoMessage()    {}
func (*QueryVaultByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{13}
}
func (m *QueryVaultByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByProductRequest.Merge(m, src)
}
func (m *QueryVaultByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByProductRequest proto.InternalMessageInfo

type QueryVaultByProductResponse struct {
	VaultIds []string `protobuf:"bytes,1,rep,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
}

func (m *QueryVaultByProductResponse) Reset()         { *m = QueryVaultByProductResponse{} }
func (m *QueryVaultByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultByProductResponse) ProtoMessage()    {}
func (*QueryVaultByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{14}
}
func (m *QueryVaultByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultByProductResponse.Merge(m, src)
}
func (m *QueryVaultByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultByProductResponse proto.InternalMessageInfo

type QueryAllVaultByOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultByOwnerRequest) Reset()         { *m = QueryAllVaultByOwnerRequest{} }
func (m *QueryAllVaultByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultByOwnerRequest) ProtoMessage()    {}
func (*QueryAllVaultByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{15}
}
func (m *QueryAllVaultByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultByOwnerRequest.Merge(m, src)
}
func (m *QueryAllVaultByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultByOwnerRequest proto.InternalMessageInfo

type QueryAllVaultByOwnerResponse struct {
	VaultIds []string `protobuf:"bytes,1,rep,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
}

func (m *QueryAllVaultByOwnerResponse) Reset()         { *m = QueryAllVaultByOwnerResponse{} }
func (m *QueryAllVaultByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultByOwnerResponse) ProtoMessage()    {}
func (*QueryAllVaultByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{16}
}
func (m *QueryAllVaultByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultByOwnerResponse.Merge(m, src)
}
func (m *QueryAllVaultByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultByOwnerResponse proto.InternalMessageInfo

type QueryTokenMintedAllProductsByPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedAllProductsByPairRequest) Reset() {
	*m = QueryTokenMintedAllProductsByPairRequest{}
}
func (m *QueryTokenMintedAllProductsByPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAllProductsByPairRequest) ProtoMessage()    {}
func (*QueryTokenMintedAllProductsByPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{17}
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsByPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsByPairRequest proto.InternalMessageInfo

type QueryTokenMintedAllProductsByPairResponse struct {
	TokenMinted github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_minted,json=tokenMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_minted" yaml:"token_minted"`
}

func (m *QueryTokenMintedAllProductsByPairResponse) Reset() {
	*m = QueryTokenMintedAllProductsByPairResponse{}
}
func (m *QueryTokenMintedAllProductsByPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedAllProductsByPairResponse) ProtoMessage() {}
func (*QueryTokenMintedAllProductsByPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{18}
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.Merge(m, src)
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAllProductsByPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAllProductsByPairResponse proto.InternalMessageInfo

type QueryTokenMintedByProductAssetWiseRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedByProductAssetWiseRequest) Reset() {
	*m = QueryTokenMintedByProductAssetWiseRequest{}
}
func (m *QueryTokenMintedByProductAssetWiseRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedByProductAssetWiseRequest) ProtoMessage() {}
func (*QueryTokenMintedByProductAssetWiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{19}
}
func (m *QueryTokenMintedByProductAssetWiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedByProductAssetWiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedByProductAssetWiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedByProductAssetWiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedByProductAssetWiseRequest.Merge(m, src)
}
func (m *QueryTokenMintedByProductAssetWiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedByProductAssetWiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedByProductAssetWiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedByProductAssetWiseRequest proto.InternalMessageInfo

type QueryTokenMintedByProductAssetWiseResponse struct {
	MintedData []MintedDataMap `protobuf:"bytes,1,rep,name=minted_data,json=mintedData,proto3" json:"minted_data" yaml:"minted_data"`
}

func (m *QueryTokenMintedByProductAssetWiseResponse) Reset() {
	*m = QueryTokenMintedByProductAssetWiseResponse{}
}
func (m *QueryTokenMintedByProductAssetWiseResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedByProductAssetWiseResponse) ProtoMessage() {}
func (*QueryTokenMintedByProductAssetWiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{20}
}
func (m *QueryTokenMintedByProductAssetWiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedByProductAssetWiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedByProductAssetWiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedByProductAssetWiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedByProductAssetWiseResponse.Merge(m, src)
}
func (m *QueryTokenMintedByProductAssetWiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedByProductAssetWiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedByProductAssetWiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedByProductAssetWiseResponse proto.InternalMessageInfo

type QueryVaultCountByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultCountByProductRequest) Reset()         { *m = QueryVaultCountByProductRequest{} }
func (m *QueryVaultCountByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductRequest) ProtoMessage()    {}
func (*QueryVaultCountByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{21}
}
func (m *QueryVaultCountByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductRequest.Merge(m, src)
}
func (m *QueryVaultCountByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductRequest proto.InternalMessageInfo

type QueryVaultCountByProductResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByProductResponse) Reset()         { *m = QueryVaultCountByProductResponse{} }
func (m *QueryVaultCountByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductResponse) ProtoMessage()    {}
func (*QueryVaultCountByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{22}
}
func (m *QueryVaultCountByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductResponse.Merge(m, src)
}
func (m *QueryVaultCountByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductResponse proto.InternalMessageInfo

type QueryVaultCountByProductAndPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultCountByProductAndPairRequest) Reset() {
	*m = QueryVaultCountByProductAndPairRequest{}
}
func (m *QueryVaultCountByProductAndPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductAndPairRequest) ProtoMessage()    {}
func (*QueryVaultCountByProductAndPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{23}
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductAndPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductAndPairRequest.Merge(m, src)
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductAndPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductAndPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductAndPairRequest proto.InternalMessageInfo

type QueryVaultCountByProductAndPairResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByProductAndPairResponse) Reset() {
	*m = QueryVaultCountByProductAndPairResponse{}
}
func (m *QueryVaultCountByProductAndPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByProductAndPairResponse) ProtoMessage()    {}
func (*QueryVaultCountByProductAndPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{24}
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByProductAndPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByProductAndPairResponse.Merge(m, src)
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByProductAndPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByProductAndPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByProductAndPairResponse proto.InternalMessageInfo

type QueryTotalValueLockedByProductExtendedPairRequest struct {
	ProductId      uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Reset() {
	*m = QueryTotalValueLockedByProductExtendedPairRequest{}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByProductExtendedPairRequest) ProtoMessage() {}
func (*QueryTotalValueLockedByProductExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{25}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.Merge(m, src)
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairRequest proto.InternalMessageInfo

type QueryTotalValueLockedByProductExtendedPairResponse struct {
	ValueLocked *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=value_locked,json=valueLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"value_locked,omitempty"`
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Reset() {
	*m = QueryTotalValueLockedByProductExtendedPairResponse{}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByProductExtendedPairResponse) ProtoMessage() {}
func (*QueryTotalValueLockedByProductExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{26}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.Merge(m, src)
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByProductExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairIDByProductRequest struct {
	ProductId  uint64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" yaml:"product_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairIDByProductRequest) Reset()         { *m = QueryExtendedPairIDByProductRequest{} }
func (m *QueryExtendedPairIDByProductRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDByProductRequest) ProtoMessage()    {}
func (*QueryExtendedPairIDByProductRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{27}
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDByProductRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDByProductRequest.Merge(m, src)
}
func (m *QueryExtendedPairIDByProductRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDByProductRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDByProductRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDByProductRequest proto.InternalMessageInfo

type QueryExtendedPairIDByProductResponse struct {
	ExtendedPairIds []uint64 `protobuf:"varint,1,rep,packed,name=extended_pair_ids,json=extendedPairIds,proto3" json:"extended_pair_ids,omitempty" yaml:"extended_pair_ids"`
}

func (m *QueryExtendedPairIDByProductResponse) Reset()         { *m = QueryExtendedPairIDByProductResponse{} }
func (m *QueryExtendedPairIDByProductResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDByProductResponse) ProtoMessage()    {}
func (*QueryExtendedPairIDByProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{28}
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDByProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDByProductResponse.Merge(m, src)
}
func (m *QueryExtendedPairIDByProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDByProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDByProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDByProductResponse proto.InternalMessageInfo

type QueryStableVaultInfoRequest struct {
	StableVaultId string `protobuf:"bytes,1,opt,name=stable_vault_id,json=stableVaultId,proto3" json:"stable_vault_id,omitempty" yaml:"stable_vault_id"`
}

func (m *QueryStableVaultInfoRequest) Reset()         { *m = QueryStableVaultInfoRequest{} }
func (m *QueryStableVaultInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultInfoRequest) ProtoMessage()    {}
func (*QueryStableVaultInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{29}
}
func (m *QueryStableVaultInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultInfoRequest.Merge(m, src)
}
func (m *QueryStableVaultInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultInfoRequest proto.InternalMessageInfo

type QueryStableVaultInfoResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultInfoResponse) Reset()         { *m = QueryStableVaultInfoResponse{} }
func (m *QueryStableVaultInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultInfoResponse) ProtoMessage()    {}
func (*QueryStableVaultInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{30}
}
func (m *QueryStableVaultInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultInfoResponse.Merge(m, src)
}
func (m *QueryStableVaultInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultInfoResponse proto.InternalMessageInfo

type QueryAllStableVaultsRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryAllStableVaultsRequest) Reset()         { *m = QueryAllStableVaultsRequest{} }
func (m *QueryAllStableVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStableVaultsRequest) ProtoMessage()    {}
func (*QueryAllStableVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{31}
}
func (m *QueryAllStableVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStableVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStableVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStableVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStableVaultsRequest.Merge(m, src)
}
func (m *QueryAllStableVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStableVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStableVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStableVaultsRequest proto.InternalMessageInfo

type QueryAllStableVaultsResponse struct {
	StableMintVault []*StableMintVault `protobuf:"bytes,1,rep,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryAllStableVaultsResponse) Reset()         { *m = QueryAllStableVaultsResponse{} }
func (m *QueryAllStableVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStableVaultsResponse) ProtoMessage()    {}
func (*QueryAllStableVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{32}
}
func (m *QueryAllStableVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStableVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStableVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStableVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStableVaultsResponse.Merge(m, src)
}
func (m *QueryAllStableVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStableVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStableVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStableVaultsResponse proto.InternalMessageInfo

type QueryStableVaultByProductExtendedPairRequest struct {
	AppId          uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
}

func (m *QueryStableVaultByProductExtendedPairRequest) Reset() {
	*m = QueryStableVaultByProductExtendedPairRequest{}
}
func (m *QueryStableVaultByProductExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByProductExtendedPairRequest) ProtoMessage() {}
func (*QueryStableVaultByProductExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{33}
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.Merge(m, src)
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByProductExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByProductExtendedPairRequest proto.InternalMessageInfo

type QueryStableVaultByProductExtendedPairResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultByProductExtendedPairResponse) Reset() {
	*m = QueryStableVaultByProductExtendedPairResponse{}
}
func (m *QueryStableVaultByProductExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByProductExtendedPairResponse) ProtoMessage() {}
func (*QueryStableVaultByProductExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{34}
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.Merge(m, src)
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByProductExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByProductExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest struct {
	AppId          uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest{}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{35}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse struct {
	ExtendedPairVaultMapping *ExtendedPairVaultMapping `protobuf:"bytes,1,opt,name=extendedPairVaultMapping,proto3" json:"extendedPairVaultMapping,omitempty" yaml:"extendedPairVaultMapping"`
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse{}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{36}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByAppRequest{}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{37}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppResponse struct {
	ExtendedPairVaultMapping []*ExtendedPairVaultMapping `protobuf:"bytes,1,rep,name=extendedPairVaultMapping,proto3" json:"extendedPairVaultMapping,omitempty" yaml:"extendedPairVaultMapping"`
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByAppResponse{}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{38}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByOwnerAndAppRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AppId uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByOwnerAndAppRequest{}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByOwnerAndAppRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByOwnerAndAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{39}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByOwnerAndAppResponse struct {
	ExtendedPairtoVaultMapping []*ExtendedPairToVaultMapping `protobuf:"bytes,1,rep,name=extendedPairtoVaultMapping,proto3" json:"extendedPairtoVaultMapping,omitempty" yaml:"extendedPairtoVaultMapping"`
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByOwnerAndAppResponse{}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByOwnerAndAppResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByOwnerAndAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{40}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AppId        uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPair uint64 `protobuf:"varint,3,opt,name=extended_pair,json=extendedPair,proto3" json:"extended_pair,omitempty" yaml:"extended_pair"`
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest{}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{41}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse struct {
	VaultId string `protobuf:"bytes,1,opt,name=vaultId,proto3" json:"vaultId,omitempty" yaml:"vaultId"`
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse{}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{42}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse proto.InternalMessageInfo

type QueryTVLLockedByAppOfAllExtendedPairsRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) Reset() {
	*m = QueryTVLLockedByAppOfAllExtendedPairsRequest{}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTVLLockedByAppOfAllExtendedPairsRequest) ProtoMessage() {}
func (*QueryTVLLockedByAppOfAllExtendedPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{43}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsRequest.Merge(m, src)
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsRequest proto.InternalMessageInfo

type QueryTVLLockedByAppOfAllExtendedPairsResponse struct {
	Tvldata []TvlLockedDataMap `protobuf:"bytes,1,rep,name=tvldata,proto3" json:"tvldata" yaml:"tvldata"`
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) Reset() {
	*m = QueryTVLLockedByAppOfAllExtendedPairsResponse{}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTVLLockedByAppOfAllExtendedPairsResponse) ProtoMessage() {}
func (*QueryTVLLockedByAppOfAllExtendedPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{44}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsResponse.Merge(m, src)
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLLockedByAppOfAllExtendedPairsResponse proto.InternalMessageInfo

type QueryTotalTVLByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryTotalTVLByAppRequest) Reset()         { *m = QueryTotalTVLByAppRequest{} }
func (m *QueryTotalTVLByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTVLByAppRequest) ProtoMessage()    {}
func (*QueryTotalTVLByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{45}
}
func (m *QueryTotalTVLByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTVLByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTVLByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTVLByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTVLByAppRequest.Merge(m, src)
}
func (m *QueryTotalTVLByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTVLByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTVLByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTVLByAppRequest proto.InternalMessageInfo

type QueryTotalTVLByAppResponse struct {
	CollateralLocked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=collateral_locked,json=collateralLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked" yaml:"collateral_locked"`
}

func (m *QueryTotalTVLByAppResponse) Reset()         { *m = QueryTotalTVLByAppResponse{} }
func (m *QueryTotalTVLByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTVLByAppResponse) ProtoMessage()    {}
func (*QueryTotalTVLByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{46}
}
func (m *QueryTotalTVLByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTVLByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTVLByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTVLByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTVLByAppResponse.Merge(m, src)
}
func (m *QueryTotalTVLByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTVLByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTVLByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTVLByAppResponse proto.InternalMessageInfo

type QueryUserMyPositionByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryUserMyPositionByAppRequest) Reset()         { *m = QueryUserMyPositionByAppRequest{} }
func (m *QueryUserMyPositionByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserMyPositionByAppRequest) ProtoMessage()    {}
func (*QueryUserMyPositionByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{47}
}
func (m *QueryUserMyPositionByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserMyPositionByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserMyPositionByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserMyPositionByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMyPositionByAppRequest.Merge(m, src)
}
func (m *QueryUserMyPositionByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserMyPositionByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMyPositionByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMyPositionByAppRequest proto.InternalMessageInfo

type QueryUserMyPositionByAppResponse struct {
	CollateralLocked  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=collateral_locked,json=collateralLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked" yaml:"collateral_locked"`
	TotalDue          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_due,json=totalDue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_due" yaml:"total_due"`
	AvailableToBorrow github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=available_to_borrow,json=availableToBorrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_to_borrow" yaml:"available_to_borrow"`
	AverageCrRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=average_cr_ratio,json=averageCrRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"average_cr_ratio" yaml:"average_cr_ratio"`
}

func (m *QueryUserMyPositionByAppResponse) Reset()         { *m = QueryUserMyPositionByAppResponse{} }
func (m *QueryUserMyPositionByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserMyPositionByAppResponse) ProtoMessage()    {}
func (*QueryUserMyPositionByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{48}
}
func (m *QueryUserMyPositionByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserMyPositionByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserMyPositionByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserMyPositionByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMyPositionByAppResponse.Merge(m, src)
}
func (m *QueryUserMyPositionByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserMyPositionByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMyPositionByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMyPositionByAppResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VaultInfo)(nil), "comdex.vault.v1beta1.VaultInfo")
	proto.RegisterType((*QueryVaultRequest)(nil), "comdex.vault.v1beta1.QueryVaultRequest")
	proto.RegisterType((*QueryVaultResponse)(nil), "comdex.vault.v1beta1.QueryVaultResponse")
	proto.RegisterType((*QueryVaultInfoRequest)(nil), "comdex.vault.v1beta1.QueryVaultInfoRequest")
	proto.RegisterType((*QueryVaultInfoResponse)(nil), "comdex.vault.v1beta1.QueryVaultInfoResponse")
	proto.RegisterType((*QueryVaultInfoByAppByOwnerRequest)(nil), "comdex.vault.v1beta1.QueryVaultInfoByAppByOwnerRequest")
	proto.RegisterType((*QueryVaultInfoByAppByOwnerResponse)(nil), "comdex.vault.v1beta1.QueryVaultInfoByAppByOwnerResponse")
	proto.RegisterType((*QueryAllVaultsRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultsRequest")
	proto.RegisterType((*QueryAllVaultsResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultsResponse")
	proto.RegisterType((*QueryAllVaultsByProductRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultsByProductRequest")
	proto.RegisterType((*QueryAllVaultsByProductResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultsByProductResponse")
	proto.RegisterType((*QueryAllVaultsByAppAndExtendedPairRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultsByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryAllVaultsByAppAndExtendedPairResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultsByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryVaultByProductRequest)(nil), "comdex.vault.v1beta1.QueryVaultByProductRequest")
	proto.RegisterType((*QueryVaultByProductResponse)(nil), "comdex.vault.v1beta1.QueryVaultByProductResponse")
	proto.RegisterType((*QueryAllVaultByOwnerRequest)(nil), "comdex.vault.v1beta1.QueryAllVaultByOwnerRequest")
	proto.RegisterType((*QueryAllVaultByOwnerResponse)(nil), "comdex.vault.v1beta1.QueryAllVaultByOwnerResponse")
	proto.RegisterType((*QueryTokenMintedAllProductsByPairRequest)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsByPairRequest")
	proto.RegisterType((*QueryTokenMintedAllProductsByPairResponse)(nil), "comdex.vault.v1beta1.QueryTokenMintedAllProductsByPairResponse")
	proto.RegisterType((*QueryTokenMintedByProductAssetWiseRequest)(nil), "comdex.vault.v1beta1.QueryTokenMintedByProductAssetWiseRequest")
	proto.RegisterType((*QueryTokenMintedByProductAssetWiseResponse)(nil), "comdex.vault.v1beta1.QueryTokenMintedByProductAssetWiseResponse")
	proto.RegisterType((*QueryVaultCountByProductRequest)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductRequest")
	proto.RegisterType((*QueryVaultCountByProductResponse)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductResponse")
	proto.RegisterType((*QueryVaultCountByProductAndPairRequest)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductAndPairRequest")
	proto.RegisterType((*QueryVaultCountByProductAndPairResponse)(nil), "comdex.vault.v1beta1.QueryVaultCountByProductAndPairResponse")
	proto.RegisterType((*QueryTotalValueLockedByProductExtendedPairRequest)(nil), "comdex.vault.v1beta1.QueryTotalValueLockedByProductExtendedPairRequest")
	proto.RegisterType((*QueryTotalValueLockedByProductExtendedPairResponse)(nil), "comdex.vault.v1beta1.QueryTotalValueLockedByProductExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairIDByProductRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairIDByProductRequest")
	proto.RegisterType((*QueryExtendedPairIDByProductResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairIDByProductResponse")
	proto.RegisterType((*QueryStableVaultInfoRequest)(nil), "comdex.vault.v1beta1.QueryStableVaultInfoRequest")
	proto.RegisterType((*QueryStableVaultInfoResponse)(nil), "comdex.vault.v1beta1.QueryStableVaultInfoResponse")
	proto.RegisterType((*QueryAllStableVaultsRequest)(nil), "comdex.vault.v1beta1.QueryAllStableVaultsRequest")
	proto.RegisterType((*QueryAllStableVaultsResponse)(nil), "comdex.vault.v1beta1.QueryAllStableVaultsResponse")
	proto.RegisterType((*QueryStableVaultByProductExtendedPairRequest)(nil), "comdex.vault.v1beta1.QueryStableVaultByProductExtendedPairRequest")
	proto.RegisterType((*QueryStableVaultByProductExtendedPairResponse)(nil), "comdex.vault.v1beta1.QueryStableVaultByProductExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByAppRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByAppResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByOwnerAndAppRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByOwnerAndAppRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByOwnerAndAppResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByOwnerAndAppResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse)(nil), "comdex.vault.v1beta1.QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse")
	proto.RegisterType((*QueryTVLLockedByAppOfAllExtendedPairsRequest)(nil), "comdex.vault.v1beta1.QueryTVLLockedByAppOfAllExtendedPairsRequest")
	proto.RegisterType((*QueryTVLLockedByAppOfAllExtendedPairsResponse)(nil), "comdex.vault.v1beta1.QueryTVLLockedByAppOfAllExtendedPairsResponse")
	proto.RegisterType((*QueryTotalTVLByAppRequest)(nil), "comdex.vault.v1beta1.QueryTotalTVLByAppRequest")
	proto.RegisterType((*QueryTotalTVLByAppResponse)(nil), "comdex.vault.v1beta1.QueryTotalTVLByAppResponse")
	proto.RegisterType((*QueryUserMyPositionByAppRequest)(nil), "comdex.vault.v1beta1.QueryUserMyPositionByAppRequest")
	proto.RegisterType((*QueryUserMyPositionByAppResponse)(nil), "comdex.vault.v1beta1.QueryUserMyPositionByAppResponse")
}

func init() { proto.RegisterFile("comdex/vault/v1beta1/query.proto", fileDescriptor_8d35126a97363346) }

var fileDescriptor_8d35126a97363346 = []byte{
	// 2758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5b, 0x4d, 0x6c, 0xdc, 0xc6,
	0xf5, 0x17, 0x57, 0x92, 0x6d, 0x8d, 0x3e, 0x2c, 0x8d, 0x65, 0x7b, 0xbd, 0x76, 0x76, 0xed, 0x71,
	0xfc, 0x11, 0xc7, 0xdc, 0xb5, 0x94, 0xd8, 0xf1, 0xdf, 0x89, 0x3f, 0x44, 0xc9, 0x1f, 0x4a, 0xac,
	0x58, 0x62, 0x64, 0xc5, 0xc9, 0xbf, 0xf1, 0x96, 0x5a, 0xd2, 0x32, 0x61, 0x2e, 0xc9, 0x2c, 0xb9,
	0x72, 0x54, 0x57, 0x17, 0xb7, 0x0d, 0x90, 0x1c, 0xea, 0x14, 0x45, 0x5a, 0xa0, 0x3d, 0xb4, 0x87,
	0x1e, 0x7a, 0xe9, 0x21, 0x40, 0xd1, 0x43, 0x81, 0x16, 0x09, 0xd0, 0x02, 0x46, 0x81, 0xb6, 0x09,
	0x8a, 0x00, 0x45, 0x0e, 0x8b, 0x56, 0xee, 0xb1, 0x68, 0x81, 0xbd, 0xe4, 0x50, 0xb4, 0x28, 0x38,
	0x1c, 0x2e, 0x3f, 0x96, 0x1c, 0x92, 0x2b, 0x2b, 0xae, 0xdb, 0x8b, 0xbd, 0x4b, 0xce, 0xbc, 0xf7,
	0x7e, 0xbf, 0x99, 0xf7, 0xe6, 0xcd, 0x7b, 0x2b, 0xb0, 0xb7, 0xa2, 0x55, 0x45, 0xe9, 0xad, 0xd2,
	0xb2, 0x50, 0x57, 0xcc, 0xd2, 0xf2, 0xd8, 0xa2, 0x64, 0x0a, 0x63, 0xa5, 0x37, 0xeb, 0x52, 0x6d,
	0xa5, 0xa8, 0xd7, 0x34, 0x53, 0x83, 0xa3, 0xf6, 0x88, 0x22, 0x1e, 0x51, 0x24, 0x23, 0x72, 0x47,
	0x2a, 0x9a, 0x51, 0xd5, 0x8c, 0xd2, 0xa2, 0x60, 0x48, 0xf6, 0xf0, 0xd6, 0x64, 0x5d, 0x58, 0x92,
	0x55, 0xc1, 0x94, 0x35, 0xd5, 0x96, 0x90, 0x1b, 0x5d, 0xd2, 0x96, 0x34, 0xfc, 0xb1, 0x64, 0x7d,
	0x22, 0x4f, 0xf7, 0x2c, 0x69, 0xda, 0x92, 0x22, 0x95, 0x04, 0x5d, 0x2e, 0x09, 0xaa, 0xaa, 0x99,
	0x78, 0x8a, 0x41, 0xde, 0x86, 0xdb, 0x65, 0xdb, 0x80, 0x47, 0xa0, 0xcf, 0x37, 0x81, 0xbe, 0x05,
	0xeb, 0xfb, 0xb4, 0x7a, 0x43, 0x83, 0x43, 0x20, 0x23, 0x8b, 0x59, 0x66, 0x2f, 0x73, 0xb8, 0x8f,
	0xcf, 0xc8, 0x22, 0x7c, 0x15, 0x0c, 0x4b, 0x6f, 0x99, 0x92, 0x2a, 0x4a, 0x62, 0x59, 0x17, 0xe4,
	0x5a, 0x59, 0x16, 0xb3, 0x99, 0xbd, 0xcc, 0xe1, 0x1e, 0x8e, 0x5d, 0x6b, 0x14, 0x86, 0xce, 0x93,
	0x77, 0xb3, 0x82, 0x5c, 0x9b, 0x9e, 0x6a, 0x36, 0x0a, 0x3b, 0x57, 0x84, 0xaa, 0x72, 0x0a, 0x05,
	0xe7, 0x20, 0x7e, 0x48, 0xf2, 0x0e, 0x15, 0xe1, 0x41, 0xd0, 0xab, 0xdd, 0x56, 0xa5, 0x5a, 0xb6,
	0xdb, 0xd2, 0xc5, 0x0d, 0x37, 0x1b, 0x85, 0x01, 0x7b, 0x2e, 0x7e, 0x8c, 0x78, 0xfb, 0x35, 0xac,
	0x00, 0x50, 0xd1, 0x14, 0x45, 0x30, 0xa5, 0x9a, 0xa0, 0x64, 0x7b, 0xf0, 0xe0, 0xc9, 0xfb, 0x8d,
	0x42, 0xd7, 0x67, 0x8d, 0xc2, 0xc1, 0x25, 0xd9, 0xbc, 0x59, 0x5f, 0x2c, 0x56, 0xb4, 0x6a, 0x89,
	0xf0, 0x68, 0xff, 0xc7, 0x1a, 0xe2, 0xad, 0x92, 0xb9, 0xa2, 0x4b, 0x46, 0x71, 0x5a, 0x35, 0x9b,
	0x8d, 0xc2, 0x88, 0x2d, 0xda, 0x95, 0x84, 0x78, 0x8f, 0x58, 0x38, 0x07, 0x7a, 0x44, 0x69, 0xd1,
	0xcc, 0xf6, 0x62, 0xf1, 0xa7, 0x53, 0x8b, 0xef, 0xb7, 0xc5, 0x5b, 0x32, 0x10, 0x8f, 0x45, 0xc1,
	0x77, 0x18, 0xb0, 0xd3, 0xd5, 0x20, 0x7f, 0x05, 0xaf, 0x4a, 0xb9, 0x66, 0xfd, 0x97, 0xdd, 0x84,
	0xd5, 0xcc, 0xa6, 0x50, 0x33, 0x25, 0x55, 0x9a, 0x8d, 0x42, 0x3e, 0x88, 0xc2, 0x27, 0x16, 0xf1,
	0x3b, 0xda, 0xde, 0xf0, 0xd6, 0xbf, 0xf0, 0x25, 0x00, 0xfd, 0x0b, 0xa2, 0x0a, 0x55, 0x29, 0xbb,
	0x19, 0x5b, 0xf1, 0x44, 0xb3, 0x51, 0xd8, 0x15, 0xb6, 0x68, 0xd6, 0x18, 0xc4, 0x0f, 0x7b, 0x97,
	0xed, 0x65, 0xa1, 0x2a, 0xc1, 0x5b, 0x60, 0x50, 0x56, 0x4d, 0xa9, 0x26, 0x19, 0xa6, 0xa5, 0x57,
	0xca, 0x6e, 0xc1, 0x72, 0x2e, 0xa4, 0x46, 0x33, 0x6a, 0x6b, 0xf5, 0x09, 0x43, 0xfc, 0x80, 0xf3,
	0x9d, 0x17, 0x4c, 0x09, 0x9e, 0x05, 0x43, 0x82, 0x61, 0x48, 0x66, 0x59, 0x56, 0xcb, 0xa2, 0xa4,
	0x6a, 0xd5, 0x6c, 0x1f, 0xd6, 0xb6, 0xab, 0xd9, 0x28, 0x6c, 0xb7, 0xe7, 0xfb, 0xdf, 0x23, 0x7e,
	0x00, 0x3f, 0x98, 0x56, 0xa7, 0xac, 0xaf, 0x90, 0x03, 0x5b, 0xed, 0x01, 0x5a, 0xdd, 0x24, 0x12,
	0x00, 0x96, 0x90, 0x6b, 0x36, 0x0a, 0x3b, 0xbc, 0x12, 0x5a, 0x03, 0x10, 0x3f, 0x88, 0x9f, 0x5c,
	0xa9, 0x9b, 0xb6, 0x8c, 0x05, 0xb0, 0xa9, 0x2a, 0xab, 0xe5, 0x4a, 0x2d, 0xdb, 0x8f, 0xa7, 0x9e,
	0x4d, 0x0d, 0x75, 0xd0, 0x56, 0x64, 0x4b, 0x41, 0x7c, 0x6f, 0x55, 0x56, 0x27, 0x6b, 0x68, 0x1c,
	0x8c, 0xcc, 0x59, 0x1e, 0x8f, 0xbd, 0x8f, 0x97, 0xde, 0xac, 0x4b, 0x86, 0x09, 0x9f, 0x70, 0x1d,
	0x90, 0x1b, 0x6c, 0x36, 0x0a, 0x7d, 0x84, 0x25, 0x11, 0x59, 0xfe, 0x88, 0xde, 0x00, 0xd0, 0x3b,
	0xc7, 0xd0, 0x35, 0xd5, 0x90, 0xe0, 0x45, 0xd0, 0x8b, 0x5d, 0x1a, 0xcf, 0xeb, 0x1f, 0xdf, 0x5d,
	0x0c, 0x8b, 0x35, 0x45, 0x3c, 0x87, 0x1b, 0xb5, 0xac, 0x77, 0xbd, 0x0d, 0x0f, 0x41, 0xbc, 0x3d,
	0x1f, 0x9d, 0x00, 0xdb, 0x5d, 0xf1, 0x56, 0x40, 0x48, 0x68, 0xd6, 0x5d, 0x06, 0xec, 0x08, 0x4e,
	0x24, 0xb6, 0xdd, 0x04, 0x00, 0xcb, 0x36, 0xac, 0xa7, 0xc4, 0xc0, 0x02, 0xc5, 0x40, 0x6b, 0x18,
	0x77, 0xc8, 0x32, 0x72, 0xad, 0x51, 0x00, 0x0b, 0xad, 0xa9, 0xae, 0x17, 0xbb, 0xe2, 0x10, 0xef,
	0x91, 0x8d, 0xea, 0x60, 0x9f, 0xdf, 0x06, 0x6e, 0x65, 0x42, 0xd7, 0xb9, 0x95, 0x2b, 0x56, 0x20,
	0x71, 0x80, 0x1c, 0x06, 0x9b, 0x04, 0x5d, 0x2f, 0x13, 0x30, 0x3d, 0xdc, 0x88, 0xbb, 0x3c, 0xf6,
	0x73, 0xc4, 0xf7, 0x0a, 0xba, 0xee, 0x8d, 0x50, 0x19, 0x6a, 0x84, 0x42, 0x7f, 0x63, 0x00, 0xa2,
	0xe9, 0x8d, 0xe0, 0xa1, 0x7b, 0xa3, 0x78, 0x80, 0xd7, 0x01, 0x70, 0xcf, 0x0e, 0x6c, 0x7d, 0xff,
	0xf8, 0xa1, 0xa2, 0xbd, 0x35, 0x8b, 0xd6, 0x41, 0x53, 0xb4, 0xcf, 0x25, 0x47, 0xdd, 0xac, 0xb0,
	0x24, 0x39, 0x66, 0x72, 0xdb, 0x5d, 0xf9, 0xae, 0x10, 0xc4, 0x7b, 0x24, 0xa2, 0x65, 0xb2, 0x49,
	0x26, 0x14, 0xc5, 0x36, 0xcb, 0xe1, 0xf6, 0x0d, 0x9f, 0x62, 0x7b, 0xa9, 0x0f, 0xc6, 0x2a, 0xc6,
	0x73, 0x93, 0xe8, 0xfd, 0xc8, 0xd9, 0x64, 0x1e, 0xc5, 0xed, 0x0e, 0xd0, 0xbd, 0x1e, 0x07, 0xd8,
	0x70, 0xee, 0x5e, 0x04, 0x79, 0x3f, 0x04, 0x6e, 0x65, 0xb6, 0xa6, 0x89, 0xf5, 0x8a, 0x99, 0x7a,
	0x83, 0xa2, 0xdf, 0x30, 0xa0, 0x10, 0x29, 0xec, 0x71, 0x23, 0xe6, 0x1f, 0x0c, 0x78, 0x2a, 0x08,
	0x66, 0x42, 0xd7, 0x27, 0x54, 0xd1, 0x9b, 0x63, 0xa4, 0xf7, 0xe2, 0xf3, 0x91, 0x09, 0xcc, 0xee,
	0x34, 0xe9, 0x8a, 0x7f, 0x6b, 0x77, 0x3f, 0xec, 0xad, 0xfd, 0x29, 0x03, 0x8e, 0x24, 0x41, 0xff,
	0xb8, 0xad, 0xea, 0x07, 0x0c, 0xc8, 0xb9, 0xb1, 0xb1, 0x6d, 0xaf, 0x3f, 0x0b, 0x80, 0x6e, 0x3f,
	0x71, 0x97, 0xd2, 0x2b, 0xb5, 0xf5, 0x0e, 0xf1, 0x7d, 0xe4, 0x4b, 0xdb, 0x5a, 0x64, 0x1e, 0xf6,
	0x5a, 0xcc, 0x82, 0xdd, 0xa1, 0x26, 0x13, 0xee, 0xc7, 0x40, 0x1f, 0xe6, 0xae, 0x2c, 0x8b, 0x06,
	0xe6, 0xbf, 0x8f, 0x1b, 0x6d, 0x36, 0x0a, 0xc3, 0x1e, 0x7a, 0xad, 0x57, 0x88, 0xdf, 0x82, 0x3f,
	0x4f, 0x8b, 0x06, 0xfa, 0x11, 0x43, 0x44, 0x3a, 0xab, 0x1b, 0x38, 0x93, 0x5a, 0x27, 0x0d, 0x43,
	0xcf, 0x85, 0x37, 0x18, 0xf8, 0x1c, 0xd8, 0x13, 0x6e, 0x65, 0xe7, 0xc8, 0xdf, 0xce, 0x80, 0xc3,
	0x58, 0xe6, 0xbc, 0x76, 0x4b, 0x52, 0x67, 0xac, 0xdc, 0x4e, 0x9c, 0x50, 0x14, 0xc2, 0xa9, 0x15,
	0xaf, 0x3c, 0x4e, 0xdd, 0xd9, 0x6e, 0x78, 0x3c, 0x1c, 0xfc, 0x7d, 0x27, 0xbc, 0xd1, 0x89, 0x68,
	0xe5, 0x0a, 0x03, 0xa6, 0x35, 0xae, 0x5c, 0xc5, 0x03, 0xc9, 0xbe, 0x38, 0x9f, 0xfa, 0x5e, 0xb2,
	0xcd, 0x36, 0xca, 0x2b, 0x0b, 0xf1, 0xfd, 0xa6, 0x6b, 0x02, 0xfa, 0x30, 0xc4, 0xae, 0xd6, 0x9e,
	0x9f, 0xb0, 0xd2, 0xe0, 0x57, 0x65, 0x43, 0xfa, 0x8f, 0xf6, 0xd7, 0x6f, 0x3a, 0xb1, 0x33, 0x06,
	0x02, 0xe1, 0xf6, 0xcb, 0xa0, 0xdf, 0x66, 0xa2, 0x2c, 0x0a, 0xa6, 0x40, 0x22, 0xe8, 0xfe, 0xf0,
	0x08, 0x6a, 0x0b, 0x9b, 0x12, 0x4c, 0x61, 0x46, 0xd0, 0xb9, 0x1c, 0x89, 0xa4, 0xb0, 0x95, 0xcd,
	0x3b, 0x52, 0x10, 0x0f, 0xaa, 0xad, 0xa1, 0xe8, 0x67, 0xce, 0xb9, 0x8c, 0xbd, 0x68, 0x52, 0xab,
	0xab, 0x8f, 0x49, 0xe4, 0xfb, 0x7f, 0xb0, 0x37, 0xda, 0x6e, 0x42, 0xdf, 0x73, 0xa0, 0xdf, 0xf6,
	0xf4, 0x8a, 0xf5, 0x9e, 0x58, 0xbe, 0xc3, 0x65, 0xc5, 0xf3, 0xd2, 0xc9, 0x4a, 0xb1, 0x24, 0xf4,
	0xf5, 0x0c, 0x38, 0x18, 0x25, 0x7d, 0x42, 0x15, 0xff, 0x57, 0x02, 0xc1, 0x22, 0x38, 0x14, 0xcb,
	0xc2, 0x7a, 0xa9, 0xbe, 0x97, 0x01, 0x63, 0xc4, 0x23, 0x4c, 0x41, 0x59, 0x10, 0x94, 0xba, 0x74,
	0x59, 0xab, 0xdc, 0xf2, 0xb8, 0x45, 0x58, 0x4e, 0xf5, 0xdf, 0xcc, 0xfa, 0xd7, 0x18, 0x30, 0x9e,
	0x86, 0x11, 0xb2, 0x02, 0x33, 0x60, 0x60, 0xd9, 0x1a, 0x5b, 0x56, 0xf0, 0x60, 0x12, 0x87, 0x8f,
	0x24, 0x8f, 0xc1, 0x7c, 0xff, 0xb2, 0xab, 0x0b, 0xfd, 0x9c, 0x01, 0xfb, 0xb1, 0x15, 0xfe, 0xb2,
	0xd9, 0xe3, 0x11, 0x1c, 0x74, 0xf0, 0x24, 0xdd, 0x76, 0xc2, 0xd9, 0x25, 0x30, 0x12, 0x5c, 0x6e,
	0x3b, 0x5b, 0xe8, 0xe1, 0xf6, 0x34, 0x1b, 0x85, 0x6c, 0xf8, 0x8e, 0x30, 0x10, 0xbf, 0xd5, 0xbf,
	0x25, 0x0c, 0x24, 0x90, 0xac, 0xe9, 0x15, 0x53, 0x58, 0x54, 0xa4, 0xb6, 0x92, 0x04, 0x07, 0xb6,
	0x1a, 0xf8, 0x4d, 0xd9, 0x49, 0x3d, 0xc8, 0xfa, 0x78, 0x4a, 0x3b, 0x81, 0x01, 0x88, 0x1f, 0x34,
	0x3c, 0xc2, 0x44, 0x74, 0x8f, 0x21, 0x39, 0x4f, 0x9b, 0x0e, 0x82, 0x46, 0x03, 0x23, 0x44, 0x86,
	0x15, 0xe0, 0xcb, 0xde, 0x2a, 0xcb, 0x81, 0xf0, 0x33, 0xc3, 0x96, 0x64, 0x9d, 0x1c, 0x76, 0x12,
	0xe5, 0x01, 0xdd, 0x26, 0x09, 0xf1, 0x04, 0x42, 0x6b, 0x38, 0xba, 0xe8, 0xa6, 0x8a, 0x1e, 0x9b,
	0x8c, 0xf4, 0xb7, 0xc3, 0x16, 0xb4, 0x36, 0x49, 0x74, 0x68, 0xdd, 0x1b, 0x06, 0xed, 0x07, 0x0c,
	0x38, 0x1a, 0x24, 0x9b, 0x1a, 0x91, 0xbe, 0xe8, 0x5b, 0x1e, 0xfa, 0x21, 0x03, 0xd8, 0x84, 0x16,
	0x3e, 0xaa, 0xfd, 0xf1, 0x13, 0x06, 0x9c, 0x6a, 0xf3, 0x43, 0xfc, 0x6a, 0x46, 0xd0, 0x75, 0x59,
	0x5d, 0x0a, 0xbb, 0x38, 0x4e, 0x8b, 0x8f, 0x8c, 0xd2, 0xdf, 0x33, 0xe0, 0xf9, 0x8e, 0xec, 0x25,
	0x04, 0xdf, 0x63, 0x40, 0x56, 0x8a, 0x98, 0x4a, 0x88, 0x2e, 0x86, 0x13, 0x1d, 0xa9, 0x70, 0x7f,
	0xb3, 0x51, 0x28, 0xf8, 0xed, 0x0f, 0x8e, 0x41, 0x7c, 0xa4, 0x52, 0x74, 0x95, 0x64, 0xcc, 0x54,
	0x40, 0xe9, 0xfd, 0xf5, 0x97, 0x4e, 0x1a, 0x1b, 0x23, 0x37, 0x19, 0x2f, 0xdd, 0x5f, 0x3c, 0x2f,
	0xdf, 0x60, 0x48, 0xd6, 0x11, 0x0d, 0x00, 0xdf, 0x27, 0x27, 0x54, 0xd1, 0x43, 0x50, 0xd2, 0xbb,
	0xaf, 0x4b, 0x64, 0x26, 0x86, 0xc8, 0xdf, 0x39, 0x67, 0x7d, 0x42, 0x3b, 0x08, 0xa1, 0xdf, 0x65,
	0x40, 0xce, 0x8b, 0xcd, 0xd4, 0x42, 0x28, 0x3d, 0x16, 0x4f, 0xe9, 0xbc, 0x6f, 0x1e, 0x77, 0xa0,
	0xd9, 0x28, 0xec, 0x6b, 0x27, 0xd5, 0x2f, 0x1d, 0xf1, 0x14, 0xd5, 0xe8, 0x53, 0x06, 0x70, 0xc9,
	0x01, 0x05, 0x5d, 0x69, 0x6a, 0xc3, 0x98, 0x86, 0xa7, 0xc1, 0xa0, 0x2f, 0x00, 0xe0, 0xbc, 0xad,
	0x87, 0xcb, 0xba, 0xcd, 0x1d, 0xdf, 0x6b, 0xc4, 0x0f, 0x78, 0x51, 0x22, 0x03, 0x4c, 0xae, 0x0b,
	0x16, 0x59, 0xb8, 0xa3, 0x60, 0x33, 0xa9, 0x37, 0x10, 0x64, 0xb0, 0xd9, 0x28, 0x0c, 0x79, 0x52,
	0xe4, 0x69, 0x11, 0xf1, 0xce, 0x10, 0x74, 0x8d, 0x9c, 0x41, 0xf3, 0x0b, 0x97, 0x9d, 0x0c, 0x70,
	0x42, 0xd7, 0xaf, 0xdc, 0x98, 0x50, 0x14, 0xaf, 0xfc, 0x0e, 0x0e, 0xdc, 0x77, 0x9c, 0xc3, 0x23,
	0x5e, 0x34, 0xb1, 0xfc, 0x1a, 0xd8, 0x6c, 0x2e, 0x2b, 0x9e, 0x6b, 0xe8, 0xc1, 0xf0, 0xed, 0x35,
	0xbf, 0xac, 0xd8, 0x02, 0x9d, 0x9b, 0xe8, 0x0e, 0x72, 0x13, 0x25, 0x28, 0x89, 0x10, 0xc4, 0x3b,
	0xe2, 0xd0, 0x79, 0xb0, 0xcb, 0x4d, 0x77, 0xe7, 0x17, 0x2e, 0x77, 0x18, 0x93, 0xde, 0x77, 0xca,
	0x77, 0x01, 0x39, 0xc4, 0xfe, 0xdb, 0x60, 0xc4, 0xed, 0x38, 0xfa, 0x73, 0xe4, 0x17, 0x53, 0xd7,
	0x2a, 0xb2, 0xc1, 0xe6, 0x26, 0x11, 0x88, 0xf8, 0x61, 0xf7, 0x19, 0x49, 0xa4, 0x0d, 0x72, 0xc1,
	0xbe, 0x6a, 0x48, 0xb5, 0x99, 0x95, 0x59, 0xcd, 0x90, 0xad, 0x14, 0xb5, 0x33, 0x90, 0x89, 0xfb,
	0x3c, 0x7f, 0xef, 0x26, 0xd7, 0xe3, 0x50, 0xad, 0x8f, 0x98, 0x12, 0x58, 0x06, 0x7d, 0xa6, 0xb5,
	0x48, 0x65, 0xb1, 0x2e, 0x11, 0x24, 0x5c, 0x6a, 0x85, 0xc3, 0x4e, 0xbd, 0x88, 0x08, 0x42, 0xfc,
	0x16, 0xfc, 0x79, 0xaa, 0x2e, 0xc1, 0xaf, 0x82, 0x6d, 0xc2, 0xb2, 0x20, 0x2b, 0x38, 0x45, 0x31,
	0xb5, 0xf2, 0xa2, 0x56, 0xab, 0x69, 0xb7, 0x49, 0xfb, 0xfe, 0x72, 0x6a, 0x55, 0x39, 0xb2, 0x16,
	0xed, 0x22, 0x11, 0x3f, 0xd2, 0x7a, 0x3a, 0xaf, 0x71, 0xf8, 0x19, 0x34, 0xc0, 0xb0, 0xb0, 0x2c,
	0xd5, 0x84, 0x25, 0xa9, 0x5c, 0xa9, 0x91, 0x36, 0xba, 0xfd, 0x63, 0x80, 0xe9, 0xd4, 0xdd, 0xd8,
	0x9d, 0x8e, 0x6a, 0xbf, 0x3c, 0xc4, 0x0f, 0x91, 0x47, 0x93, 0x35, 0xdc, 0x37, 0x1f, 0x7f, 0xfb,
	0x69, 0xd0, 0x8b, 0x57, 0x1c, 0xbe, 0xcb, 0x00, 0xe0, 0x5e, 0xdb, 0xe1, 0xa1, 0x70, 0x3f, 0x6d,
	0xeb, 0xe6, 0xe6, 0x0e, 0xc7, 0x0f, 0xb4, 0x37, 0x0e, 0x7a, 0xea, 0xee, 0x1f, 0xfe, 0xf2, 0xed,
	0xcc, 0x7e, 0xb8, 0xaf, 0x14, 0xfd, 0x8b, 0x0d, 0xa3, 0x74, 0x47, 0x16, 0x57, 0xe1, 0xf7, 0x18,
	0x30, 0xe4, 0x6f, 0x38, 0xc2, 0xa7, 0xe3, 0xf4, 0x78, 0x2e, 0x4e, 0xb9, 0xa3, 0xc9, 0x06, 0x13,
	0xc3, 0x58, 0x6c, 0xd8, 0x21, 0x78, 0x80, 0x66, 0x98, 0x35, 0xc3, 0x36, 0xee, 0x13, 0x5f, 0xc5,
	0x3f, 0xd8, 0x0d, 0x85, 0xcf, 0x25, 0xd1, 0x1d, 0xd2, 0xb7, 0xcd, 0x9d, 0x4c, 0x3f, 0x91, 0x00,
	0x38, 0x87, 0x01, 0x9c, 0x82, 0x27, 0xe3, 0x00, 0x90, 0x89, 0xa5, 0x3b, 0x76, 0x80, 0x58, 0x2d,
	0xdd, 0xc1, 0x8e, 0xbf, 0x0a, 0xbf, 0xe5, 0x10, 0xde, 0xea, 0xce, 0x50, 0x09, 0x0f, 0xf6, 0x45,
	0xa9, 0x84, 0xb7, 0xf5, 0x32, 0xd1, 0x93, 0xd8, 0xde, 0x3c, 0xdc, 0x43, 0xb3, 0x17, 0x7e, 0xc8,
	0x80, 0x9d, 0x11, 0xcd, 0x3f, 0xf8, 0x6c, 0x12, 0x7d, 0xc1, 0xaa, 0x43, 0xee, 0x78, 0xca, 0x59,
	0xc4, 0xdc, 0x93, 0xd8, 0xdc, 0x71, 0x78, 0x8c, 0x66, 0x2e, 0xbb, 0xb8, 0xc2, 0x92, 0x4a, 0x45,
	0x8b, 0x5e, 0x78, 0x37, 0x43, 0x1a, 0xe7, 0xd4, 0xa6, 0x17, 0x3c, 0x9b, 0xcc, 0xae, 0xc8, 0x66,
	0x61, 0xee, 0x5c, 0xe7, 0x02, 0x08, 0xc6, 0xd7, 0x30, 0xc6, 0x57, 0xe0, 0x5c, 0x1c, 0x46, 0x41,
	0xd7, 0x59, 0x41, 0x15, 0x59, 0x27, 0xcf, 0x61, 0xad, 0xbc, 0xc7, 0xb3, 0xa1, 0x82, 0xf7, 0xa5,
	0x55, 0xf8, 0x2b, 0x06, 0x6c, 0x0b, 0x69, 0x37, 0xc1, 0x63, 0x71, 0xfb, 0xbd, 0x6d, 0xfd, 0xc6,
	0x52, 0xcc, 0x20, 0xb8, 0x2e, 0x61, 0x5c, 0x1c, 0x3c, 0x17, 0x8e, 0xcb, 0x9b, 0xad, 0x85, 0xac,
	0xa3, 0x5b, 0x87, 0x5a, 0x85, 0x3f, 0x65, 0xc0, 0x68, 0x58, 0xf3, 0x08, 0x8e, 0x25, 0x20, 0x3f,
	0xe0, 0xea, 0xe3, 0x69, 0xa6, 0x10, 0x24, 0xc7, 0x31, 0x92, 0x12, 0x64, 0xe3, 0x56, 0x48, 0xb3,
	0x5d, 0x9c, 0x78, 0xf6, 0xbb, 0x19, 0xf2, 0x9b, 0x11, 0x5a, 0x5b, 0x06, 0x9e, 0xa1, 0x18, 0x94,
	0xa0, 0xb1, 0x95, 0x3b, 0xdb, 0xf1, 0x7c, 0x82, 0x4e, 0xc4, 0xe8, 0xae, 0xc3, 0x2f, 0x85, 0xa3,
	0xc3, 0x0d, 0x1d, 0xd6, 0xee, 0x40, 0x78, 0x56, 0xc8, 0x08, 0x6e, 0x43, 0xcf, 0x82, 0x85, 0x6d,
	0xc5, 0xcf, 0x9d, 0x1f, 0xb2, 0x50, 0x1b, 0x29, 0x30, 0x21, 0x9a, 0xc8, 0x2e, 0x12, 0xd5, 0x1f,
	0x13, 0xf5, 0x70, 0xd0, 0xcb, 0x98, 0x8f, 0x4b, 0xf0, 0x42, 0x4a, 0x3e, 0xf0, 0xef, 0xba, 0xd8,
	0xdb, 0xb2, 0x21, 0xf9, 0x77, 0xef, 0x6f, 0x19, 0x90, 0x8d, 0xaa, 0xca, 0xc3, 0xe3, 0x71, 0x7e,
	0x15, 0xda, 0xe1, 0xc9, 0x9d, 0x48, 0x3b, 0x8d, 0x60, 0xe3, 0x30, 0xb6, 0x17, 0xe0, 0x29, 0xca,
	0x4e, 0x66, 0x71, 0xd1, 0xdf, 0x0b, 0xcd, 0x8f, 0xe7, 0x5f, 0x94, 0x0e, 0x14, 0xe9, 0x32, 0xc0,
	0x17, 0xd2, 0xd9, 0xe7, 0x6f, 0xd1, 0xe4, 0x4e, 0x77, 0x38, 0x9b, 0x80, 0xbc, 0x8e, 0x41, 0x5e,
	0x83, 0x0b, 0xa9, 0x40, 0xe2, 0xd0, 0x9a, 0x68, 0x2b, 0x7f, 0x3f, 0xd3, 0xea, 0x09, 0x26, 0xa8,
	0xf7, 0xc3, 0x8b, 0xd4, 0x1d, 0x99, 0xbc, 0x87, 0x92, 0xbb, 0xb4, 0x7e, 0x41, 0x84, 0xa1, 0xd7,
	0x31, 0x43, 0xf3, 0x90, 0x8f, 0x62, 0x48, 0xa9, 0x4b, 0xac, 0x7d, 0x1d, 0xf0, 0x50, 0x94, 0x8c,
	0x9d, 0xcf, 0x9c, 0xd2, 0x70, 0x44, 0x2d, 0x1f, 0xfe, 0x1f, 0x05, 0x06, 0xbd, 0x77, 0x91, 0x3b,
	0xd5, 0xc9, 0x54, 0x82, 0x79, 0x12, 0x63, 0x3e, 0x0d, 0x9f, 0x8f, 0x3e, 0x8e, 0x6a, 0xaa, 0xa0,
	0x60, 0x90, 0x91, 0x27, 0xd1, 0x47, 0xce, 0x49, 0x14, 0x28, 0xe9, 0x53, 0x4f, 0xa2, 0xf0, 0x16,
	0x03, 0xf5, 0x24, 0x8a, 0xe8, 0x18, 0xc4, 0xf9, 0xaf, 0x5d, 0xcf, 0x65, 0xed, 0x1d, 0xbe, 0xb8,
	0xc2, 0xca, 0x62, 0xe9, 0x4e, 0xa0, 0x4b, 0xb1, 0x0a, 0x7f, 0xe1, 0x39, 0x4d, 0xbd, 0xb5, 0xfb,
	0xb8, 0xd3, 0x34, 0xa4, 0x63, 0x10, 0x77, 0x9a, 0x86, 0xb5, 0x06, 0xd0, 0x19, 0x8c, 0xe1, 0x24,
	0x3c, 0x91, 0x0c, 0x43, 0x5b, 0x66, 0xf7, 0x5e, 0x06, 0x1c, 0x48, 0x54, 0x47, 0x87, 0x5c, 0x32,
	0x86, 0xa9, 0x4e, 0x37, 0xb9, 0x2e, 0x19, 0xc9, 0x22, 0x52, 0x04, 0x64, 0xd6, 0x9b, 0x22, 0x51,
	0xf3, 0xbc, 0x5f, 0x67, 0xc0, 0x33, 0x1d, 0xd4, 0xc1, 0xe1, 0x6c, 0x42, 0x7f, 0x4a, 0xdc, 0x02,
	0xc8, 0xcd, 0x3d, 0x44, 0x89, 0x84, 0x3c, 0x19, 0x93, 0x57, 0x81, 0x42, 0x7c, 0x1e, 0xb9, 0x10,
	0x64, 0xd0, 0x8a, 0xe9, 0x7e, 0xb1, 0x54, 0x1e, 0xff, 0xea, 0x24, 0x29, 0x54, 0x53, 0xa9, 0x49,
	0x4a, 0x92, 0xc2, 0x3d, 0x35, 0x49, 0x49, 0x54, 0xa1, 0x4f, 0x12, 0xcd, 0xa2, 0x48, 0x71, 0x3d,
	0xe9, 0x3b, 0x99, 0xd8, 0xae, 0x80, 0xa7, 0x48, 0x4a, 0x3d, 0xc8, 0xd2, 0x94, 0xe5, 0xa9, 0x07,
	0x59, 0xaa, 0xba, 0x3a, 0xba, 0x8a, 0x69, 0xb8, 0x02, 0x67, 0x52, 0xd0, 0x80, 0xb3, 0x73, 0xfb,
	0xb4, 0x77, 0x08, 0xb1, 0x13, 0x76, 0x97, 0x98, 0xb5, 0x4c, 0x6c, 0x5f, 0x89, 0x56, 0x3d, 0x86,
	0xd7, 0xd6, 0x0b, 0x30, 0xaa, 0xce, 0x9e, 0x7b, 0x6d, 0x03, 0x24, 0x13, 0x2e, 0x55, 0xcc, 0xe5,
	0x4d, 0x78, 0x23, 0x35, 0x97, 0xe1, 0xf1, 0x2a, 0x40, 0x6a, 0xc0, 0xdf, 0x56, 0xe1, 0x3f, 0x19,
	0x12, 0xc7, 0xe3, 0x4a, 0xda, 0xd4, 0x38, 0x9e, 0xb0, 0xd4, 0x4e, 0x8d, 0xe3, 0x49, 0x6b, 0xea,
	0xe8, 0x25, 0x4c, 0xd1, 0x79, 0x38, 0x19, 0x71, 0x35, 0x58, 0x56, 0x3c, 0x59, 0x13, 0xbe, 0xae,
	0x2b, 0x8a, 0xff, 0x9e, 0x64, 0xb8, 0x9b, 0xec, 0x03, 0x86, 0xfc, 0xb9, 0x85, 0xaf, 0xfe, 0x0d,
	0x4b, 0x71, 0x59, 0x5e, 0xa0, 0xe2, 0x9e, 0x3b, 0x96, 0x7c, 0x42, 0xb2, 0xaa, 0x4a, 0x1b, 0x0c,
	0xd7, 0xe6, 0x4f, 0x9c, 0xbb, 0x4c, 0x48, 0x99, 0x9a, 0x7a, 0x97, 0x89, 0x2e, 0xa6, 0x53, 0xef,
	0x32, 0x94, 0x6a, 0x38, 0xba, 0x80, 0x51, 0x9c, 0x83, 0x67, 0xc2, 0x51, 0xd4, 0x0d, 0xa9, 0xc6,
	0x56, 0x57, 0x58, 0x9d, 0x4c, 0x0e, 0x62, 0x71, 0x36, 0x28, 0x37, 0x77, 0xff, 0xcf, 0xf9, 0xae,
	0x1f, 0xaf, 0xe5, 0xbb, 0xee, 0xaf, 0xe5, 0x99, 0x8f, 0xd7, 0xf2, 0xcc, 0x9f, 0xd6, 0xf2, 0xcc,
	0x7b, 0x0f, 0xf2, 0x5d, 0x1f, 0x3f, 0xc8, 0x77, 0xfd, 0xf1, 0x41, 0xbe, 0xeb, 0xf5, 0x92, 0xaf,
	0xfa, 0x6b, 0xe9, 0x62, 0xb5, 0x1b, 0x37, 0xe4, 0x8a, 0x2c, 0x28, 0x8e, 0x6e, 0x47, 0x3b, 0x2e,
	0x05, 0x2f, 0x6e, 0xc2, 0x7f, 0xfd, 0xf6, 0xcc, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x94,
	0xb3, 0xfa, 0xb9, 0x37, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	QueryVaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error)
	QueryVaultInfoByAppByOwner(ctx context.Context, in *QueryVaultInfoByAppByOwnerRequest, opts ...grpc.CallOption) (*QueryVaultInfoByAppByOwnerResponse, error)
	QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	QueryAllVaultsByProduct(ctx context.Context, in *QueryAllVaultsByProductRequest, opts ...grpc.CallOption) (*QueryAllVaultsByProductResponse, error)
	QueryAllVaultsByAppAndExtendedPair(ctx context.Context, in *QueryAllVaultsByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppAndExtendedPairResponse, error)
	QueryVaultByProduct(ctx context.Context, in *QueryVaultByProductRequest, opts ...grpc.CallOption) (*QueryVaultByProductResponse, error)
	QueryAllVaultByOwner(ctx context.Context, in *QueryAllVaultByOwnerRequest, opts ...grpc.CallOption) (*QueryAllVaultByOwnerResponse, error)
	QueryTokenMintedAllProductsByPair(ctx context.Context, in *QueryTokenMintedAllProductsByPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsByPairResponse, error)
	QueryTokenMintedByProductAssetWise(ctx context.Context, in *QueryTokenMintedByProductAssetWiseRequest, opts ...grpc.CallOption) (*QueryTokenMintedByProductAssetWiseResponse, error)
	QueryVaultCountByProduct(ctx context.Context, in *QueryVaultCountByProductRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductResponse, error)
	QueryVaultCountByProductAndPair(ctx context.Context, in *QueryVaultCountByProductAndPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductAndPairResponse, error)
	QueryTotalValueLockedByProductExtendedPair(ctx context.Context, in *QueryTotalValueLockedByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByProductExtendedPairResponse, error)
	QueryExtendedPairIDByProduct(ctx context.Context, in *QueryExtendedPairIDByProductRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDByProductResponse, error)
	QueryStableVaultInfo(ctx context.Context, in *QueryStableVaultInfoRequest, opts ...grpc.CallOption) (*QueryStableVaultInfoResponse, error)
	QueryAllStableVaults(ctx context.Context, in *QueryAllStableVaultsRequest, opts ...grpc.CallOption) (*QueryAllStableVaultsResponse, error)
	QueryStableVaultByProductExtendedPair(ctx context.Context, in *QueryStableVaultByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByProductExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByAppAndExtendedPairId(ctx context.Context, in *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse, error)
	QueryExtendedPairVaultMappingByApp(ctx context.Context, in *QueryExtendedPairVaultMappingByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppResponse, error)
	QueryExtendedPairVaultMappingByOwnerAndApp(ctx context.Context, in *QueryExtendedPairVaultMappingByOwnerAndAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByOwnerAndAppResponse, error)
	QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(ctx context.Context, in *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse, error)
	QueryTVLLockedByAppOfAllExtendedPairs(ctx context.Context, in *QueryTVLLockedByAppOfAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryTVLLockedByAppOfAllExtendedPairsResponse, error)
	QueryTotalTVLByApp(ctx context.Context, in *QueryTotalTVLByAppRequest, opts ...grpc.CallOption) (*QueryTotalTVLByAppResponse, error)
	QueryUserMyPositionByApp(ctx context.Context, in *QueryUserMyPositionByAppRequest, opts ...grpc.CallOption) (*QueryUserMyPositionByAppResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error) {
	out := new(QueryVaultInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVaultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultInfoByAppByOwner(ctx context.Context, in *QueryVaultInfoByAppByOwnerRequest, opts ...grpc.CallOption) (*QueryVaultInfoByAppByOwnerResponse, error) {
	out := new(QueryVaultInfoByAppByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVaultInfoByAppByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryAllVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultsByProduct(ctx context.Context, in *QueryAllVaultsByProductRequest, opts ...grpc.CallOption) (*QueryAllVaultsByProductResponse, error) {
	out := new(QueryAllVaultsByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryAllVaultsByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultsByAppAndExtendedPair(ctx context.Context, in *QueryAllVaultsByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppAndExtendedPairResponse, error) {
	out := new(QueryAllVaultsByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultByProduct(ctx context.Context, in *QueryVaultByProductRequest, opts ...grpc.CallOption) (*QueryVaultByProductResponse, error) {
	out := new(QueryVaultByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVaultByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultByOwner(ctx context.Context, in *QueryAllVaultByOwnerRequest, opts ...grpc.CallOption) (*QueryAllVaultByOwnerResponse, error) {
	out := new(QueryAllVaultByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryAllVaultByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenMintedAllProductsByPair(ctx context.Context, in *QueryTokenMintedAllProductsByPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedAllProductsByPairResponse, error) {
	out := new(QueryTokenMintedAllProductsByPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryTokenMintedAllProductsByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenMintedByProductAssetWise(ctx context.Context, in *QueryTokenMintedByProductAssetWiseRequest, opts ...grpc.CallOption) (*QueryTokenMintedByProductAssetWiseResponse, error) {
	out := new(QueryTokenMintedByProductAssetWiseResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryTokenMintedByProductAssetWise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultCountByProduct(ctx context.Context, in *QueryVaultCountByProductRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductResponse, error) {
	out := new(QueryVaultCountByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVaultCountByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultCountByProductAndPair(ctx context.Context, in *QueryVaultCountByProductAndPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByProductAndPairResponse, error) {
	out := new(QueryVaultCountByProductAndPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryVaultCountByProductAndPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalValueLockedByProductExtendedPair(ctx context.Context, in *QueryTotalValueLockedByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByProductExtendedPairResponse, error) {
	out := new(QueryTotalValueLockedByProductExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryTotalValueLockedByProductExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairIDByProduct(ctx context.Context, in *QueryExtendedPairIDByProductRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDByProductResponse, error) {
	out := new(QueryExtendedPairIDByProductResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryExtendedPairIDByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStableVaultInfo(ctx context.Context, in *QueryStableVaultInfoRequest, opts ...grpc.CallOption) (*QueryStableVaultInfoResponse, error) {
	out := new(QueryStableVaultInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryStableVaultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllStableVaults(ctx context.Context, in *QueryAllStableVaultsRequest, opts ...grpc.CallOption) (*QueryAllStableVaultsResponse, error) {
	out := new(QueryAllStableVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryAllStableVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStableVaultByProductExtendedPair(ctx context.Context, in *QueryStableVaultByProductExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByProductExtendedPairResponse, error) {
	out := new(QueryStableVaultByProductExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryStableVaultByProductExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByAppAndExtendedPairId(ctx context.Context, in *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse, error) {
	out := new(QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPairId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByApp(ctx context.Context, in *QueryExtendedPairVaultMappingByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppResponse, error) {
	out := new(QueryExtendedPairVaultMappingByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByOwnerAndApp(ctx context.Context, in *QueryExtendedPairVaultMappingByOwnerAndAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByOwnerAndAppResponse, error) {
	out := new(QueryExtendedPairVaultMappingByOwnerAndAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByOwnerAndApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(ctx context.Context, in *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse, error) {
	out := new(QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTVLLockedByAppOfAllExtendedPairs(ctx context.Context, in *QueryTVLLockedByAppOfAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryTVLLockedByAppOfAllExtendedPairsResponse, error) {
	out := new(QueryTVLLockedByAppOfAllExtendedPairsResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryTVLLockedByAppOfAllExtendedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalTVLByApp(ctx context.Context, in *QueryTotalTVLByAppRequest, opts ...grpc.CallOption) (*QueryTotalTVLByAppResponse, error) {
	out := new(QueryTotalTVLByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryTotalTVLByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUserMyPositionByApp(ctx context.Context, in *QueryUserMyPositionByAppRequest, opts ...grpc.CallOption) (*QueryUserMyPositionByAppResponse, error) {
	out := new(QueryUserMyPositionByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.vault.v1beta1.Query/QueryUserMyPositionByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryVault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	QueryVaultInfo(context.Context, *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error)
	QueryVaultInfoByAppByOwner(context.Context, *QueryVaultInfoByAppByOwnerRequest) (*QueryVaultInfoByAppByOwnerResponse, error)
	QueryAllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	QueryAllVaultsByProduct(context.Context, *QueryAllVaultsByProductRequest) (*QueryAllVaultsByProductResponse, error)
	QueryAllVaultsByAppAndExtendedPair(context.Context, *QueryAllVaultsByAppAndExtendedPairRequest) (*QueryAllVaultsByAppAndExtendedPairResponse, error)
	QueryVaultByProduct(context.Context, *QueryVaultByProductRequest) (*QueryVaultByProductResponse, error)
	QueryAllVaultByOwner(context.Context, *QueryAllVaultByOwnerRequest) (*QueryAllVaultByOwnerResponse, error)
	QueryTokenMintedAllProductsByPair(context.Context, *QueryTokenMintedAllProductsByPairRequest) (*QueryTokenMintedAllProductsByPairResponse, error)
	QueryTokenMintedByProductAssetWise(context.Context, *QueryTokenMintedByProductAssetWiseRequest) (*QueryTokenMintedByProductAssetWiseResponse, error)
	QueryVaultCountByProduct(context.Context, *QueryVaultCountByProductRequest) (*QueryVaultCountByProductResponse, error)
	QueryVaultCountByProductAndPair(context.Context, *QueryVaultCountByProductAndPairRequest) (*QueryVaultCountByProductAndPairResponse, error)
	QueryTotalValueLockedByProductExtendedPair(context.Context, *QueryTotalValueLockedByProductExtendedPairRequest) (*QueryTotalValueLockedByProductExtendedPairResponse, error)
	QueryExtendedPairIDByProduct(context.Context, *QueryExtendedPairIDByProductRequest) (*QueryExtendedPairIDByProductResponse, error)
	QueryStableVaultInfo(context.Context, *QueryStableVaultInfoRequest) (*QueryStableVaultInfoResponse, error)
	QueryAllStableVaults(context.Context, *QueryAllStableVaultsRequest) (*QueryAllStableVaultsResponse, error)
	QueryStableVaultByProductExtendedPair(context.Context, *QueryStableVaultByProductExtendedPairRequest) (*QueryStableVaultByProductExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByAppAndExtendedPairId(context.Context, *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse, error)
	QueryExtendedPairVaultMappingByApp(context.Context, *QueryExtendedPairVaultMappingByAppRequest) (*QueryExtendedPairVaultMappingByAppResponse, error)
	QueryExtendedPairVaultMappingByOwnerAndApp(context.Context, *QueryExtendedPairVaultMappingByOwnerAndAppRequest) (*QueryExtendedPairVaultMappingByOwnerAndAppResponse, error)
	QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(context.Context, *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse, error)
	QueryTVLLockedByAppOfAllExtendedPairs(context.Context, *QueryTVLLockedByAppOfAllExtendedPairsRequest) (*QueryTVLLockedByAppOfAllExtendedPairsResponse, error)
	QueryTotalTVLByApp(context.Context, *QueryTotalTVLByAppRequest) (*QueryTotalTVLByAppResponse, error)
	QueryUserMyPositionByApp(context.Context, *QueryUserMyPositionByAppRequest) (*QueryUserMyPositionByAppResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryVault(ctx context.Context, req *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVault not implemented")
}
func (*UnimplementedQueryServer) QueryVaultInfo(ctx context.Context, req *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultInfo not implemented")
}
func (*UnimplementedQueryServer) QueryVaultInfoByAppByOwner(ctx context.Context, req *QueryVaultInfoByAppByOwnerRequest) (*QueryVaultInfoByAppByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultInfoByAppByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaults(ctx context.Context, req *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaults not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultsByProduct(ctx context.Context, req *QueryAllVaultsByProductRequest) (*QueryAllVaultsByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultsByProduct not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultsByAppAndExtendedPair(ctx context.Context, req *QueryAllVaultsByAppAndExtendedPairRequest) (*QueryAllVaultsByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultsByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryVaultByProduct(ctx context.Context, req *QueryVaultByProductRequest) (*QueryVaultByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultByProduct not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultByOwner(ctx context.Context, req *QueryAllVaultByOwnerRequest) (*QueryAllVaultByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryTokenMintedAllProductsByPair(ctx context.Context, req *QueryTokenMintedAllProductsByPairRequest) (*QueryTokenMintedAllProductsByPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedAllProductsByPair not implemented")
}
func (*UnimplementedQueryServer) QueryTokenMintedByProductAssetWise(ctx context.Context, req *QueryTokenMintedByProductAssetWiseRequest) (*QueryTokenMintedByProductAssetWiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedByProductAssetWise not implemented")
}
func (*UnimplementedQueryServer) QueryVaultCountByProduct(ctx context.Context, req *QueryVaultCountByProductRequest) (*QueryVaultCountByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByProduct not implemented")
}
func (*UnimplementedQueryServer) QueryVaultCountByProductAndPair(ctx context.Context, req *QueryVaultCountByProductAndPairRequest) (*QueryVaultCountByProductAndPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByProductAndPair not implemented")
}
func (*UnimplementedQueryServer) QueryTotalValueLockedByProductExtendedPair(ctx context.Context, req *QueryTotalValueLockedByProductExtendedPairRequest) (*QueryTotalValueLockedByProductExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalValueLockedByProductExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairIDByProduct(ctx context.Context, req *QueryExtendedPairIDByProductRequest) (*QueryExtendedPairIDByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairIDByProduct not implemented")
}
func (*UnimplementedQueryServer) QueryStableVaultInfo(ctx context.Context, req *QueryStableVaultInfoRequest) (*QueryStableVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAllStableVaults(ctx context.Context, req *QueryAllStableVaultsRequest) (*QueryAllStableVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllStableVaults not implemented")
}
func (*UnimplementedQueryServer) QueryStableVaultByProductExtendedPair(ctx context.Context, req *QueryStableVaultByProductExtendedPairRequest) (*QueryStableVaultByProductExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultByProductExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByAppAndExtendedPairId(ctx context.Context, req *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) (*QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByAppAndExtendedPairId not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByApp(ctx context.Context, req *QueryExtendedPairVaultMappingByAppRequest) (*QueryExtendedPairVaultMappingByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByApp not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByOwnerAndApp(ctx context.Context, req *QueryExtendedPairVaultMappingByOwnerAndAppRequest) (*QueryExtendedPairVaultMappingByOwnerAndAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByOwnerAndApp not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(ctx context.Context, req *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) (*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID not implemented")
}
func (*UnimplementedQueryServer) QueryTVLLockedByAppOfAllExtendedPairs(ctx context.Context, req *QueryTVLLockedByAppOfAllExtendedPairsRequest) (*QueryTVLLockedByAppOfAllExtendedPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTVLLockedByAppOfAllExtendedPairs not implemented")
}
func (*UnimplementedQueryServer) QueryTotalTVLByApp(ctx context.Context, req *QueryTotalTVLByAppRequest) (*QueryTotalTVLByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalTVLByApp not implemented")
}
func (*UnimplementedQueryServer) QueryUserMyPositionByApp(ctx context.Context, req *QueryUserMyPositionByAppRequest) (*QueryUserMyPositionByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserMyPositionByApp not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVaultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultInfo(ctx, req.(*QueryVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultInfoByAppByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoByAppByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultInfoByAppByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVaultInfoByAppByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultInfoByAppByOwner(ctx, req.(*QueryVaultInfoByAppByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryAllVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryAllVaultsByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultsByProduct(ctx, req.(*QueryAllVaultsByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultsByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultsByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultsByAppAndExtendedPair(ctx, req.(*QueryAllVaultsByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVaultByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultByProduct(ctx, req.(*QueryVaultByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryAllVaultByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultByOwner(ctx, req.(*QueryAllVaultByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenMintedAllProductsByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedAllProductsByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenMintedAllProductsByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryTokenMintedAllProductsByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenMintedAllProductsByPair(ctx, req.(*QueryTokenMintedAllProductsByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenMintedByProductAssetWise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedByProductAssetWiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenMintedByProductAssetWise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryTokenMintedByProductAssetWise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenMintedByProductAssetWise(ctx, req.(*QueryTokenMintedByProductAssetWiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultCountByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultCountByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVaultCountByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultCountByProduct(ctx, req.(*QueryVaultCountByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultCountByProductAndPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByProductAndPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultCountByProductAndPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryVaultCountByProductAndPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultCountByProductAndPair(ctx, req.(*QueryVaultCountByProductAndPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalValueLockedByProductExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalValueLockedByProductExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalValueLockedByProductExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryTotalValueLockedByProductExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalValueLockedByProductExtendedPair(ctx, req.(*QueryTotalValueLockedByProductExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairIDByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairIDByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairIDByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryExtendedPairIDByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairIDByProduct(ctx, req.(*QueryExtendedPairIDByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStableVaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStableVaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryStableVaultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStableVaultInfo(ctx, req.(*QueryStableVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllStableVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStableVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllStableVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryAllStableVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllStableVaults(ctx, req.(*QueryAllStableVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStableVaultByProductExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultByProductExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStableVaultByProductExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryStableVaultByProductExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStableVaultByProductExtendedPair(ctx, req.(*QueryStableVaultByProductExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByAppAndExtendedPairId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByAppAndExtendedPairId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPairId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByAppAndExtendedPairId(ctx, req.(*QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByApp(ctx, req.(*QueryExtendedPairVaultMappingByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByOwnerAndApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByOwnerAndAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByOwnerAndApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByOwnerAndApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByOwnerAndApp(ctx, req.(*QueryExtendedPairVaultMappingByOwnerAndAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID(ctx, req.(*QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTVLLockedByAppOfAllExtendedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTVLLockedByAppOfAllExtendedPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTVLLockedByAppOfAllExtendedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryTVLLockedByAppOfAllExtendedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTVLLockedByAppOfAllExtendedPairs(ctx, req.(*QueryTVLLockedByAppOfAllExtendedPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalTVLByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalTVLByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalTVLByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryTotalTVLByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalTVLByApp(ctx, req.(*QueryTotalTVLByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUserMyPositionByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMyPositionByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUserMyPositionByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.vault.v1beta1.Query/QueryUserMyPositionByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUserMyPositionByApp(ctx, req.(*QueryUserMyPositionByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.vault.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryVault",
			Handler:    _Query_QueryVault_Handler,
		},
		{
			MethodName: "QueryVaultInfo",
			Handler:    _Query_QueryVaultInfo_Handler,
		},
		{
			MethodName: "QueryVaultInfoByAppByOwner",
			Handler:    _Query_QueryVaultInfoByAppByOwner_Handler,
		},
		{
			MethodName: "QueryAllVaults",
			Handler:    _Query_QueryAllVaults_Handler,
		},
		{
			MethodName: "QueryAllVaultsByProduct",
			Handler:    _Query_QueryAllVaultsByProduct_Handler,
		},
		{
			MethodName: "QueryAllVaultsByAppAndExtendedPair",
			Handler:    _Query_QueryAllVaultsByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryVaultByProduct",
			Handler:    _Query_QueryVaultByProduct_Handler,
		},
		{
			MethodName: "QueryAllVaultByOwner",
			Handler:    _Query_QueryAllVaultByOwner_Handler,
		},
		{
			MethodName: "QueryTokenMintedAllProductsByPair",
			Handler:    _Query_QueryTokenMintedAllProductsByPair_Handler,
		},
		{
			MethodName: "QueryTokenMintedByProductAssetWise",
			Handler:    _Query_QueryTokenMintedByProductAssetWise_Handler,
		},
		{
			MethodName: "QueryVaultCountByProduct",
			Handler:    _Query_QueryVaultCountByProduct_Handler,
		},
		{
			MethodName: "QueryVaultCountByProductAndPair",
			Handler:    _Query_QueryVaultCountByProductAndPair_Handler,
		},
		{
			MethodName: "QueryTotalValueLockedByProductExtendedPair",
			Handler:    _Query_QueryTotalValueLockedByProductExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairIDByProduct",
			Handler:    _Query_QueryExtendedPairIDByProduct_Handler,
		},
		{
			MethodName: "QueryStableVaultInfo",
			Handler:    _Query_QueryStableVaultInfo_Handler,
		},
		{
			MethodName: "QueryAllStableVaults",
			Handler:    _Query_QueryAllStableVaults_Handler,
		},
		{
			MethodName: "QueryStableVaultByProductExtendedPair",
			Handler:    _Query_QueryStableVaultByProductExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByAppAndExtendedPairId",
			Handler:    _Query_QueryExtendedPairVaultMappingByAppAndExtendedPairId_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByApp",
			Handler:    _Query_QueryExtendedPairVaultMappingByApp_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByOwnerAndApp",
			Handler:    _Query_QueryExtendedPairVaultMappingByOwnerAndApp_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID",
			Handler:    _Query_QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairID_Handler,
		},
		{
			MethodName: "QueryTVLLockedByAppOfAllExtendedPairs",
			Handler:    _Query_QueryTVLLockedByAppOfAllExtendedPairs_Handler,
		},
		{
			MethodName: "QueryTotalTVLByApp",
			Handler:    _Query_QueryTotalTVLByApp_Handler,
		},
		{
			MethodName: "QueryUserMyPositionByApp",
			Handler:    _Query_QueryUserMyPositionByApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/vault/v1beta1/query.proto",
}

func (m *VaultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinCr.Size()
		i -= size
		if _, err := m.MinCr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.AssetOutDenom) > 0 {
		i -= len(m.AssetOutDenom)
		copy(dAtA[i:], m.AssetOutDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetOutDenom)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AssetInDenom) > 0 {
		i -= len(m.AssetInDenom)
		copy(dAtA[i:], m.AssetInDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetInDenom)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ExtendedPairName) > 0 {
		i -= len(m.ExtendedPairName)
		copy(dAtA[i:], m.ExtendedPairName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtendedPairName)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.CollateralizationRatio.Size()
		i -= size
		if _, err := m.CollateralizationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Debt.Size()
		i -= size
		if _, err := m.Debt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Collateral.Size()
		i -= size
		if _, err := m.Collateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VaultsInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoByAppByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoByAppByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoByAppByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoByAppByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoByAppByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoByAppByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultsInfo) > 0 {
		for iNdEx := len(m.VaultsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VaultsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		for iNdEx := len(m.VaultIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VaultIds[iNdEx])
			copy(dAtA[i:], m.VaultIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		for iNdEx := len(m.VaultIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VaultIds[iNdEx])
			copy(dAtA[i:], m.VaultIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsByPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsByPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsByPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAllProductsByPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAllProductsByPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAllProductsByPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenMinted.Size()
		i -= size
		if _, err := m.TokenMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedByProductAssetWiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedByProductAssetWiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedByProductAssetWiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedByProductAssetWiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedByProductAssetWiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedByProductAssetWiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintedData) > 0 {
		for iNdEx := len(m.MintedData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintedData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductAndPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductAndPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductAndPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByProductAndPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByProductAndPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByProductAndPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueLocked != nil {
		{
			size := m.ValueLocked.Size()
			i -= size
			if _, err := m.ValueLocked.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDByProductRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDByProductRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDByProductRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProductId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDByProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDByProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDByProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairIds) > 0 {
		dAtA18 := make([]byte, len(m.ExtendedPairIds)*10)
		var j17 int
		for _, num := range m.ExtendedPairIds {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintQuery(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StableVaultId) > 0 {
		i -= len(m.StableVaultId)
		copy(dAtA[i:], m.StableVaultId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StableVaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStableVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStableVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStableVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStableVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStableVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStableVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StableMintVault) > 0 {
		for iNdEx := len(m.StableMintVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StableMintVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByProductExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByProductExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByProductExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByProductExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByProductExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByProductExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairVaultMapping != nil {
		{
			size, err := m.ExtendedPairVaultMapping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairVaultMapping) > 0 {
		for iNdEx := len(m.ExtendedPairVaultMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPairVaultMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedPairtoVaultMapping) > 0 {
		for iNdEx := len(m.ExtendedPairtoVaultMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPairtoVaultMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPair != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPair))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultId) > 0 {
		i -= len(m.VaultId)
		copy(dAtA[i:], m.VaultId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tvldata) > 0 {
		for iNdEx := len(m.Tvldata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tvldata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalTVLByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTVLByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTVLByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalTVLByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTVLByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTVLByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralLocked.Size()
		i -= size
		if _, err := m.CollateralLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserMyPositionByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserMyPositionByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserMyPositionByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserMyPositionByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserMyPositionByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserMyPositionByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AverageCrRatio.Size()
		i -= size
		if _, err := m.AverageCrRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AvailableToBorrow.Size()
		i -= size
		if _, err := m.AvailableToBorrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalDue.Size()
		i -= size
		if _, err := m.TotalDue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CollateralLocked.Size()
		i -= size
		if _, err := m.CollateralLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ExtendedPairID != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Debt.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CollateralizationRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ExtendedPairName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.InterestRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.AssetInDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetOutDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.MinCr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VaultsInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultInfoByAppByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultInfoByAppByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultsInfo) > 0 {
		for _, e := range m.VaultsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryAllVaultsByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		for _, s := range m.VaultIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllVaultByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		for _, s := range m.VaultIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenMintedAllProductsByPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedAllProductsByPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenMinted.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenMintedByProductAssetWiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedByProductAssetWiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MintedData) > 0 {
		for _, e := range m.MintedData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVaultCountByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuery(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryVaultCountByProductAndPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByProductAndPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuery(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryTotalValueLockedByProductExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalValueLockedByProductExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueLocked != nil {
		l = m.ValueLocked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDByProductRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != 0 {
		n += 1 + sovQuery(uint64(m.ProductId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDByProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairIds) > 0 {
		l = 0
		for _, e := range m.ExtendedPairIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryStableVaultInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StableVaultId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableVaultInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStableVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryAllStableVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StableMintVault) > 0 {
		for _, e := range m.StableMintVault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStableVaultByProductExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	return n
}

func (m *QueryStableVaultByProductExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendedPairVaultMapping != nil {
		l = m.ExtendedPairVaultMapping.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairVaultMapping) > 0 {
		for _, e := range m.ExtendedPairVaultMapping {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairtoVaultMapping) > 0 {
		for _, e := range m.ExtendedPairtoVaultMapping {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPair != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPair))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tvldata) > 0 {
		for _, e := range m.Tvldata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalTVLByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryTotalTVLByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollateralLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserMyPositionByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserMyPositionByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollateralLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalDue.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AvailableToBorrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AverageCrRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairID", wireType)
			}
			m.ExtendedPairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Debt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralizationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoByAppByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoByAppByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoByAppByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoByAppByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoByAppByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoByAppByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultsInfo = append(m.VaultsInfo, VaultInfo{})
			if err := m.VaultsInfo[len(m.VaultsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultIds = append(m.VaultIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultIds = append(m.VaultIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsByPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAllProductsByPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAllProductsByPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedByProductAssetWiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedByProductAssetWiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedByProductAssetWiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedByProductAssetWiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedByProductAssetWiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedByProductAssetWiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintedData = append(m.MintedData, MintedDataMap{})
			if err := m.MintedData[len(m.MintedData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductAndPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByProductAndPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByProductAndPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByProductExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByProductExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByProductExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.ValueLocked = &v
			if err := m.ValueLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDByProductRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDByProductResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDByProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedPairIds = append(m.ExtendedPairIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtendedPairIds) == 0 {
					m.ExtendedPairIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedPairIds = append(m.ExtendedPairIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableVaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StableVaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStableVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStableVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStableVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStableVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStableVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStableVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StableMintVault = append(m.StableMintVault, &StableMintVault{})
			if err := m.StableMintVault[len(m.StableMintVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByProductExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByProductExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByProductExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedPairVaultMapping == nil {
				m.ExtendedPairVaultMapping = &ExtendedPairVaultMapping{}
			}
			if err := m.ExtendedPairVaultMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairVaultMapping = append(m.ExtendedPairVaultMapping, &ExtendedPairVaultMapping{})
			if err := m.ExtendedPairVaultMapping[len(m.ExtendedPairVaultMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairtoVaultMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairtoVaultMapping = append(m.ExtendedPairtoVaultMapping, &ExtendedPairToVaultMapping{})
			if err := m.ExtendedPairtoVaultMapping[len(m.ExtendedPairtoVaultMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPair", wireType)
			}
			m.ExtendedPair = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPair |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByOwnerAndAppAndExtendedPairIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLLockedByAppOfAllExtendedPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLLockedByAppOfAllExtendedPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLLockedByAppOfAllExtendedPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLLockedByAppOfAllExtendedPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLLockedByAppOfAllExtendedPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tvldata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tvldata = append(m.Tvldata, TvlLockedDataMap{})
			if err := m.Tvldata[len(m.Tvldata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTVLByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTVLByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTVLByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTVLByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTVLByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTVLByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserMyPositionByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserMyPositionByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableToBorrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageCrRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AverageCrRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
