// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/lend/v1beta1/lend.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LendAsset struct {
	ID                  uint64                                  `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	AssetID             uint64                                  `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolID              uint64                                  `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Owner               string                                  `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	LendingTime         time.Time                               `protobuf:"bytes,6,opt,name=lending_time,json=lendingTime,proto3,stdtime" json:"lending_time" yaml:"lending_time"`
	AvailableToBorrow   github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,7,opt,name=available_to_borrow,json=availableToBorrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_to_borrow" yaml:"available_to_borrow"`
	AppID               uint64                                  `protobuf:"varint,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	GlobalIndex         github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,9,opt,name=global_index,json=globalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"global_index" yaml:"global_index"`
	LastInteractionTime time.Time                               `protobuf:"bytes,10,opt,name=last_interaction_time,json=lastInteractionTime,proto3,stdtime" json:"last_interaction_time" yaml:"last_interaction_time"`
	CPoolName           string                                  `protobuf:"bytes,11,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	TotalRewards        github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,12,opt,name=total_rewards,json=totalRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_rewards" yaml:"total_rewards"`
}

func (m *LendAsset) Reset()         { *m = LendAsset{} }
func (m *LendAsset) String() string { return proto.CompactTextString(m) }
func (*LendAsset) ProtoMessage()    {}
func (*LendAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{0}
}
func (m *LendAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendAsset.Merge(m, src)
}
func (m *LendAsset) XXX_Size() int {
	return m.Size()
}
func (m *LendAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_LendAsset.DiscardUnknown(m)
}

var xxx_messageInfo_LendAsset proto.InternalMessageInfo

func (m *LendAsset) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LendAsset) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *LendAsset) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *LendAsset) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LendAsset) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LendAsset) GetLendingTime() time.Time {
	if m != nil {
		return m.LendingTime
	}
	return time.Time{}
}

func (m *LendAsset) GetAppID() uint64 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *LendAsset) GetLastInteractionTime() time.Time {
	if m != nil {
		return m.LastInteractionTime
	}
	return time.Time{}
}

func (m *LendAsset) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

type BorrowAsset struct {
	ID                  uint64                                  `protobuf:"varint,1,opt,name=borrowing_id,json=borrowingId,proto3" json:"borrowing_id,omitempty" yaml:"borrowing_id"`
	LendingID           uint64                                  `protobuf:"varint,2,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	IsStableBorrow      bool                                    `protobuf:"varint,3,opt,name=is_stable_borrow,json=isStableBorrow,proto3" json:"is_stable_borrow,omitempty" yaml:"is_stable_borrow"`
	PairID              uint64                                  `protobuf:"varint,4,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	AmountIn            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	AmountOut           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_out" yaml:"amount_out"`
	BridgedAssetAmount  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=bridged_asset_amount,json=bridgedAssetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bridged_asset_amount" yaml:"bridged_asset_amount"`
	BorrowingTime       time.Time                               `protobuf:"bytes,8,opt,name=borrowing_time,json=borrowingTime,proto3,stdtime" json:"borrowing_time" yaml:"borrowing_time"`
	StableBorrowRate    github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,9,opt,name=stable_borrow_rate,json=stableBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_rate" yaml:"stable_borrow_rate"`
	InterestAccumulated github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,10,opt,name=interest_accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_accumulated" yaml:"interest_accumulated"`
	GlobalIndex         github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,11,opt,name=global_index,json=globalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"global_index" yaml:"global_index"`
	ReserveGlobalIndex  github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,12,opt,name=reserve_global_index,json=reserveGlobalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_global_index" yaml:"reserve_global_index"`
	LastInteractionTime time.Time                               `protobuf:"bytes,13,opt,name=last_interaction_time,json=lastInteractionTime,proto3,stdtime" json:"last_interaction_time" yaml:"last_interaction_time"`
	CPoolName           string                                  `protobuf:"bytes,14,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	IsLiquidated        bool                                    `protobuf:"varint,15,opt,name=is_liquidated,json=isLiquidated,proto3" json:"is_liquidated,omitempty" yaml:"is_liquidated"`
}

func (m *BorrowAsset) Reset()         { *m = BorrowAsset{} }
func (m *BorrowAsset) String() string { return proto.CompactTextString(m) }
func (*BorrowAsset) ProtoMessage()    {}
func (*BorrowAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{1}
}
func (m *BorrowAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowAsset.Merge(m, src)
}
func (m *BorrowAsset) XXX_Size() int {
	return m.Size()
}
func (m *BorrowAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowAsset.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowAsset proto.InternalMessageInfo

func (m *BorrowAsset) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BorrowAsset) GetLendingID() uint64 {
	if m != nil {
		return m.LendingID
	}
	return 0
}

func (m *BorrowAsset) GetIsStableBorrow() bool {
	if m != nil {
		return m.IsStableBorrow
	}
	return false
}

func (m *BorrowAsset) GetPairID() uint64 {
	if m != nil {
		return m.PairID
	}
	return 0
}

func (m *BorrowAsset) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAsset) GetAmountOut() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountOut
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAsset) GetBridgedAssetAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.BridgedAssetAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAsset) GetBorrowingTime() time.Time {
	if m != nil {
		return m.BorrowingTime
	}
	return time.Time{}
}

func (m *BorrowAsset) GetLastInteractionTime() time.Time {
	if m != nil {
		return m.LastInteractionTime
	}
	return time.Time{}
}

func (m *BorrowAsset) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

func (m *BorrowAsset) GetIsLiquidated() bool {
	if m != nil {
		return m.IsLiquidated
	}
	return false
}

type Pool struct {
	PoolID     uint64                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleName string                  `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	CPoolName  string                  `protobuf:"bytes,3,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	AssetData  []*AssetDataPoolMapping `protobuf:"bytes,4,rep,name=asset_data,json=assetData,proto3" json:"asset_data,omitempty" yaml:"asset_data"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{2}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *Pool) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *Pool) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

func (m *Pool) GetAssetData() []*AssetDataPoolMapping {
	if m != nil {
		return m.AssetData
	}
	return nil
}

type UserAssetLendBorrowMapping struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	//to check if poool id is needed
	LendId   uint64   `protobuf:"varint,2,opt,name=lend_id,json=lendId,proto3" json:"lend_id,omitempty" yaml:"lend_id"`
	PoolId   uint64   `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	BorrowId []uint64 `protobuf:"varint,4,rep,packed,name=borrow_id,json=borrowId,proto3" json:"borrow_id,omitempty" yaml:"borrow_id"`
}

func (m *UserAssetLendBorrowMapping) Reset()         { *m = UserAssetLendBorrowMapping{} }
func (m *UserAssetLendBorrowMapping) String() string { return proto.CompactTextString(m) }
func (*UserAssetLendBorrowMapping) ProtoMessage()    {}
func (*UserAssetLendBorrowMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{3}
}
func (m *UserAssetLendBorrowMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAssetLendBorrowMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAssetLendBorrowMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAssetLendBorrowMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAssetLendBorrowMapping.Merge(m, src)
}
func (m *UserAssetLendBorrowMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserAssetLendBorrowMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAssetLendBorrowMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserAssetLendBorrowMapping proto.InternalMessageInfo

func (m *UserAssetLendBorrowMapping) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserAssetLendBorrowMapping) GetLendId() uint64 {
	if m != nil {
		return m.LendId
	}
	return 0
}

func (m *UserAssetLendBorrowMapping) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UserAssetLendBorrowMapping) GetBorrowId() []uint64 {
	if m != nil {
		return m.BorrowId
	}
	return nil
}

type AssetDataPoolMapping struct {
	AssetID uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	// 1 for main_asset, 2 for 1st transit_asset, 3 for 2nd transit_asset
	AssetTransitType uint64                                 `protobuf:"varint,2,opt,name=asset_transit_type,json=assetTransitType,proto3" json:"asset_transit_type,omitempty" yaml:"asset_transit_type"`
	SupplyCap        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=supply_cap,json=supplyCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"supply_cap" yaml:"supply_cap"`
}

func (m *AssetDataPoolMapping) Reset()         { *m = AssetDataPoolMapping{} }
func (m *AssetDataPoolMapping) String() string { return proto.CompactTextString(m) }
func (*AssetDataPoolMapping) ProtoMessage()    {}
func (*AssetDataPoolMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{4}
}
func (m *AssetDataPoolMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetDataPoolMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetDataPoolMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetDataPoolMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetDataPoolMapping.Merge(m, src)
}
func (m *AssetDataPoolMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetDataPoolMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetDataPoolMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetDataPoolMapping proto.InternalMessageInfo

func (m *AssetDataPoolMapping) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetDataPoolMapping) GetAssetTransitType() uint64 {
	if m != nil {
		return m.AssetTransitType
	}
	return 0
}

type Extended_Pair struct {
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetIn         uint64 `protobuf:"varint,2,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty" yaml:"asset_in"`
	AssetOut        uint64 `protobuf:"varint,3,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty" yaml:"asset_out"`
	IsInterPool     bool   `protobuf:"varint,4,opt,name=is_inter_pool,json=isInterPool,proto3" json:"is_inter_pool,omitempty" yaml:"is_inter_pool"`
	AssetOutPoolID  uint64 `protobuf:"varint,5,opt,name=asset_out_pool_id,json=assetOutPoolId,proto3" json:"asset_out_pool_id,omitempty" yaml:"asset_out_pool_id"`
	MinUsdValueLeft uint64 `protobuf:"varint,6,opt,name=min_usd_value_left,json=minUsdValueLeft,proto3" json:"min_usd_value_left,omitempty" yaml:"min_usd_value_left"`
	IsEModeEnabled  bool   `protobuf:"varint,7,opt,name=is_e_mode_enabled,json=isEModeEnabled,proto3" json:"is_e_mode_enabled,omitempty" yaml:"is_e_mode_enabled"`
}

func (m *Extended_Pair) Reset()         { *m = Extended_Pair{} }
func (m *Extended_Pair) String() string { return proto.CompactTextString(m) }
func (*Extended_Pair) ProtoMessage()    {}
func (*Extended_Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{5}
}
func (m *Extended_Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extended_Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extended_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extended_Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extended_Pair.Merge(m, src)
}
func (m *Extended_Pair) XXX_Size() int {
	return m.Size()
}
func (m *Extended_Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Extended_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Extended_Pair proto.InternalMessageInfo

func (m *Extended_Pair) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Extended_Pair) GetAssetIn() uint64 {
	if m != nil {
		return m.AssetIn
	}
	return 0
}

func (m *Extended_Pair) GetAssetOut() uint64 {
	if m != nil {
		return m.AssetOut
	}
	return 0
}

func (m *Extended_Pair) GetIsInterPool() bool {
	if m != nil {
		return m.IsInterPool
	}
	return false
}

func (m *Extended_Pair) GetAssetOutPoolID() uint64 {
	if m != nil {
		return m.AssetOutPoolID
	}
	return 0
}

func (m *Extended_Pair) GetMinUsdValueLeft() uint64 {
	if m != nil {
		return m.MinUsdValueLeft
	}
	return 0
}

func (m *Extended_Pair) GetIsEModeEnabled() bool {
	if m != nil {
		return m.IsEModeEnabled
	}
	return false
}

type AssetToPairMapping struct {
	PoolID  uint64   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	AssetID uint64   `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PairID  []uint64 `protobuf:"varint,3,rep,packed,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
}

func (m *AssetToPairMapping) Reset()         { *m = AssetToPairMapping{} }
func (m *AssetToPairMapping) String() string { return proto.CompactTextString(m) }
func (*AssetToPairMapping) ProtoMessage()    {}
func (*AssetToPairMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{6}
}
func (m *AssetToPairMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToPairMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToPairMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToPairMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToPairMapping.Merge(m, src)
}
func (m *AssetToPairMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetToPairMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToPairMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToPairMapping proto.InternalMessageInfo

func (m *AssetToPairMapping) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *AssetToPairMapping) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetToPairMapping) GetPairID() []uint64 {
	if m != nil {
		return m.PairID
	}
	return nil
}

type PoolAssetLBMapping struct {
	PoolID                   uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	AssetID                  uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	LendIds                  []uint64                               `protobuf:"varint,3,rep,packed,name=lend_ids,json=lendIds,proto3" json:"lend_ids,omitempty" yaml:"lend_ids"`
	BorrowIds                []uint64                               `protobuf:"varint,4,rep,packed,name=borrow_ids,json=borrowIds,proto3" json:"borrow_ids,omitempty" yaml:"borrow_ids"`
	TotalBorrowed            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_borrowed,json=totalBorrowed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_borrowed" yaml:"total_borrowed"`
	TotalStableBorrowed      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_stable_borrowed,json=totalStableBorrowed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_stable_borrowed" yaml:"total_stable_borrowed"`
	TotalLend                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=total_lend,json=totalLend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_lend" yaml:"total_lend"`
	TotalInterestAccumulated github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_interest_accumulated,json=totalInterestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_interest_accumulated" yaml:"total_interest_accumulated"`
	LendApr                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=lend_apr,json=lendApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lend_apr" yaml:"lend_apr"`
	BorrowApr                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=borrow_apr,json=borrowApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrow_apr" yaml:"borrow_apr"`
	StableBorrowApr          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=stable_borrow_apr,json=stableBorrowApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_apr" yaml:"stable_borrow_apr"`
	UtilisationRatio         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=utilisation_ratio,json=utilisationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"utilisation_ratio" yaml:"utilisation_ratio"`
}

func (m *PoolAssetLBMapping) Reset()         { *m = PoolAssetLBMapping{} }
func (m *PoolAssetLBMapping) String() string { return proto.CompactTextString(m) }
func (*PoolAssetLBMapping) ProtoMessage()    {}
func (*PoolAssetLBMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{7}
}
func (m *PoolAssetLBMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAssetLBMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAssetLBMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAssetLBMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAssetLBMapping.Merge(m, src)
}
func (m *PoolAssetLBMapping) XXX_Size() int {
	return m.Size()
}
func (m *PoolAssetLBMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAssetLBMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAssetLBMapping proto.InternalMessageInfo

func (m *PoolAssetLBMapping) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *PoolAssetLBMapping) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *PoolAssetLBMapping) GetLendIds() []uint64 {
	if m != nil {
		return m.LendIds
	}
	return nil
}

func (m *PoolAssetLBMapping) GetBorrowIds() []uint64 {
	if m != nil {
		return m.BorrowIds
	}
	return nil
}

type AssetRatesParams struct {
	AssetID               uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	UOptimal              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=u_optimal,json=uOptimal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_optimal" yaml:"u_optimal"`
	Base                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base" yaml:"base"`
	Slope1                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=slope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope1" yaml:"slope1"`
	Slope2                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=slope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope2" yaml:"slope2"`
	EnableStableBorrow    bool                                   `protobuf:"varint,6,opt,name=enable_stable_borrow,json=enableStableBorrow,proto3" json:"enable_stable_borrow,omitempty" yaml:"enable_stable_borrow"`
	StableBase            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=stable_base,json=stableBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_base" yaml:"stable_base"`
	StableSlope1          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=stable_slope1,json=stableSlope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope1" yaml:"stable_slope1"`
	StableSlope2          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=stable_slope2,json=stableSlope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope2" yaml:"stable_slope2"`
	Ltv                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=ltv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ltv" yaml:"ltv"`
	LiquidationThreshold  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold" yaml:"liquidation_threshold"`
	LiquidationPenalty    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty" yaml:"liquidation_penalty"`
	LiquidationBonus      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=liquidation_bonus,json=liquidationBonus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_bonus" yaml:"liquidation_bonus"`
	ReserveFactor         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	CAssetID              uint64                                 `protobuf:"varint,15,opt,name=c_asset_id,json=cAssetId,proto3" json:"c_asset_id,omitempty" yaml:"c_asset_id"`
	IsIsolated            bool                                   `protobuf:"varint,16,opt,name=is_isolated,json=isIsolated,proto3" json:"is_isolated,omitempty" yaml:"is_isolated"`
	ELtv                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=e_ltv,json=eLtv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"e_ltv" yaml:"e_ltv"`
	ELiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=e_liquidation_threshold,json=eLiquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"e_liquidation_threshold" yaml:"e_liquidation_threshold"`
	ELiquidationPenalty   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,19,opt,name=e_liquidation_penalty,json=eLiquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"e_liquidation_penalty" yaml:"e_liquidation_penalty"`
}

func (m *AssetRatesParams) Reset()         { *m = AssetRatesParams{} }
func (m *AssetRatesParams) String() string { return proto.CompactTextString(m) }
func (*AssetRatesParams) ProtoMessage()    {}
func (*AssetRatesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{8}
}
func (m *AssetRatesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetRatesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetRatesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetRatesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetRatesParams.Merge(m, src)
}
func (m *AssetRatesParams) XXX_Size() int {
	return m.Size()
}
func (m *AssetRatesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetRatesParams.DiscardUnknown(m)
}

var xxx_messageInfo_AssetRatesParams proto.InternalMessageInfo

func (m *AssetRatesParams) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetRatesParams) GetEnableStableBorrow() bool {
	if m != nil {
		return m.EnableStableBorrow
	}
	return false
}

func (m *AssetRatesParams) GetCAssetID() uint64 {
	if m != nil {
		return m.CAssetID
	}
	return 0
}

func (m *AssetRatesParams) GetIsIsolated() bool {
	if m != nil {
		return m.IsIsolated
	}
	return false
}

type ReserveBuybackAssetData struct {
	AssetID       uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	ReserveAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=reserve_amount,json=reserveAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve_amount" yaml:"reserve_amount"`
	BuybackAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=buyback_amount,json=buybackAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"buyback_amount" yaml:"buyback_amount"`
}

func (m *ReserveBuybackAssetData) Reset()         { *m = ReserveBuybackAssetData{} }
func (m *ReserveBuybackAssetData) String() string { return proto.CompactTextString(m) }
func (*ReserveBuybackAssetData) ProtoMessage()    {}
func (*ReserveBuybackAssetData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{9}
}
func (m *ReserveBuybackAssetData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveBuybackAssetData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveBuybackAssetData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveBuybackAssetData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveBuybackAssetData.Merge(m, src)
}
func (m *ReserveBuybackAssetData) XXX_Size() int {
	return m.Size()
}
func (m *ReserveBuybackAssetData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveBuybackAssetData.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveBuybackAssetData proto.InternalMessageInfo

func (m *ReserveBuybackAssetData) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type AuctionParams struct {
	AppId                  uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AuctionDurationSeconds uint64                                 `protobuf:"varint,2,opt,name=auction_duration_seconds,json=auctionDurationSeconds,proto3" json:"auction_duration_seconds,omitempty" yaml:"auction_duration_seconds"`
	Buffer                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=buffer,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"buffer" yaml:"buffer"`
	Cusp                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=cusp,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cusp" yaml:"cusp"`
	Step                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=step,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"step" yaml:"step"`
	PriceFunctionType      uint64                                 `protobuf:"varint,6,opt,name=price_function_type,json=priceFunctionType,proto3" json:"price_function_type,omitempty" yaml:"price_function_type"`
	DutchId                uint64                                 `protobuf:"varint,7,opt,name=dutch_id,json=dutchId,proto3" json:"dutch_id,omitempty" yaml:"dutch_id"`
	BidDurationSeconds     uint64                                 `protobuf:"varint,8,opt,name=bid_duration_seconds,json=bidDurationSeconds,proto3" json:"bid_duration_seconds,omitempty" yaml:"bid_duration_seconds"`
}

func (m *AuctionParams) Reset()         { *m = AuctionParams{} }
func (m *AuctionParams) String() string { return proto.CompactTextString(m) }
func (*AuctionParams) ProtoMessage()    {}
func (*AuctionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{10}
}
func (m *AuctionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionParams.Merge(m, src)
}
func (m *AuctionParams) XXX_Size() int {
	return m.Size()
}
func (m *AuctionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionParams.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionParams proto.InternalMessageInfo

func (m *AuctionParams) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AuctionParams) GetAuctionDurationSeconds() uint64 {
	if m != nil {
		return m.AuctionDurationSeconds
	}
	return 0
}

func (m *AuctionParams) GetPriceFunctionType() uint64 {
	if m != nil {
		return m.PriceFunctionType
	}
	return 0
}

func (m *AuctionParams) GetDutchId() uint64 {
	if m != nil {
		return m.DutchId
	}
	return 0
}

func (m *AuctionParams) GetBidDurationSeconds() uint64 {
	if m != nil {
		return m.BidDurationSeconds
	}
	return 0
}

type BorrowInterestTracker struct {
	BorrowingId         uint64                                 `protobuf:"varint,1,opt,name=borrowing_id,json=borrowingId,proto3" json:"borrowing_id,omitempty" yaml:"borrowing_id"`
	ReservePoolInterest github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=reserve_pool_interest,json=reservePoolInterest,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_pool_interest" yaml:"reserve_pool_interest"`
}

func (m *BorrowInterestTracker) Reset()         { *m = BorrowInterestTracker{} }
func (m *BorrowInterestTracker) String() string { return proto.CompactTextString(m) }
func (*BorrowInterestTracker) ProtoMessage()    {}
func (*BorrowInterestTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{11}
}
func (m *BorrowInterestTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowInterestTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowInterestTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowInterestTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowInterestTracker.Merge(m, src)
}
func (m *BorrowInterestTracker) XXX_Size() int {
	return m.Size()
}
func (m *BorrowInterestTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowInterestTracker.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowInterestTracker proto.InternalMessageInfo

func (m *BorrowInterestTracker) GetBorrowingId() uint64 {
	if m != nil {
		return m.BorrowingId
	}
	return 0
}

type LendRewardsTracker struct {
	LendingId          uint64                                 `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	RewardsAccumulated github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rewards_accumulated,json=rewardsAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewards_accumulated" yaml:"interest_accumulated"`
}

func (m *LendRewardsTracker) Reset()         { *m = LendRewardsTracker{} }
func (m *LendRewardsTracker) String() string { return proto.CompactTextString(m) }
func (*LendRewardsTracker) ProtoMessage()    {}
func (*LendRewardsTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{12}
}
func (m *LendRewardsTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendRewardsTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendRewardsTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendRewardsTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendRewardsTracker.Merge(m, src)
}
func (m *LendRewardsTracker) XXX_Size() int {
	return m.Size()
}
func (m *LendRewardsTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_LendRewardsTracker.DiscardUnknown(m)
}

var xxx_messageInfo_LendRewardsTracker proto.InternalMessageInfo

func (m *LendRewardsTracker) GetLendingId() uint64 {
	if m != nil {
		return m.LendingId
	}
	return 0
}

type ModuleBalance struct {
	PoolID             uint64               `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleBalanceStats []ModuleBalanceStats `protobuf:"bytes,2,rep,name=module_balance_stats,json=moduleBalanceStats,proto3" json:"module_balance_stats" yaml:"module_balance_stats"`
}

func (m *ModuleBalance) Reset()         { *m = ModuleBalance{} }
func (m *ModuleBalance) String() string { return proto.CompactTextString(m) }
func (*ModuleBalance) ProtoMessage()    {}
func (*ModuleBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{13}
}
func (m *ModuleBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalance.Merge(m, src)
}
func (m *ModuleBalance) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalance.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalance proto.InternalMessageInfo

func (m *ModuleBalance) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *ModuleBalance) GetModuleBalanceStats() []ModuleBalanceStats {
	if m != nil {
		return m.ModuleBalanceStats
	}
	return nil
}

type ModuleBalanceStats struct {
	AssetID uint64                                  `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Balance github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=balance,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance" yaml:"balance"`
}

func (m *ModuleBalanceStats) Reset()         { *m = ModuleBalanceStats{} }
func (m *ModuleBalanceStats) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceStats) ProtoMessage()    {}
func (*ModuleBalanceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{14}
}
func (m *ModuleBalanceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceStats.Merge(m, src)
}
func (m *ModuleBalanceStats) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceStats.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceStats proto.InternalMessageInfo

func (m *ModuleBalanceStats) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *ModuleBalanceStats) GetBalance() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Balance
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

type ModBal struct {
	FundModuleBalance []FundModBal `protobuf:"bytes,1,rep,name=fund_module_balance,json=fundModuleBalance,proto3" json:"fund_module_balance" yaml:"fund_module_balance"`
}

func (m *ModBal) Reset()         { *m = ModBal{} }
func (m *ModBal) String() string { return proto.CompactTextString(m) }
func (*ModBal) ProtoMessage()    {}
func (*ModBal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{15}
}
func (m *ModBal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModBal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModBal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModBal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModBal.Merge(m, src)
}
func (m *ModBal) XXX_Size() int {
	return m.Size()
}
func (m *ModBal) XXX_DiscardUnknown() {
	xxx_messageInfo_ModBal.DiscardUnknown(m)
}

var xxx_messageInfo_ModBal proto.InternalMessageInfo

func (m *ModBal) GetFundModuleBalance() []FundModBal {
	if m != nil {
		return m.FundModuleBalance
	}
	return nil
}

type ReserveBal struct {
	FundReserveBalance []FundReserveBal `protobuf:"bytes,1,rep,name=fund_reserve_balance,json=fundReserveBalance,proto3" json:"fund_reserve_balance" yaml:"fund_reserve_balance"`
}

func (m *ReserveBal) Reset()         { *m = ReserveBal{} }
func (m *ReserveBal) String() string { return proto.CompactTextString(m) }
func (*ReserveBal) ProtoMessage()    {}
func (*ReserveBal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{16}
}
func (m *ReserveBal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveBal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveBal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveBal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveBal.Merge(m, src)
}
func (m *ReserveBal) XXX_Size() int {
	return m.Size()
}
func (m *ReserveBal) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveBal.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveBal proto.InternalMessageInfo

func (m *ReserveBal) GetFundReserveBalance() []FundReserveBal {
	if m != nil {
		return m.FundReserveBalance
	}
	return nil
}

type FundModBal struct {
	AssetID     uint64                                  `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolID      uint64                                  `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	AmountIn    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	DepositTime time.Time                               `protobuf:"bytes,4,opt,name=deposit_time,json=depositTime,proto3,stdtime" json:"deposit_time" yaml:"deposit_time"`
	Funder      string                                  `protobuf:"bytes,5,opt,name=funder,proto3" json:"funder,omitempty" yaml:"funder"`
}

func (m *FundModBal) Reset()         { *m = FundModBal{} }
func (m *FundModBal) String() string { return proto.CompactTextString(m) }
func (*FundModBal) ProtoMessage()    {}
func (*FundModBal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{17}
}
func (m *FundModBal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundModBal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundModBal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundModBal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundModBal.Merge(m, src)
}
func (m *FundModBal) XXX_Size() int {
	return m.Size()
}
func (m *FundModBal) XXX_DiscardUnknown() {
	xxx_messageInfo_FundModBal.DiscardUnknown(m)
}

var xxx_messageInfo_FundModBal proto.InternalMessageInfo

func (m *FundModBal) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *FundModBal) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *FundModBal) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *FundModBal) GetDepositTime() time.Time {
	if m != nil {
		return m.DepositTime
	}
	return time.Time{}
}

func (m *FundModBal) GetFunder() string {
	if m != nil {
		return m.Funder
	}
	return ""
}

type FundReserveBal struct {
	AssetID     uint64                                  `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AmountIn    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	DepositTime time.Time                               `protobuf:"bytes,3,opt,name=deposit_time,json=depositTime,proto3,stdtime" json:"deposit_time" yaml:"deposit_time"`
	Funder      string                                  `protobuf:"bytes,4,opt,name=funder,proto3" json:"funder,omitempty" yaml:"funder"`
}

func (m *FundReserveBal) Reset()         { *m = FundReserveBal{} }
func (m *FundReserveBal) String() string { return proto.CompactTextString(m) }
func (*FundReserveBal) ProtoMessage()    {}
func (*FundReserveBal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{18}
}
func (m *FundReserveBal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundReserveBal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundReserveBal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundReserveBal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundReserveBal.Merge(m, src)
}
func (m *FundReserveBal) XXX_Size() int {
	return m.Size()
}
func (m *FundReserveBal) XXX_DiscardUnknown() {
	xxx_messageInfo_FundReserveBal.DiscardUnknown(m)
}

var xxx_messageInfo_FundReserveBal proto.InternalMessageInfo

func (m *FundReserveBal) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *FundReserveBal) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *FundReserveBal) GetDepositTime() time.Time {
	if m != nil {
		return m.DepositTime
	}
	return time.Time{}
}

func (m *FundReserveBal) GetFunder() string {
	if m != nil {
		return m.Funder
	}
	return ""
}

type AllReserveStats struct {
	AssetID                        uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AmountOutFromReserveToLenders  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount_out_from_reserve_to_lenders,json=amountOutFromReserveToLenders,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out_from_reserve_to_lenders" yaml:"amount_out_from_reserve_to_lenders"`
	AmountOutFromReserveForAuction github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount_out_from_reserve_for_auction,json=amountOutFromReserveForAuction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out_from_reserve_for_auction" yaml:"amount_out_from_reserve_for_auction"`
	AmountInFromLiqPenalty         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount_in_from_liq_penalty,json=amountInFromLiqPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in_from_liq_penalty" yaml:"amount_in_from_liq_penalty"`
	AmountInFromRepayments         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount_in_from_repayments,json=amountInFromRepayments,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in_from_repayments" yaml:"amount_in_from_repayments"`
	TotalAmountOutToLenders        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_amount_out_to_lenders,json=totalAmountOutToLenders,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount_out_to_lenders" yaml:"total_amount_out_to_lenders"`
}

func (m *AllReserveStats) Reset()         { *m = AllReserveStats{} }
func (m *AllReserveStats) String() string { return proto.CompactTextString(m) }
func (*AllReserveStats) ProtoMessage()    {}
func (*AllReserveStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{19}
}
func (m *AllReserveStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllReserveStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllReserveStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllReserveStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllReserveStats.Merge(m, src)
}
func (m *AllReserveStats) XXX_Size() int {
	return m.Size()
}
func (m *AllReserveStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AllReserveStats.DiscardUnknown(m)
}

var xxx_messageInfo_AllReserveStats proto.InternalMessageInfo

func (m *AllReserveStats) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type AssetToPairSingleMapping struct {
	PoolID  uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	AssetID uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PairID  uint64 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
}

func (m *AssetToPairSingleMapping) Reset()         { *m = AssetToPairSingleMapping{} }
func (m *AssetToPairSingleMapping) String() string { return proto.CompactTextString(m) }
func (*AssetToPairSingleMapping) ProtoMessage()    {}
func (*AssetToPairSingleMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{20}
}
func (m *AssetToPairSingleMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToPairSingleMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToPairSingleMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToPairSingleMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToPairSingleMapping.Merge(m, src)
}
func (m *AssetToPairSingleMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetToPairSingleMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToPairSingleMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToPairSingleMapping proto.InternalMessageInfo

func (m *AssetToPairSingleMapping) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *AssetToPairSingleMapping) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetToPairSingleMapping) GetPairID() uint64 {
	if m != nil {
		return m.PairID
	}
	return 0
}

type PoolPairs struct {
	PoolID          uint64                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleName      string                  `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	CPoolName       string                  `protobuf:"bytes,3,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	AssetData       []*AssetDataPoolMapping `protobuf:"bytes,4,rep,name=asset_data,json=assetData,proto3" json:"asset_data,omitempty" yaml:"asset_data"`
	MinUsdValueLeft uint64                  `protobuf:"varint,5,opt,name=min_usd_value_left,json=minUsdValueLeft,proto3" json:"min_usd_value_left,omitempty" yaml:"min_usd_value_left"`
}

func (m *PoolPairs) Reset()         { *m = PoolPairs{} }
func (m *PoolPairs) String() string { return proto.CompactTextString(m) }
func (*PoolPairs) ProtoMessage()    {}
func (*PoolPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{21}
}
func (m *PoolPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPairs.Merge(m, src)
}
func (m *PoolPairs) XXX_Size() int {
	return m.Size()
}
func (m *PoolPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPairs.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPairs proto.InternalMessageInfo

func (m *PoolPairs) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *PoolPairs) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *PoolPairs) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

func (m *PoolPairs) GetAssetData() []*AssetDataPoolMapping {
	if m != nil {
		return m.AssetData
	}
	return nil
}

func (m *PoolPairs) GetMinUsdValueLeft() uint64 {
	if m != nil {
		return m.MinUsdValueLeft
	}
	return 0
}

type PoolInterestData struct {
	AssetID      uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	LendInterest github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=lend_interest,json=lendInterest,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lend_interest" yaml:"lend_interest"`
}

func (m *PoolInterestData) Reset()         { *m = PoolInterestData{} }
func (m *PoolInterestData) String() string { return proto.CompactTextString(m) }
func (*PoolInterestData) ProtoMessage()    {}
func (*PoolInterestData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{22}
}
func (m *PoolInterestData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInterestData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInterestData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInterestData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInterestData.Merge(m, src)
}
func (m *PoolInterestData) XXX_Size() int {
	return m.Size()
}
func (m *PoolInterestData) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInterestData.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInterestData proto.InternalMessageInfo

func (m *PoolInterestData) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type PoolInterest struct {
	PoolID           uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	PoolInterestData []PoolInterestData `protobuf:"bytes,2,rep,name=pool_interest_data,json=poolInterestData,proto3" json:"pool_interest_data" yaml:"pool_interest_data"`
}

func (m *PoolInterest) Reset()         { *m = PoolInterest{} }
func (m *PoolInterest) String() string { return proto.CompactTextString(m) }
func (*PoolInterest) ProtoMessage()    {}
func (*PoolInterest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{23}
}
func (m *PoolInterest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInterest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInterest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInterest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInterest.Merge(m, src)
}
func (m *PoolInterest) XXX_Size() int {
	return m.Size()
}
func (m *PoolInterest) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInterest.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInterest proto.InternalMessageInfo

func (m *PoolInterest) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *PoolInterest) GetPoolInterestData() []PoolInterestData {
	if m != nil {
		return m.PoolInterestData
	}
	return nil
}

type PoolInterestDataB struct {
	AssetID        uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	BorrowInterest github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=borrow_interest,json=borrowInterest,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"borrow_interest" yaml:"borrow_interest"`
}

func (m *PoolInterestDataB) Reset()         { *m = PoolInterestDataB{} }
func (m *PoolInterestDataB) String() string { return proto.CompactTextString(m) }
func (*PoolInterestDataB) ProtoMessage()    {}
func (*PoolInterestDataB) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{24}
}
func (m *PoolInterestDataB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInterestDataB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInterestDataB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInterestDataB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInterestDataB.Merge(m, src)
}
func (m *PoolInterestDataB) XXX_Size() int {
	return m.Size()
}
func (m *PoolInterestDataB) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInterestDataB.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInterestDataB proto.InternalMessageInfo

func (m *PoolInterestDataB) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

type PoolInterestB struct {
	PoolID           uint64              `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	PoolInterestData []PoolInterestDataB `protobuf:"bytes,2,rep,name=pool_interest_data,json=poolInterestData,proto3" json:"pool_interest_data" yaml:"pool_interest_data"`
}

func (m *PoolInterestB) Reset()         { *m = PoolInterestB{} }
func (m *PoolInterestB) String() string { return proto.CompactTextString(m) }
func (*PoolInterestB) ProtoMessage()    {}
func (*PoolInterestB) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{25}
}
func (m *PoolInterestB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInterestB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInterestB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInterestB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInterestB.Merge(m, src)
}
func (m *PoolInterestB) XXX_Size() int {
	return m.Size()
}
func (m *PoolInterestB) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInterestB.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInterestB proto.InternalMessageInfo

func (m *PoolInterestB) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *PoolInterestB) GetPoolInterestData() []PoolInterestDataB {
	if m != nil {
		return m.PoolInterestData
	}
	return nil
}

type AssetRatesPoolPairs struct {
	AssetID              uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	UOptimal             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=u_optimal,json=uOptimal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_optimal" yaml:"u_optimal"`
	Base                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base" yaml:"base"`
	Slope1               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=slope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope1" yaml:"slope1"`
	Slope2               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=slope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope2" yaml:"slope2"`
	EnableStableBorrow   bool                                   `protobuf:"varint,6,opt,name=enable_stable_borrow,json=enableStableBorrow,proto3" json:"enable_stable_borrow,omitempty" yaml:"enable_stable_borrow"`
	StableBase           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=stable_base,json=stableBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_base" yaml:"stable_base"`
	StableSlope1         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=stable_slope1,json=stableSlope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope1" yaml:"stable_slope1"`
	StableSlope2         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=stable_slope2,json=stableSlope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope2" yaml:"stable_slope2"`
	Ltv                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=ltv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ltv" yaml:"ltv"`
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold" yaml:"liquidation_threshold"`
	LiquidationPenalty   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty" yaml:"liquidation_penalty"`
	LiquidationBonus     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=liquidation_bonus,json=liquidationBonus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_bonus" yaml:"liquidation_bonus"`
	ReserveFactor        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	CAssetID             uint64                                 `protobuf:"varint,15,opt,name=c_asset_id,json=cAssetId,proto3" json:"c_asset_id,omitempty" yaml:"c_asset_id"`
	ModuleName           string                                 `protobuf:"bytes,16,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	CPoolName            string                                 `protobuf:"bytes,17,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	AssetData            []*AssetDataPoolMapping                `protobuf:"bytes,18,rep,name=asset_data,json=assetData,proto3" json:"asset_data,omitempty" yaml:"asset_data"`
	MinUsdValueLeft      uint64                                 `protobuf:"varint,19,opt,name=min_usd_value_left,json=minUsdValueLeft,proto3" json:"min_usd_value_left,omitempty" yaml:"min_usd_value_left"`
}

func (m *AssetRatesPoolPairs) Reset()         { *m = AssetRatesPoolPairs{} }
func (m *AssetRatesPoolPairs) String() string { return proto.CompactTextString(m) }
func (*AssetRatesPoolPairs) ProtoMessage()    {}
func (*AssetRatesPoolPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{26}
}
func (m *AssetRatesPoolPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetRatesPoolPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetRatesPoolPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetRatesPoolPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetRatesPoolPairs.Merge(m, src)
}
func (m *AssetRatesPoolPairs) XXX_Size() int {
	return m.Size()
}
func (m *AssetRatesPoolPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetRatesPoolPairs.DiscardUnknown(m)
}

var xxx_messageInfo_AssetRatesPoolPairs proto.InternalMessageInfo

func (m *AssetRatesPoolPairs) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetRatesPoolPairs) GetEnableStableBorrow() bool {
	if m != nil {
		return m.EnableStableBorrow
	}
	return false
}

func (m *AssetRatesPoolPairs) GetCAssetID() uint64 {
	if m != nil {
		return m.CAssetID
	}
	return 0
}

func (m *AssetRatesPoolPairs) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *AssetRatesPoolPairs) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

func (m *AssetRatesPoolPairs) GetAssetData() []*AssetDataPoolMapping {
	if m != nil {
		return m.AssetData
	}
	return nil
}

func (m *AssetRatesPoolPairs) GetMinUsdValueLeft() uint64 {
	if m != nil {
		return m.MinUsdValueLeft
	}
	return 0
}

type PoolDepreciate struct {
	IndividualPoolDepreciate []IndividualPoolDepreciate `protobuf:"bytes,1,rep,name=individual_pool_depreciate,json=individualPoolDepreciate,proto3" json:"individual_pool_depreciate" yaml:"individual_pool_depreciate"`
}

func (m *PoolDepreciate) Reset()         { *m = PoolDepreciate{} }
func (m *PoolDepreciate) String() string { return proto.CompactTextString(m) }
func (*PoolDepreciate) ProtoMessage()    {}
func (*PoolDepreciate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{27}
}
func (m *PoolDepreciate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDepreciate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDepreciate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDepreciate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDepreciate.Merge(m, src)
}
func (m *PoolDepreciate) XXX_Size() int {
	return m.Size()
}
func (m *PoolDepreciate) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDepreciate.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDepreciate proto.InternalMessageInfo

func (m *PoolDepreciate) GetIndividualPoolDepreciate() []IndividualPoolDepreciate {
	if m != nil {
		return m.IndividualPoolDepreciate
	}
	return nil
}

type IndividualPoolDepreciate struct {
	PoolID            uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	IsPoolDepreciated bool   `protobuf:"varint,2,opt,name=is_pool_depreciated,json=isPoolDepreciated,proto3" json:"is_pool_depreciated,omitempty" yaml:"is_pool_depreciated"`
}

func (m *IndividualPoolDepreciate) Reset()         { *m = IndividualPoolDepreciate{} }
func (m *IndividualPoolDepreciate) String() string { return proto.CompactTextString(m) }
func (*IndividualPoolDepreciate) ProtoMessage()    {}
func (*IndividualPoolDepreciate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{28}
}
func (m *IndividualPoolDepreciate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualPoolDepreciate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndividualPoolDepreciate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndividualPoolDepreciate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualPoolDepreciate.Merge(m, src)
}
func (m *IndividualPoolDepreciate) XXX_Size() int {
	return m.Size()
}
func (m *IndividualPoolDepreciate) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualPoolDepreciate.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualPoolDepreciate proto.InternalMessageInfo

func (m *IndividualPoolDepreciate) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *IndividualPoolDepreciate) GetIsPoolDepreciated() bool {
	if m != nil {
		return m.IsPoolDepreciated
	}
	return false
}

func init() {
	proto.RegisterType((*LendAsset)(nil), "comdex.lend.v1beta1.LendAsset")
	proto.RegisterType((*BorrowAsset)(nil), "comdex.lend.v1beta1.BorrowAsset")
	proto.RegisterType((*Pool)(nil), "comdex.lend.v1beta1.Pool")
	proto.RegisterType((*UserAssetLendBorrowMapping)(nil), "comdex.lend.v1beta1.UserAssetLendBorrowMapping")
	proto.RegisterType((*AssetDataPoolMapping)(nil), "comdex.lend.v1beta1.AssetDataPoolMapping")
	proto.RegisterType((*Extended_Pair)(nil), "comdex.lend.v1beta1.Extended_Pair")
	proto.RegisterType((*AssetToPairMapping)(nil), "comdex.lend.v1beta1.AssetToPairMapping")
	proto.RegisterType((*PoolAssetLBMapping)(nil), "comdex.lend.v1beta1.PoolAssetLBMapping")
	proto.RegisterType((*AssetRatesParams)(nil), "comdex.lend.v1beta1.AssetRatesParams")
	proto.RegisterType((*ReserveBuybackAssetData)(nil), "comdex.lend.v1beta1.ReserveBuybackAssetData")
	proto.RegisterType((*AuctionParams)(nil), "comdex.lend.v1beta1.AuctionParams")
	proto.RegisterType((*BorrowInterestTracker)(nil), "comdex.lend.v1beta1.Borrow_interest_tracker")
	proto.RegisterType((*LendRewardsTracker)(nil), "comdex.lend.v1beta1.Lend_rewards_tracker")
	proto.RegisterType((*ModuleBalance)(nil), "comdex.lend.v1beta1.ModuleBalance")
	proto.RegisterType((*ModuleBalanceStats)(nil), "comdex.lend.v1beta1.ModuleBalanceStats")
	proto.RegisterType((*ModBal)(nil), "comdex.lend.v1beta1.ModBal")
	proto.RegisterType((*ReserveBal)(nil), "comdex.lend.v1beta1.ReserveBal")
	proto.RegisterType((*FundModBal)(nil), "comdex.lend.v1beta1.FundModBal")
	proto.RegisterType((*FundReserveBal)(nil), "comdex.lend.v1beta1.FundReserveBal")
	proto.RegisterType((*AllReserveStats)(nil), "comdex.lend.v1beta1.AllReserveStats")
	proto.RegisterType((*AssetToPairSingleMapping)(nil), "comdex.lend.v1beta1.AssetToPairSingleMapping")
	proto.RegisterType((*PoolPairs)(nil), "comdex.lend.v1beta1.PoolPairs")
	proto.RegisterType((*PoolInterestData)(nil), "comdex.lend.v1beta1.PoolInterestData")
	proto.RegisterType((*PoolInterest)(nil), "comdex.lend.v1beta1.PoolInterest")
	proto.RegisterType((*PoolInterestDataB)(nil), "comdex.lend.v1beta1.PoolInterestDataB")
	proto.RegisterType((*PoolInterestB)(nil), "comdex.lend.v1beta1.PoolInterestB")
	proto.RegisterType((*AssetRatesPoolPairs)(nil), "comdex.lend.v1beta1.AssetRatesPoolPairs")
	proto.RegisterType((*PoolDepreciate)(nil), "comdex.lend.v1beta1.PoolDepreciate")
	proto.RegisterType((*IndividualPoolDepreciate)(nil), "comdex.lend.v1beta1.IndividualPoolDepreciate")
}

func init() { proto.RegisterFile("comdex/lend/v1beta1/lend.proto", fileDescriptor_b87bb4bef8334ddd) }

var fileDescriptor_b87bb4bef8334ddd = []byte{
	// 3207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x4d, 0x6c, 0x1c, 0xc7,
	0xb1, 0xd6, 0x90, 0x14, 0xb9, 0x5b, 0x4b, 0x52, 0xdc, 0x5e, 0xd2, 0x5a, 0x53, 0x32, 0x57, 0x6e,
	0xbd, 0x67, 0xd3, 0xef, 0xc1, 0x4b, 0x88, 0xcf, 0xc6, 0xc3, 0x33, 0xec, 0xe7, 0xc7, 0xd5, 0x9f,
	0xd7, 0xa6, 0x64, 0xb9, 0x45, 0xbf, 0x20, 0x89, 0x93, 0xc1, 0xec, 0x4e, 0x93, 0x1a, 0x68, 0x76,
	0x66, 0x34, 0x33, 0x4b, 0x89, 0x49, 0xec, 0x04, 0x36, 0x10, 0x18, 0x49, 0x8c, 0x38, 0xb9, 0xe6,
	0x94, 0x4b, 0x80, 0xdc, 0x82, 0x20, 0xb9, 0x04, 0xc8, 0x21, 0x08, 0x92, 0xf8, 0x90, 0x83, 0xf3,
	0x73, 0x30, 0x7c, 0xd8, 0x04, 0x74, 0x4e, 0x39, 0xea, 0x90, 0x43, 0x4e, 0x41, 0x77, 0xd7, 0xfc,
	0xed, 0x0e, 0x25, 0x0d, 0xd7, 0xb6, 0x12, 0x40, 0x27, 0x6e, 0x57, 0x77, 0x7f, 0x55, 0x5d, 0x55,
	0x5d, 0x5d, 0xd5, 0x3d, 0x84, 0x95, 0xae, 0xdb, 0x33, 0xf9, 0xad, 0x35, 0x9b, 0x3b, 0xe6, 0xda,
	0xee, 0x99, 0x0e, 0x0f, 0x8d, 0x33, 0xb2, 0xd1, 0xf4, 0x7c, 0x37, 0x74, 0x49, 0x4d, 0xf5, 0x37,
	0x25, 0x09, 0xfb, 0x97, 0x17, 0x77, 0xdc, 0x1d, 0x57, 0xf6, 0xaf, 0x89, 0x5f, 0x6a, 0xe8, 0x72,
	0x63, 0xc7, 0x75, 0x77, 0x6c, 0xbe, 0x26, 0x5b, 0x9d, 0xfe, 0xf6, 0x5a, 0x68, 0xf5, 0x78, 0x10,
	0x1a, 0x3d, 0x0f, 0x07, 0xac, 0x74, 0xdd, 0xa0, 0xe7, 0x06, 0x6b, 0x1d, 0x23, 0xe0, 0x31, 0xaf,
	0xae, 0x6b, 0x39, 0xaa, 0x9f, 0xbe, 0x55, 0x82, 0xf2, 0x26, 0x77, 0xcc, 0x8d, 0x20, 0xe0, 0x21,
	0x79, 0x06, 0x40, 0x30, 0xb5, 0x9c, 0x1d, 0xdd, 0x32, 0xeb, 0xda, 0x29, 0x6d, 0x75, 0xaa, 0x75,
	0x62, 0x7f, 0xd0, 0x98, 0x68, 0x9f, 0xbb, 0x3d, 0x68, 0x54, 0xf7, 0x8c, 0x9e, 0xfd, 0x0c, 0x4d,
	0x46, 0x50, 0x56, 0xc6, 0x46, 0xdb, 0x24, 0xff, 0x03, 0x25, 0x43, 0x80, 0x88, 0x99, 0x13, 0x72,
	0xe6, 0xca, 0xfe, 0xa0, 0x31, 0x23, 0x81, 0xe5, 0xf4, 0x63, 0x6a, 0x7a, 0x34, 0x88, 0xb2, 0x19,
	0xf9, 0xb3, 0x6d, 0x92, 0xa7, 0x61, 0xc6, 0x73, 0x5d, 0x5b, 0xcc, 0x9c, 0x94, 0x33, 0x4f, 0xee,
	0x0f, 0x1a, 0xd3, 0x57, 0x5c, 0xd7, 0x96, 0x13, 0xe7, 0xd5, 0x44, 0x1c, 0x42, 0xd9, 0xb4, 0xf8,
	0xd5, 0x36, 0xc9, 0x63, 0x70, 0xd4, 0xbd, 0xe9, 0x70, 0xbf, 0x3e, 0x75, 0x4a, 0x5b, 0x2d, 0xb7,
	0x16, 0x6e, 0x0f, 0x1a, 0xb3, 0x6a, 0xa8, 0x24, 0x53, 0xa6, 0xba, 0xc9, 0x97, 0xa1, 0x6c, 0xf4,
	0xdc, 0xbe, 0x13, 0xea, 0x96, 0x53, 0x3f, 0x7a, 0x4a, 0x5b, 0xad, 0xac, 0x3f, 0xdc, 0x54, 0x7a,
	0x69, 0x0a, 0xbd, 0x44, 0x3a, 0x6e, 0x9e, 0x75, 0x2d, 0xa7, 0x75, 0xf6, 0xbd, 0x41, 0xe3, 0xc8,
	0xed, 0x41, 0x63, 0x01, 0xc5, 0x8d, 0x66, 0xd2, 0xbf, 0x0f, 0x1a, 0x8f, 0xef, 0x58, 0xe1, 0xb5,
	0x7e, 0xa7, 0xd9, 0x75, 0x7b, 0x6b, 0xa8, 0x58, 0xf5, 0xe7, 0xc9, 0xc0, 0xbc, 0xbe, 0x16, 0xee,
	0x79, 0x3c, 0x90, 0x20, 0xac, 0xa4, 0xa6, 0xb5, 0x1d, 0xf2, 0x45, 0x98, 0x8d, 0x14, 0x26, 0x6c,
	0x53, 0x9f, 0x96, 0xfc, 0x97, 0x9b, 0xca, 0x70, 0xcd, 0xc8, 0x70, 0xcd, 0xad, 0xc8, 0x70, 0xad,
	0x06, 0x0a, 0x50, 0xcb, 0xaa, 0x5b, 0xcc, 0xa6, 0xef, 0xfe, 0xa9, 0xa1, 0xb1, 0x0a, 0x92, 0xc4,
	0x14, 0xf2, 0x15, 0xa8, 0x19, 0xbb, 0x86, 0x65, 0x1b, 0x1d, 0x9b, 0xeb, 0xa1, 0xab, 0x77, 0x5c,
	0xdf, 0x77, 0x6f, 0xd6, 0x67, 0xa4, 0x4a, 0x36, 0x05, 0xd4, 0x87, 0x83, 0xc6, 0x63, 0xf7, 0x20,
	0x77, 0xdb, 0x09, 0x6f, 0x0f, 0x1a, 0xcb, 0xb8, 0xea, 0x51, 0x48, 0xca, 0xaa, 0x31, 0x75, 0xcb,
	0x6d, 0x49, 0x1a, 0x39, 0x03, 0xd3, 0x86, 0xe7, 0x09, 0xc3, 0x95, 0xa4, 0xe1, 0x96, 0xf7, 0x07,
	0x8d, 0xa3, 0x1b, 0x9e, 0x27, 0xed, 0x36, 0x87, 0x58, 0x72, 0x00, 0x65, 0x47, 0x0d, 0xcf, 0x6b,
	0x9b, 0xe4, 0x1a, 0xcc, 0xee, 0xd8, 0x6e, 0xc7, 0xb0, 0x75, 0xcb, 0x31, 0xf9, 0xad, 0x7a, 0x59,
	0x4a, 0x7a, 0xbe, 0x80, 0xa4, 0xe7, 0x78, 0x37, 0x51, 0x4f, 0x1a, 0x8b, 0xb2, 0x8a, 0x6a, 0xb6,
	0x45, 0x8b, 0xdc, 0x82, 0x25, 0xdb, 0x08, 0x84, 0xed, 0x42, 0xee, 0x1b, 0xdd, 0xd0, 0x72, 0x1d,
	0x65, 0x03, 0xb8, 0xab, 0x0d, 0x56, 0xd1, 0x06, 0x27, 0xd1, 0x06, 0x79, 0x30, 0xca, 0x18, 0x35,
	0xd1, 0xd7, 0x4e, 0xba, 0xa4, 0x51, 0x36, 0x00, 0xba, 0xd2, 0x5d, 0x1d, 0xa3, 0xc7, 0xeb, 0x15,
	0xb9, 0x42, 0xba, 0x3f, 0x68, 0x94, 0xcf, 0x0a, 0xa7, 0xbe, 0x6c, 0xf4, 0x78, 0xb2, 0x9d, 0x92,
	0x81, 0x94, 0x95, 0x65, 0x43, 0xf4, 0x93, 0xeb, 0x30, 0x17, 0xba, 0xa1, 0x61, 0xeb, 0x3e, 0xbf,
	0x69, 0xf8, 0x66, 0x50, 0x9f, 0x95, 0x28, 0x17, 0x0a, 0x5b, 0x74, 0x51, 0xb1, 0xc9, 0x80, 0x51,
	0x36, 0x2b, 0xdb, 0x0c, 0x9b, 0x7f, 0xab, 0x40, 0x45, 0x59, 0x54, 0xc5, 0x81, 0xff, 0x83, 0x59,
	0x65, 0xf4, 0x4c, 0x24, 0x78, 0x24, 0x8e, 0x04, 0xa8, 0xfb, 0xf4, 0x18, 0xca, 0x2a, 0x71, 0xb3,
	0x6d, 0x0a, 0x0d, 0xa4, 0x22, 0x89, 0x8a, 0x07, 0x52, 0x03, 0x9b, 0x18, 0x30, 0xee, 0x1e, 0x50,
	0xce, 0xc3, 0x82, 0x15, 0xe8, 0x41, 0x28, 0xdd, 0x10, 0xdd, 0x5a, 0x84, 0x87, 0x52, 0xeb, 0xc4,
	0xed, 0x41, 0xe3, 0xb8, 0x9a, 0x3b, 0x3c, 0x82, 0xb2, 0x79, 0x2b, 0xb8, 0x2a, 0x29, 0xe8, 0xa2,
	0x22, 0xb8, 0x18, 0x96, 0x2f, 0xc4, 0x98, 0x4a, 0x05, 0x17, 0xc3, 0xf2, 0x33, 0xc1, 0x45, 0x0d,
	0x11, 0xc1, 0x45, 0xf4, 0x98, 0xf7, 0x37, 0x68, 0xbc, 0x01, 0x80, 0x10, 0x6e, 0x3f, 0xc4, 0x90,
	0x71, 0x07, 0xee, 0xe7, 0x90, 0x7b, 0x35, 0xc3, 0xdd, 0xed, 0x87, 0x85, 0xd8, 0xe3, 0x7a, 0x5f,
	0xee, 0x87, 0xe4, 0x7b, 0x1a, 0x2c, 0x76, 0x7c, 0xcb, 0xdc, 0xe1, 0xa6, 0xae, 0xe2, 0xb5, 0xea,
	0x93, 0x61, 0xe5, 0x8e, 0xa2, 0x5c, 0x46, 0x51, 0x4e, 0xa0, 0x87, 0xe4, 0x80, 0x14, 0x12, 0x8a,
	0x20, 0x82, 0xf4, 0xcb, 0x0d, 0x39, 0x9f, 0x98, 0x30, 0x9f, 0x78, 0x9e, 0xdc, 0xd0, 0xa5, 0xbb,
	0x6e, 0xe8, 0x47, 0x51, 0xae, 0xa5, 0x61, 0xcf, 0x4d, 0x76, 0xf2, 0x5c, 0x4c, 0x94, 0x7b, 0x78,
	0x0f, 0x48, 0xc6, 0xb3, 0x74, 0xdf, 0x08, 0x39, 0x46, 0xab, 0x97, 0x0a, 0x47, 0xab, 0x87, 0x15,
	0xdf, 0x51, 0x44, 0xca, 0x16, 0x82, 0x94, 0xbb, 0x32, 0x23, 0xe4, 0xe4, 0x6b, 0x1a, 0x2c, 0xca,
	0x68, 0xc3, 0x83, 0x50, 0x37, 0xba, 0xdd, 0x7e, 0xaf, 0x6f, 0x1b, 0x21, 0x37, 0x65, 0xe0, 0x2a,
	0xb7, 0x2e, 0x15, 0xe6, 0x8e, 0xd6, 0xc8, 0xc3, 0xa4, 0xac, 0x16, 0x91, 0x37, 0x12, 0xea, 0x48,
	0x94, 0xae, 0x7c, 0x62, 0x51, 0xfa, 0xab, 0xb0, 0xe8, 0xf3, 0x80, 0xfb, 0xbb, 0x5c, 0xcf, 0x70,
	0x9c, 0x1d, 0x6f, 0xad, 0x79, 0x98, 0x94, 0x11, 0x24, 0x5f, 0xbc, 0x97, 0x63, 0x62, 0xee, 0xd3,
	0x3d, 0x26, 0xe6, 0x0f, 0x73, 0x4c, 0x3c, 0x07, 0x73, 0x56, 0xa0, 0xdb, 0xd6, 0x8d, 0xbe, 0x65,
	0x4a, 0x17, 0x39, 0x26, 0x23, 0x64, 0x3d, 0x09, 0xfc, 0x99, 0x6e, 0xca, 0x66, 0xad, 0x60, 0x33,
	0x69, 0xfe, 0x74, 0x02, 0xa6, 0x04, 0xaf, 0x74, 0x0a, 0xa6, 0x15, 0x48, 0xc1, 0xce, 0x43, 0xa5,
	0xe7, 0x9a, 0x7d, 0x9b, 0xab, 0x25, 0x4c, 0xc8, 0x25, 0xfc, 0xdb, 0xfe, 0xa0, 0x01, 0x97, 0x24,
	0x19, 0xd7, 0x40, 0xd4, 0xf4, 0xd4, 0x50, 0xca, 0xa0, 0x17, 0x8f, 0x18, 0x52, 0xc4, 0xe4, 0x61,
	0x14, 0x61, 0x03, 0xa8, 0x20, 0x63, 0x1a, 0xa1, 0x51, 0x9f, 0x3a, 0x35, 0xb9, 0x5a, 0x59, 0x7f,
	0xa2, 0x99, 0x93, 0x49, 0x37, 0x65, 0x28, 0x39, 0x67, 0x84, 0x86, 0xc0, 0xbe, 0x64, 0x78, 0x9e,
	0xe5, 0xec, 0x28, 0x6e, 0x71, 0x4f, 0x2a, 0x96, 0xc6, 0x98, 0x94, 0x95, 0x8d, 0xa8, 0x9f, 0xfe,
	0x4e, 0x83, 0xe5, 0x57, 0x03, 0xee, 0xcb, 0x19, 0xe2, 0x48, 0x53, 0xbb, 0x17, 0xd1, 0x92, 0xcc,
	0x54, 0xbb, 0x73, 0x66, 0xfa, 0x9f, 0x30, 0x23, 0x44, 0x4b, 0x8e, 0x48, 0x92, 0xe8, 0x1a, 0x3b,
	0x28, 0x9b, 0x16, 0xbf, 0xda, 0xa6, 0x18, 0x9c, 0xcd, 0x92, 0xc9, 0x1d, 0x0c, 0x73, 0x06, 0xca,
	0x18, 0x64, 0xe4, 0xb9, 0x37, 0xb9, 0x3a, 0xd5, 0x5a, 0x4c, 0xce, 0xa7, 0xb8, 0x8b, 0xb2, 0x92,
	0xfa, 0xdd, 0x36, 0xe9, 0x9b, 0x13, 0xb0, 0x98, 0xa7, 0x9b, 0x4c, 0x66, 0xaf, 0x15, 0xcb, 0xec,
	0x5f, 0x02, 0xa2, 0xa8, 0xa1, 0x6f, 0x38, 0x81, 0x15, 0xea, 0x62, 0xa7, 0xe2, 0x5a, 0x1f, 0x49,
	0xc2, 0xe2, 0xe8, 0x18, 0xca, 0x16, 0x24, 0x71, 0x4b, 0xd1, 0xb6, 0xf6, 0x3c, 0x4e, 0x3a, 0x00,
	0x41, 0xdf, 0xf3, 0xec, 0x3d, 0xbd, 0x6b, 0x78, 0xe8, 0x25, 0x67, 0x0b, 0xc7, 0x07, 0x34, 0x6c,
	0x82, 0x44, 0x59, 0x59, 0x35, 0xce, 0x1a, 0x1e, 0xfd, 0xd1, 0x24, 0xcc, 0x9d, 0xbf, 0x15, 0x72,
	0xc7, 0xe4, 0xa6, 0x2e, 0x92, 0x04, 0x32, 0x0f, 0x13, 0xd1, 0xba, 0xd9, 0x84, 0x65, 0x92, 0x66,
	0xac, 0x0d, 0x07, 0x17, 0x52, 0x1b, 0x51, 0x81, 0x13, 0xab, 0xc0, 0x11, 0x96, 0x50, 0x54, 0x71,
	0x94, 0x2b, 0xc3, 0xa5, 0x2c, 0x11, 0x77, 0x51, 0xa6, 0x60, 0xc5, 0xf1, 0xfb, 0xac, 0xdc, 0xd4,
	0x32, 0x90, 0xe8, 0xc2, 0x9e, 0x32, 0x71, 0x19, 0xde, 0xd4, 0x49, 0x37, 0x65, 0x15, 0x2b, 0x90,
	0xb1, 0x45, 0x6e, 0xe5, 0xcf, 0x42, 0x35, 0x46, 0xd5, 0x23, 0x8f, 0x39, 0x2a, 0x19, 0x37, 0xf7,
	0x07, 0x8d, 0xf9, 0x0d, 0x64, 0x13, 0x6f, 0xee, 0xfa, 0x90, 0x28, 0x7a, 0xec, 0x4d, 0xf3, 0x46,
	0x7a, 0xac, 0x49, 0x5e, 0x04, 0xd2, 0xb3, 0x1c, 0xbd, 0x1f, 0x98, 0xfa, 0xae, 0x61, 0xf7, 0xb9,
	0x6e, 0xf3, 0x6d, 0x95, 0x9f, 0x64, 0xcc, 0x39, 0x3a, 0x86, 0xb2, 0x63, 0x3d, 0xcb, 0x79, 0x35,
	0x30, 0xff, 0x5f, 0x90, 0x36, 0xf9, 0x76, 0x48, 0x2e, 0x42, 0xd5, 0x0a, 0x74, 0xae, 0xf7, 0x5c,
	0x93, 0xeb, 0xdc, 0x11, 0x47, 0xa0, 0x29, 0xf3, 0x8b, 0x52, 0xeb, 0x64, 0x22, 0xd4, 0xc8, 0x10,
	0x99, 0xe0, 0x9d, 0xbf, 0xe4, 0x9a, 0xfc, 0x3c, 0x12, 0x7e, 0xae, 0x01, 0x91, 0x6b, 0xda, 0x72,
	0x85, 0xc1, 0x22, 0xaf, 0x3d, 0x64, 0x44, 0x1b, 0xb3, 0x8c, 0xc5, 0x4c, 0x73, 0x52, 0xee, 0xb8,
	0x7b, 0xca, 0x34, 0xe9, 0xb7, 0xca, 0x40, 0x84, 0x58, 0x2a, 0x96, 0xb4, 0xee, 0x9f, 0xfc, 0x4d,
	0x28, 0x61, 0xd0, 0x09, 0x70, 0x01, 0x29, 0xcf, 0x8e, 0x7a, 0x28, 0x9b, 0x51, 0xf1, 0x28, 0x20,
	0x4f, 0x01, 0xc4, 0x81, 0x24, 0xc0, 0x20, 0xb3, 0x94, 0xec, 0xb0, 0xa4, 0x8f, 0xb2, 0x72, 0x14,
	0x65, 0x02, 0xe2, 0xc0, 0xbc, 0xaa, 0x45, 0x14, 0x89, 0x2b, 0xdf, 0x2c, 0xb7, 0x2e, 0x16, 0xae,
	0x6c, 0x96, 0xd2, 0x95, 0x4d, 0x84, 0x46, 0x99, 0xaa, 0x9b, 0x5a, 0xd8, 0x26, 0x6f, 0x6a, 0xb0,
	0xa4, 0x86, 0x64, 0x92, 0x2f, 0x6e, 0x4a, 0xbf, 0x2d, 0xab, 0x8c, 0xb5, 0x10, 0xdf, 0x93, 0x69,
	0xbe, 0x43, 0xa0, 0x94, 0xd5, 0x24, 0x3d, 0x5d, 0x82, 0x70, 0x53, 0x84, 0x2e, 0x35, 0x5c, 0xe8,
	0x0e, 0x8b, 0xf3, 0xb3, 0x85, 0x19, 0x57, 0xd3, 0x8c, 0x05, 0x12, 0x65, 0x65, 0xd9, 0x10, 0x27,
	0x10, 0xf9, 0x8e, 0x06, 0xcb, 0xaa, 0x2b, 0x37, 0x77, 0x2c, 0x49, 0xa6, 0x57, 0x0b, 0x33, 0x7d,
	0x34, 0xcd, 0x34, 0x3f, 0x83, 0xac, 0xcb, 0xce, 0x76, 0x4e, 0x1a, 0xf9, 0x1a, 0xba, 0x94, 0xe1,
	0xf9, 0x98, 0x3a, 0x6f, 0x14, 0x0e, 0xd8, 0x69, 0x07, 0x34, 0x3c, 0x1f, 0x1d, 0x70, 0xc3, 0xf3,
	0x85, 0x56, 0xd1, 0xc9, 0x04, 0x3e, 0x8c, 0x77, 0x20, 0x24, 0x48, 0xb1, 0xbb, 0x0a, 0x1e, 0xbb,
	0x50, 0xcd, 0x26, 0xed, 0x82, 0x95, 0xca, 0x86, 0x5f, 0x2c, 0xcc, 0xaa, 0x9e, 0x57, 0x05, 0x48,
	0x8e, 0xc7, 0xd2, 0x45, 0x80, 0xe0, 0x7b, 0x13, 0xaa, 0xfd, 0xd0, 0xb2, 0xad, 0xc0, 0x90, 0x99,
	0xa4, 0x2f, 0xfe, 0x60, 0x4e, 0x7c, 0x68, 0xbe, 0x23, 0x80, 0x94, 0x2d, 0xa4, 0x68, 0x4c, 0x92,
	0xfe, 0x32, 0x0f, 0x0b, 0x32, 0x5a, 0x88, 0x52, 0x24, 0xb8, 0x62, 0xf8, 0x46, 0x2f, 0x18, 0x27,
	0x05, 0xd0, 0xa1, 0xdc, 0xd7, 0x5d, 0x2f, 0xb4, 0x7a, 0x86, 0x8d, 0x09, 0x62, 0xab, 0xf0, 0x02,
	0xf0, 0xb4, 0x8c, 0x81, 0x28, 0x2b, 0xf5, 0x5f, 0x56, 0x3f, 0xc9, 0x2b, 0x30, 0x25, 0xea, 0x50,
	0x4c, 0x08, 0x9e, 0x2b, 0x8c, 0x5d, 0x41, 0xfb, 0x1b, 0x01, 0xa7, 0x4c, 0x42, 0x91, 0xcf, 0xc0,
	0x74, 0x60, 0xbb, 0x1e, 0x3f, 0x83, 0x57, 0x8b, 0xcf, 0x17, 0x06, 0xc5, 0xbb, 0x2f, 0x85, 0x42,
	0x19, 0xc2, 0xc5, 0xc0, 0xeb, 0x18, 0xf4, 0xc6, 0x03, 0x5e, 0x8f, 0x80, 0xd7, 0xc9, 0x2b, 0xb0,
	0xa8, 0x0e, 0xc8, 0xa1, 0x0b, 0x93, 0x69, 0x79, 0xa0, 0x36, 0x92, 0xba, 0x28, 0x6f, 0x14, 0x65,
	0x44, 0x91, 0x33, 0x17, 0x27, 0x1c, 0x2a, 0xd1, 0x28, 0xa1, 0x5e, 0x15, 0xb4, 0xce, 0x15, 0x16,
	0x98, 0x64, 0x7d, 0x5e, 0x6a, 0x19, 0xd0, 0xdb, 0x85, 0xae, 0xaf, 0xc3, 0x1c, 0xf6, 0xa1, 0xca,
	0x4b, 0x85, 0x2f, 0xba, 0x14, 0xa3, 0xc5, 0x0c, 0xa3, 0x48, 0xf3, 0xb3, 0xaa, 0x7d, 0x55, 0xe9,
	0x7f, 0x88, 0xd9, 0x3a, 0x06, 0xa5, 0x8f, 0x85, 0xd9, 0x7a, 0x96, 0xd9, 0x3a, 0xb9, 0x0c, 0x93,
	0x76, 0xb8, 0x8b, 0x71, 0xe9, 0xd9, 0xc2, 0x2c, 0x00, 0xe3, 0x5e, 0xb8, 0x4b, 0x99, 0x00, 0x22,
	0x6f, 0x69, 0xb0, 0x14, 0x95, 0x72, 0xb2, 0xba, 0xbc, 0xe6, 0xf3, 0xe0, 0x9a, 0x6b, 0x9b, 0x18,
	0x8f, 0x2e, 0x17, 0x66, 0x11, 0xd5, 0xad, 0x79, 0xa0, 0x94, 0x2d, 0xa6, 0xe8, 0x5b, 0x11, 0x99,
	0xbc, 0x0e, 0xb5, 0xf4, 0x78, 0x8f, 0x3b, 0x86, 0x1d, 0xee, 0x61, 0x68, 0xda, 0x2c, 0x2c, 0xc2,
	0xf2, 0xa8, 0x08, 0x08, 0x49, 0x19, 0x49, 0x51, 0xaf, 0x28, 0xa2, 0x88, 0x8b, 0xe9, 0xb1, 0x1d,
	0xd7, 0xe9, 0x07, 0xb2, 0x52, 0x1f, 0x23, 0x2e, 0x8e, 0x00, 0x52, 0xb6, 0x90, 0xa2, 0xb5, 0x04,
	0x49, 0xe4, 0x2d, 0xd1, 0x9d, 0xc2, 0xb6, 0xd1, 0x0d, 0x5d, 0x1f, 0x0b, 0xf6, 0x8b, 0x85, 0xb9,
	0x2e, 0x65, 0x6f, 0x28, 0x14, 0x1a, 0x65, 0x73, 0x48, 0xb8, 0x20, 0xdb, 0xe4, 0x79, 0x80, 0xae,
	0x1e, 0x07, 0xdd, 0x63, 0x32, 0xe8, 0x3e, 0xba, 0x3f, 0x68, 0x94, 0xce, 0x26, 0x51, 0x37, 0x2a,
	0x89, 0xf5, 0x24, 0xee, 0x96, 0xba, 0x1b, 0x18, 0x78, 0xff, 0x1b, 0x2a, 0xa2, 0x4c, 0x08, 0x5c,
	0x75, 0xfe, 0x2f, 0xc8, 0x48, 0xf0, 0x50, 0xb2, 0x23, 0x53, 0x9d, 0x94, 0x81, 0x15, 0xb4, 0xb1,
	0x41, 0xae, 0xc2, 0x51, 0xae, 0x0b, 0xcf, 0xad, 0xca, 0x05, 0xfe, 0x6f, 0xe1, 0x05, 0x62, 0xad,
	0x2b, 0x41, 0x28, 0x9b, 0xe2, 0x9b, 0xe1, 0x2e, 0x79, 0x5b, 0x83, 0xe3, 0x5c, 0xcf, 0x77, 0x5f,
	0x22, 0xf9, 0x5c, 0x29, 0xcc, 0x67, 0x25, 0xe6, 0x93, 0xef, 0xc0, 0x4b, 0x7c, 0x33, 0xcf, 0x83,
	0x45, 0x46, 0x98, 0x9d, 0x13, 0x39, 0x71, 0x6d, 0xbc, 0x7d, 0x94, 0x0b, 0x4a, 0x59, 0x2d, 0x2d,
	0x06, 0xfa, 0x31, 0xfd, 0xc9, 0x04, 0x1c, 0x67, 0xca, 0xe0, 0xad, 0xfe, 0x5e, 0xc7, 0xe8, 0x5e,
	0x8f, 0x6b, 0xef, 0x71, 0x4e, 0xdb, 0x94, 0x97, 0xe2, 0x95, 0xed, 0xc4, 0x78, 0xd9, 0x75, 0x16,
	0x2d, 0xf1, 0x52, 0xbc, 0x8b, 0x75, 0x60, 0xbe, 0xa3, 0xc4, 0x8f, 0xf8, 0x4d, 0x8e, 0xc7, 0x2f,
	0x8b, 0x46, 0xd9, 0x1c, 0x12, 0x14, 0x3f, 0xfa, 0xd7, 0x29, 0x98, 0xdb, 0xe8, 0xcb, 0x2b, 0x34,
	0x4c, 0x4d, 0x56, 0xe3, 0x27, 0x28, 0xa5, 0xaa, 0xea, 0x81, 0x2f, 0x4f, 0x5f, 0x80, 0xba, 0xa1,
	0xa6, 0xea, 0x66, 0xdf, 0x57, 0x46, 0x0a, 0x78, 0xd7, 0x75, 0xcc, 0x00, 0x4b, 0xa5, 0xd3, 0xb7,
	0x07, 0x8d, 0x06, 0xce, 0x3d, 0x60, 0x24, 0x65, 0x0f, 0x61, 0xd7, 0x39, 0xec, 0xb9, 0xaa, 0x3a,
	0xc4, 0xd9, 0xde, 0xe9, 0x6f, 0x6f, 0x73, 0x1f, 0x55, 0x70, 0xe8, 0xb3, 0x5d, 0xa1, 0x50, 0x86,
	0x70, 0x22, 0xc1, 0xe9, 0xf6, 0x03, 0x0f, 0x73, 0x91, 0x43, 0x27, 0x38, 0x02, 0x83, 0x32, 0x09,
	0x25, 0x20, 0x83, 0x90, 0x7b, 0x98, 0x85, 0x3c, 0x57, 0xd8, 0x58, 0x95, 0xe8, 0xf8, 0xe3, 0x02,
	0x52, 0xfc, 0x21, 0x97, 0xa1, 0xe6, 0xf9, 0x56, 0x97, 0xeb, 0xdb, 0x7d, 0x07, 0x6f, 0x3f, 0xf7,
	0x3c, 0x8e, 0x97, 0x03, 0x2b, 0x49, 0xa4, 0xcf, 0x19, 0x44, 0x59, 0x55, 0x52, 0x2f, 0x20, 0x51,
	0xde, 0xf6, 0x34, 0xa1, 0x64, 0xf6, 0xc3, 0xee, 0x35, 0x61, 0xd9, 0x99, 0xe1, 0x7b, 0x96, 0xa8,
	0x87, 0xb2, 0x19, 0xf9, 0xb3, 0x6d, 0x8a, 0x0c, 0xa8, 0x63, 0x99, 0xa3, 0x96, 0x55, 0x0f, 0x93,
	0xa9, 0x0c, 0x28, 0x6f, 0x14, 0x65, 0xa4, 0x63, 0x99, 0x43, 0x16, 0xa5, 0x1f, 0x6a, 0x70, 0xbc,
	0x85, 0x55, 0x6c, 0x54, 0xf8, 0x84, 0xbe, 0xd1, 0xbd, 0xce, 0x7d, 0xf2, 0x4c, 0xee, 0x13, 0xd9,
	0xf1, 0x7b, 0x7a, 0x1c, 0x13, 0x01, 0x28, 0xda, 0x57, 0xaa, 0x80, 0x47, 0x74, 0xf4, 0x9c, 0x43,
	0x07, 0xa0, 0x5c, 0x50, 0xca, 0x6a, 0x48, 0x97, 0x97, 0x07, 0x11, 0xf5, 0xb7, 0x1a, 0x2c, 0x8a,
	0xba, 0x31, 0x7a, 0x13, 0x8c, 0x57, 0xf6, 0x54, 0xce, 0x47, 0x00, 0x4b, 0x77, 0x7d, 0xad, 0x7b,
	0x03, 0x6a, 0x11, 0x50, 0xba, 0xea, 0x9c, 0xf8, 0x24, 0x5e, 0x2c, 0x08, 0x72, 0x4a, 0x55, 0x9a,
	0xf4, 0xd7, 0x1a, 0xcc, 0xa9, 0x3b, 0xe7, 0x96, 0x61, 0x1b, 0x4e, 0x97, 0x1f, 0xf6, 0x02, 0xe5,
	0x0d, 0x58, 0xc4, 0x7b, 0xea, 0x8e, 0x02, 0x12, 0xb9, 0x72, 0x28, 0x22, 0xc4, 0xe4, 0x6a, 0x65,
	0xfd, 0xf1, 0xdc, 0x2b, 0xe5, 0x0c, 0xe3, 0xab, 0x62, 0x78, 0xeb, 0x74, 0xf6, 0x21, 0x2c, 0x0f,
	0x92, 0x32, 0xd2, 0x1b, 0x99, 0x48, 0x7f, 0xa3, 0x01, 0x19, 0xc5, 0x1b, 0xe7, 0x4c, 0xd8, 0x85,
	0x19, 0xe4, 0x2b, 0xcd, 0x71, 0xc7, 0xf7, 0xbb, 0x0d, 0x14, 0x7b, 0x3e, 0x2a, 0x8a, 0xe4, 0xbc,
	0x42, 0x4f, 0x76, 0x11, 0x33, 0xfa, 0x3a, 0x4c, 0x5f, 0x72, 0xcd, 0x96, 0x61, 0x93, 0x00, 0x6a,
	0xdb, 0x7d, 0xc7, 0xd4, 0xb3, 0x5a, 0xa8, 0x6b, 0x52, 0xa5, 0x8d, 0x5c, 0x95, 0x5e, 0xe8, 0x3b,
	0xa6, 0x9a, 0xdd, 0xa2, 0x28, 0x13, 0x06, 0x90, 0x1c, 0x24, 0xca, 0xaa, 0xdb, 0x6a, 0x7c, 0xa2,
	0x36, 0xfa, 0xb6, 0x06, 0x10, 0x9d, 0xb0, 0x86, 0x4d, 0xbe, 0x04, 0x8b, 0x72, 0x66, 0xb4, 0x47,
	0xb2, 0x42, 0x9c, 0x3e, 0x50, 0x88, 0x04, 0x62, 0xd8, 0xa6, 0x79, 0x70, 0x94, 0x91, 0xed, 0xcc,
	0x24, 0x49, 0xfc, 0xfa, 0x24, 0x40, 0xb2, 0xa0, 0x71, 0x6c, 0x99, 0x72, 0xea, 0x89, 0x02, 0x4e,
	0x9d, 0x79, 0xcd, 0x9e, 0xfc, 0xf4, 0x3f, 0x81, 0x31, 0xb9, 0xe7, 0xca, 0xab, 0x7d, 0xab, 0xc7,
	0xe5, 0x39, 0x56, 0xe8, 0x13, 0x98, 0xf4, 0x6c, 0xfc, 0x04, 0x06, 0x49, 0xf2, 0x19, 0xed, 0x09,
	0x98, 0x16, 0x3a, 0xe7, 0x3e, 0x1e, 0x67, 0xa9, 0x0c, 0x40, 0xd1, 0x29, 0xc3, 0x01, 0xf4, 0x0f,
	0x13, 0x30, 0x9f, 0x35, 0xea, 0x38, 0xc6, 0xc8, 0x68, 0x75, 0xe2, 0x3e, 0x6b, 0x75, 0xf2, 0x13,
	0xd3, 0xea, 0xd4, 0xdd, 0xb4, 0xfa, 0xc1, 0x34, 0x1c, 0xdb, 0xb0, 0x6d, 0x54, 0xea, 0xd8, 0xf1,
	0xea, 0x07, 0x1a, 0xa4, 0xbe, 0x61, 0xd0, 0xb7, 0x7d, 0xb7, 0x17, 0x6f, 0xb3, 0xd0, 0x95, 0x17,
	0x9f, 0xdc, 0x0f, 0xf0, 0x68, 0xf9, 0x7c, 0xe1, 0xdc, 0xe5, 0x89, 0xe1, 0xaf, 0x24, 0x0e, 0xe2,
	0x40, 0xd9, 0x23, 0xf1, 0x27, 0x11, 0x17, 0x7c, 0xb7, 0x87, 0xeb, 0xdb, 0x72, 0x37, 0x55, 0x3f,
	0xf9, 0xa1, 0x06, 0xa7, 0x0f, 0x82, 0xd9, 0x76, 0x7d, 0x1d, 0x13, 0x45, 0x3c, 0xd5, 0x5f, 0x2b,
	0x2c, 0xe9, 0x7f, 0xdc, 0x59, 0xd2, 0x14, 0x0b, 0xca, 0x56, 0xf2, 0x44, 0xbd, 0xe0, 0xfa, 0x98,
	0x2c, 0x93, 0x6f, 0x6b, 0xb0, 0x1c, 0xbb, 0x9c, 0xc2, 0xb1, 0xad, 0x1b, 0x71, 0xe5, 0x33, 0x35,
	0xde, 0xed, 0xf0, 0xc1, 0xc8, 0x22, 0x5f, 0x46, 0x97, 0x15, 0x82, 0x6d, 0x5a, 0x37, 0xa2, 0x4a,
	0xfe, 0x1d, 0x0d, 0x1e, 0x1e, 0x9a, 0xe7, 0x73, 0xcf, 0xd8, 0xeb, 0x71, 0x27, 0x0c, 0x70, 0x2b,
	0xb3, 0xc2, 0x02, 0x9d, 0xca, 0x15, 0x28, 0x01, 0x1e, 0x92, 0x87, 0xc5, 0x1d, 0xe4, 0xbb, 0x1a,
	0x9c, 0x50, 0xb7, 0xdc, 0x29, 0x85, 0xa7, 0xfc, 0x4d, 0x3d, 0x17, 0x6c, 0x15, 0x96, 0x88, 0xa6,
	0x2f, 0xd0, 0x73, 0xa1, 0x29, 0x3b, 0x2e, 0x7b, 0x37, 0x22, 0x13, 0xc6, 0x2e, 0x46, 0x7f, 0xa9,
	0x41, 0x3d, 0xf5, 0xb8, 0x75, 0xd5, 0x72, 0x76, 0x6c, 0xfe, 0x4f, 0xf2, 0xc4, 0x75, 0xcf, 0x1f,
	0x53, 0x89, 0xf3, 0xaf, 0x2c, 0xc4, 0x12, 0x03, 0x83, 0x07, 0xdf, 0x1a, 0x14, 0xfa, 0xd6, 0xe0,
	0x80, 0x47, 0xd7, 0xa3, 0x87, 0x79, 0x74, 0xa5, 0x3f, 0xd3, 0x60, 0x21, 0x5d, 0x05, 0x8c, 0x7b,
	0xdd, 0x70, 0x1d, 0xe6, 0xd4, 0xc3, 0x60, 0x54, 0xc0, 0x4c, 0x8c, 0xf7, 0x95, 0x62, 0x06, 0x8c,
	0x32, 0xf9, 0xe9, 0x6c, 0x5c, 0xb1, 0xfc, 0x5e, 0x83, 0xd9, 0xb4, 0xf0, 0x87, 0x75, 0xa4, 0x6f,
	0x68, 0x40, 0x32, 0x15, 0x92, 0xb2, 0xa3, 0x4a, 0xf0, 0xff, 0x3d, 0xd7, 0x8e, 0xc3, 0x3a, 0x6b,
	0x3d, 0x2d, 0x56, 0xb8, 0x3f, 0x68, 0x8c, 0x68, 0x33, 0x31, 0xc8, 0x28, 0x0b, 0xca, 0x16, 0xbc,
	0xa1, 0xe1, 0xf4, 0x17, 0x1a, 0x54, 0x47, 0xd0, 0xc7, 0x31, 0xc9, 0x0d, 0x38, 0xd6, 0xc9, 0xd6,
	0xac, 0x68, 0x94, 0x17, 0x0a, 0x1b, 0xe5, 0xa1, 0xec, 0x43, 0x6e, 0x6c, 0x16, 0xfc, 0xfc, 0x2e,
	0x36, 0xcc, 0x1f, 0x35, 0x98, 0x4b, 0xaf, 0xa1, 0x75, 0x58, 0xcb, 0x7c, 0xf3, 0x4e, 0x96, 0x79,
	0xec, 0xde, 0x2c, 0xf3, 0xf1, 0x99, 0xe6, 0x9d, 0x79, 0xa8, 0xa5, 0x5e, 0xc2, 0xe2, 0xf8, 0xf5,
	0xe0, 0x31, 0xec, 0xc1, 0x63, 0xd8, 0x83, 0xc7, 0xb0, 0x07, 0x8f, 0x61, 0x0f, 0x1e, 0xc3, 0xfe,
	0x75, 0x1e, 0xc3, 0x86, 0x92, 0xc7, 0x85, 0x8f, 0x25, 0x79, 0xac, 0x8e, 0x9f, 0x3c, 0x92, 0xfb,
	0x92, 0x3c, 0xd6, 0x0e, 0x95, 0x3c, 0xfe, 0x4a, 0x83, 0x79, 0x21, 0xca, 0x39, 0xee, 0xf9, 0xbc,
	0x6b, 0x19, 0x21, 0x27, 0x3f, 0xd6, 0x60, 0xd9, 0x72, 0x4c, 0x6b, 0xd7, 0x32, 0xfb, 0x86, 0xad,
	0xee, 0x9d, 0xcd, 0xb8, 0x1b, 0xef, 0xd6, 0x9e, 0xcc, 0x5d, 0x5d, 0x3b, 0x9e, 0x96, 0xc5, 0x54,
	0x1f, 0x99, 0xef, 0x0f, 0x1a, 0xf5, 0x83, 0x46, 0x24, 0x65, 0xe7, 0xc1, 0xac, 0x29, 0xab, 0x5b,
	0x07, 0x4c, 0xa7, 0xdf, 0xd7, 0xe0, 0x40, 0xec, 0xc3, 0x66, 0x2e, 0x97, 0xa1, 0x66, 0x05, 0xc3,
	0x42, 0xa8, 0xf2, 0xaa, 0x94, 0x7e, 0xfd, 0xc8, 0x19, 0x44, 0x59, 0xd5, 0x0a, 0xb2, 0x52, 0x98,
	0xad, 0x17, 0xde, 0xdb, 0x5f, 0xd1, 0xde, 0xdf, 0x5f, 0xd1, 0xfe, 0xbc, 0xbf, 0xa2, 0xbd, 0xfb,
	0xd1, 0xca, 0x91, 0xf7, 0x3f, 0x5a, 0x39, 0xf2, 0xc1, 0x47, 0x2b, 0x47, 0x3e, 0xd7, 0xcc, 0x6c,
	0x2d, 0xa1, 0xd7, 0x27, 0xdd, 0xed, 0x6d, 0xab, 0x6b, 0x19, 0x36, 0xb6, 0xd7, 0xf0, 0x5f, 0x0b,
	0xe5, 0x36, 0xeb, 0x4c, 0xcb, 0x9b, 0xa0, 0xff, 0xfa, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96,
	0x0b, 0xcb, 0xd4, 0x76, 0x38, 0x00, 0x00,
}

func (m *LendAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalRewards.Size()
		i -= size
		if _, err := m.TotalRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x5a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastInteractionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLend(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	{
		size := m.GlobalIndex.Size()
		i -= size
		if _, err := m.GlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.AppID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AppID))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.AvailableToBorrow.Size()
		i -= size
		if _, err := m.AvailableToBorrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LendingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLend(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLiquidated {
		i--
		if m.IsLiquidated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x72
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastInteractionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintLend(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x6a
	{
		size := m.ReserveGlobalIndex.Size()
		i -= size
		if _, err := m.ReserveGlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.GlobalIndex.Size()
		i -= size
		if _, err := m.GlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.InterestAccumulated.Size()
		i -= size
		if _, err := m.InterestAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableBorrowRate.Size()
		i -= size
		if _, err := m.StableBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BorrowingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintLend(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.BridgedAssetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.AmountOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.PairID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x20
	}
	if m.IsStableBorrow {
		i--
		if m.IsStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LendingID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendingID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetData) > 0 {
		for iNdEx := len(m.AssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAssetLendBorrowMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAssetLendBorrowMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAssetLendBorrowMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowId) > 0 {
		dAtA10 := make([]byte, len(m.BorrowId)*10)
		var j9 int
		for _, num := range m.BorrowId {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintLend(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.LendId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetDataPoolMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetDataPoolMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetDataPoolMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SupplyCap.Size()
		i -= size
		if _, err := m.SupplyCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetTransitType != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetTransitType))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Extended_Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extended_Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extended_Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEModeEnabled {
		i--
		if m.IsEModeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MinUsdValueLeft != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.MinUsdValueLeft))
		i--
		dAtA[i] = 0x30
	}
	if m.AssetOutPoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetOutPoolID))
		i--
		dAtA[i] = 0x28
	}
	if m.IsInterPool {
		i--
		if m.IsInterPool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AssetOut != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetOut))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetIn != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetIn))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToPairMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToPairMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToPairMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairID) > 0 {
		dAtA12 := make([]byte, len(m.PairID)*10)
		var j11 int
		for _, num := range m.PairID {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintLend(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolAssetLBMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAssetLBMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAssetLBMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UtilisationRatio.Size()
		i -= size
		if _, err := m.UtilisationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.StableBorrowApr.Size()
		i -= size
		if _, err := m.StableBorrowApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.BorrowApr.Size()
		i -= size
		if _, err := m.BorrowApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.LendApr.Size()
		i -= size
		if _, err := m.LendApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalInterestAccumulated.Size()
		i -= size
		if _, err := m.TotalInterestAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TotalLend.Size()
		i -= size
		if _, err := m.TotalLend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TotalStableBorrowed.Size()
		i -= size
		if _, err := m.TotalStableBorrowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalBorrowed.Size()
		i -= size
		if _, err := m.TotalBorrowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BorrowIds) > 0 {
		dAtA14 := make([]byte, len(m.BorrowIds)*10)
		var j13 int
		for _, num := range m.BorrowIds {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintLend(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LendIds) > 0 {
		dAtA16 := make([]byte, len(m.LendIds)*10)
		var j15 int
		for _, num := range m.LendIds {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintLend(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetRatesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetRatesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetRatesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ELiquidationPenalty.Size()
		i -= size
		if _, err := m.ELiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.ELiquidationThreshold.Size()
		i -= size
		if _, err := m.ELiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.ELtv.Size()
		i -= size
		if _, err := m.ELtv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.IsIsolated {
		i--
		if m.IsIsolated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CAssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.CAssetID))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.LiquidationBonus.Size()
		i -= size
		if _, err := m.LiquidationBonus.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Ltv.Size()
		i -= size
		if _, err := m.Ltv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableSlope2.Size()
		i -= size
		if _, err := m.StableSlope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.StableSlope1.Size()
		i -= size
		if _, err := m.StableSlope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.StableBase.Size()
		i -= size
		if _, err := m.StableBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.EnableStableBorrow {
		i--
		if m.EnableStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Slope2.Size()
		i -= size
		if _, err := m.Slope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Slope1.Size()
		i -= size
		if _, err := m.Slope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Base.Size()
		i -= size
		if _, err := m.Base.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.UOptimal.Size()
		i -= size
		if _, err := m.UOptimal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveBuybackAssetData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveBuybackAssetData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveBuybackAssetData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BuybackAmount.Size()
		i -= size
		if _, err := m.BuybackAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ReserveAmount.Size()
		i -= size
		if _, err := m.ReserveAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuctionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidDurationSeconds != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.BidDurationSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.DutchId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.DutchId))
		i--
		dAtA[i] = 0x38
	}
	if m.PriceFunctionType != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PriceFunctionType))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Step.Size()
		i -= size
		if _, err := m.Step.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Cusp.Size()
		i -= size
		if _, err := m.Cusp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Buffer.Size()
		i -= size
		if _, err := m.Buffer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AuctionDurationSeconds != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AuctionDurationSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowInterestTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowInterestTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowInterestTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReservePoolInterest.Size()
		i -= size
		if _, err := m.ReservePoolInterest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BorrowingId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.BorrowingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LendRewardsTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendRewardsTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendRewardsTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardsAccumulated.Size()
		i -= size
		if _, err := m.RewardsAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.LendingId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleBalanceStats) > 0 {
		for iNdEx := len(m.ModuleBalanceStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleBalanceStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleBalanceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModBal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModBal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModBal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FundModuleBalance) > 0 {
		for iNdEx := len(m.FundModuleBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FundModuleBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReserveBal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveBal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveBal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FundReserveBalance) > 0 {
		for iNdEx := len(m.FundReserveBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FundReserveBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FundModBal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundModBal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundModBal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funder) > 0 {
		i -= len(m.Funder)
		copy(dAtA[i:], m.Funder)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Funder)))
		i--
		dAtA[i] = 0x2a
	}
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DepositTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositTime):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintLend(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FundReserveBal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundReserveBal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundReserveBal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funder) > 0 {
		i -= len(m.Funder)
		copy(dAtA[i:], m.Funder)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Funder)))
		i--
		dAtA[i] = 0x22
	}
	n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DepositTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositTime):])
	if err20 != nil {
		return 0, err20
	}
	i -= n20
	i = encodeVarintLend(dAtA, i, uint64(n20))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllReserveStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllReserveStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllReserveStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalAmountOutToLenders.Size()
		i -= size
		if _, err := m.TotalAmountOutToLenders.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountInFromRepayments.Size()
		i -= size
		if _, err := m.AmountInFromRepayments.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.AmountInFromLiqPenalty.Size()
		i -= size
		if _, err := m.AmountInFromLiqPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AmountOutFromReserveForAuction.Size()
		i -= size
		if _, err := m.AmountOutFromReserveForAuction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AmountOutFromReserveToLenders.Size()
		i -= size
		if _, err := m.AmountOutFromReserveToLenders.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToPairSingleMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToPairSingleMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToPairSingleMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PairID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinUsdValueLeft != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.MinUsdValueLeft))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AssetData) > 0 {
		for iNdEx := len(m.AssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolInterestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInterestData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInterestData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LendInterest.Size()
		i -= size
		if _, err := m.LendInterest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolInterest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInterest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInterest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolInterestData) > 0 {
		for iNdEx := len(m.PoolInterestData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolInterestData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolInterestDataB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInterestDataB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInterestDataB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BorrowInterest.Size()
		i -= size
		if _, err := m.BorrowInterest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolInterestB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInterestB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInterestB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolInterestData) > 0 {
		for iNdEx := len(m.PoolInterestData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolInterestData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetRatesPoolPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetRatesPoolPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetRatesPoolPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinUsdValueLeft != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.MinUsdValueLeft))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.AssetData) > 0 {
		for iNdEx := len(m.AssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CAssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.CAssetID))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.LiquidationBonus.Size()
		i -= size
		if _, err := m.LiquidationBonus.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Ltv.Size()
		i -= size
		if _, err := m.Ltv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableSlope2.Size()
		i -= size
		if _, err := m.StableSlope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.StableSlope1.Size()
		i -= size
		if _, err := m.StableSlope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.StableBase.Size()
		i -= size
		if _, err := m.StableBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.EnableStableBorrow {
		i--
		if m.EnableStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Slope2.Size()
		i -= size
		if _, err := m.Slope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Slope1.Size()
		i -= size
		if _, err := m.Slope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Base.Size()
		i -= size
		if _, err := m.Base.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.UOptimal.Size()
		i -= size
		if _, err := m.UOptimal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolDepreciate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDepreciate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDepreciate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndividualPoolDepreciate) > 0 {
		for iNdEx := len(m.IndividualPoolDepreciate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndividualPoolDepreciate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndividualPoolDepreciate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualPoolDepreciate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndividualPoolDepreciate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPoolDepreciated {
		i--
		if m.IsPoolDepreciated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLend(dAtA []byte, offset int, v uint64) int {
	offset -= sovLend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LendAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.AvailableToBorrow.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.AppID != 0 {
		n += 1 + sovLend(uint64(m.AppID))
	}
	l = m.GlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *BorrowAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.LendingID != 0 {
		n += 1 + sovLend(uint64(m.LendingID))
	}
	if m.IsStableBorrow {
		n += 2
	}
	if m.PairID != 0 {
		n += 1 + sovLend(uint64(m.PairID))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.BridgedAssetAmount.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.StableBorrowRate.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.InterestAccumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.GlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.ReserveGlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.IsLiquidated {
		n += 2
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if len(m.AssetData) > 0 {
		for _, e := range m.AssetData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *UserAssetLendBorrowMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.LendId != 0 {
		n += 1 + sovLend(uint64(m.LendId))
	}
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if len(m.BorrowId) > 0 {
		l = 0
		for _, e := range m.BorrowId {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *AssetDataPoolMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.AssetTransitType != 0 {
		n += 1 + sovLend(uint64(m.AssetTransitType))
	}
	l = m.SupplyCap.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *Extended_Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLend(uint64(m.Id))
	}
	if m.AssetIn != 0 {
		n += 1 + sovLend(uint64(m.AssetIn))
	}
	if m.AssetOut != 0 {
		n += 1 + sovLend(uint64(m.AssetOut))
	}
	if m.IsInterPool {
		n += 2
	}
	if m.AssetOutPoolID != 0 {
		n += 1 + sovLend(uint64(m.AssetOutPoolID))
	}
	if m.MinUsdValueLeft != 0 {
		n += 1 + sovLend(uint64(m.MinUsdValueLeft))
	}
	if m.IsEModeEnabled {
		n += 2
	}
	return n
}

func (m *AssetToPairMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if len(m.PairID) > 0 {
		l = 0
		for _, e := range m.PairID {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *PoolAssetLBMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if len(m.LendIds) > 0 {
		l = 0
		for _, e := range m.LendIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	if len(m.BorrowIds) > 0 {
		l = 0
		for _, e := range m.BorrowIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	l = m.TotalBorrowed.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalStableBorrowed.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalLend.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalInterestAccumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LendApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.BorrowApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableBorrowApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.UtilisationRatio.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *AssetRatesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.UOptimal.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Base.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope2.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.EnableStableBorrow {
		n += 2
	}
	l = m.StableBase.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope2.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Ltv.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationBonus.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.CAssetID != 0 {
		n += 1 + sovLend(uint64(m.CAssetID))
	}
	if m.IsIsolated {
		n += 3
	}
	l = m.ELtv.Size()
	n += 2 + l + sovLend(uint64(l))
	l = m.ELiquidationThreshold.Size()
	n += 2 + l + sovLend(uint64(l))
	l = m.ELiquidationPenalty.Size()
	n += 2 + l + sovLend(uint64(l))
	return n
}

func (m *ReserveBuybackAssetData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.ReserveAmount.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.BuybackAmount.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *AuctionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLend(uint64(m.AppId))
	}
	if m.AuctionDurationSeconds != 0 {
		n += 1 + sovLend(uint64(m.AuctionDurationSeconds))
	}
	l = m.Buffer.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Cusp.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Step.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.PriceFunctionType != 0 {
		n += 1 + sovLend(uint64(m.PriceFunctionType))
	}
	if m.DutchId != 0 {
		n += 1 + sovLend(uint64(m.DutchId))
	}
	if m.BidDurationSeconds != 0 {
		n += 1 + sovLend(uint64(m.BidDurationSeconds))
	}
	return n
}

func (m *BorrowInterestTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowingId != 0 {
		n += 1 + sovLend(uint64(m.BorrowingId))
	}
	l = m.ReservePoolInterest.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *LendRewardsTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LendingId != 0 {
		n += 1 + sovLend(uint64(m.LendingId))
	}
	l = m.RewardsAccumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *ModuleBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if len(m.ModuleBalanceStats) > 0 {
		for _, e := range m.ModuleBalanceStats {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *ModuleBalanceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.Balance.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *ModBal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FundModuleBalance) > 0 {
		for _, e := range m.FundModuleBalance {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *ReserveBal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FundReserveBalance) > 0 {
		for _, e := range m.FundReserveBalance {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *FundModBal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.Funder)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	return n
}

func (m *FundReserveBal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DepositTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.Funder)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	return n
}

func (m *AllReserveStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.AmountOutFromReserveToLenders.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountOutFromReserveForAuction.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountInFromLiqPenalty.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountInFromRepayments.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalAmountOutToLenders.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *AssetToPairSingleMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.PairID != 0 {
		n += 1 + sovLend(uint64(m.PairID))
	}
	return n
}

func (m *PoolPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if len(m.AssetData) > 0 {
		for _, e := range m.AssetData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	if m.MinUsdValueLeft != 0 {
		n += 1 + sovLend(uint64(m.MinUsdValueLeft))
	}
	return n
}

func (m *PoolInterestData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.LendInterest.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *PoolInterest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if len(m.PoolInterestData) > 0 {
		for _, e := range m.PoolInterestData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *PoolInterestDataB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.BorrowInterest.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *PoolInterestB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if len(m.PoolInterestData) > 0 {
		for _, e := range m.PoolInterestData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *AssetRatesPoolPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	l = m.UOptimal.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Base.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope2.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.EnableStableBorrow {
		n += 2
	}
	l = m.StableBase.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope2.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Ltv.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationBonus.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.CAssetID != 0 {
		n += 1 + sovLend(uint64(m.CAssetID))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 2 + l + sovLend(uint64(l))
	}
	l = len(m.CPoolName)
	if l > 0 {
		n += 2 + l + sovLend(uint64(l))
	}
	if len(m.AssetData) > 0 {
		for _, e := range m.AssetData {
			l = e.Size()
			n += 2 + l + sovLend(uint64(l))
		}
	}
	if m.MinUsdValueLeft != 0 {
		n += 2 + sovLend(uint64(m.MinUsdValueLeft))
	}
	return n
}

func (m *PoolDepreciate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndividualPoolDepreciate) > 0 {
		for _, e := range m.IndividualPoolDepreciate {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *IndividualPoolDepreciate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	if m.IsPoolDepreciated {
		n += 2
	}
	return n
}

func sovLend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLend(x uint64) (n int) {
	return sovLend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LendAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LendingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableToBorrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInteractionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastInteractionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingID", wireType)
			}
			m.LendingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStableBorrow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgedAssetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgedAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BorrowingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveGlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveGlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInteractionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastInteractionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiquidated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiquidated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData, &AssetDataPoolMapping{})
			if err := m.AssetData[len(m.AssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAssetLendBorrowMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAssetLendBorrowMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAssetLendBorrowMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendId", wireType)
			}
			m.LendId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowId = append(m.BorrowId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowId) == 0 {
					m.BorrowId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowId = append(m.BorrowId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetDataPoolMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetDataPoolMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetDataPoolMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTransitType", wireType)
			}
			m.AssetTransitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetTransitType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SupplyCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extended_Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extended_Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extended_Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIn", wireType)
			}
			m.AssetIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			m.AssetOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInterPool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInterPool = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutPoolID", wireType)
			}
			m.AssetOutPoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutPoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUsdValueLeft", wireType)
			}
			m.MinUsdValueLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUsdValueLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEModeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEModeEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToPairMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToPairMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToPairMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PairID = append(m.PairID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PairID) == 0 {
					m.PairID = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PairID = append(m.PairID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAssetLBMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAssetLBMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAssetLBMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LendIds = append(m.LendIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LendIds) == 0 {
					m.LendIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LendIds = append(m.LendIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LendIds", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowIds = append(m.BorrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowIds) == 0 {
					m.BorrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowIds = append(m.BorrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowIds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBorrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStableBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStableBorrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInterestAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalInterestAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LendApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilisationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UtilisationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetRatesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetRatesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetRatesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UOptimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UOptimal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStableBorrow = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ltv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationBonus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationBonus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetID", wireType)
			}
			m.CAssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CAssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolated = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ELtv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ELtv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ELiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ELiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ELiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ELiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveBuybackAssetData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveBuybackAssetData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveBuybackAssetData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuybackAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuybackAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDurationSeconds", wireType)
			}
			m.AuctionDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cusp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cusp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFunctionType", wireType)
			}
			m.PriceFunctionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceFunctionType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutchId", wireType)
			}
			m.DutchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DutchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidDurationSeconds", wireType)
			}
			m.BidDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidDurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowInterestTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Borrow_interest_tracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Borrow_interest_tracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingId", wireType)
			}
			m.BorrowingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservePoolInterest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservePoolInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendRewardsTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lend_rewards_tracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lend_rewards_tracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingId", wireType)
			}
			m.LendingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBalanceStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleBalanceStats = append(m.ModuleBalanceStats, ModuleBalanceStats{})
			if err := m.ModuleBalanceStats[len(m.ModuleBalanceStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalanceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModBal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModBal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModBal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundModuleBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundModuleBalance = append(m.FundModuleBalance, FundModBal{})
			if err := m.FundModuleBalance[len(m.FundModuleBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveBal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveBal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveBal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundReserveBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundReserveBalance = append(m.FundReserveBalance, FundReserveBal{})
			if err := m.FundReserveBalance[len(m.FundReserveBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundModBal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundModBal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundModBal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DepositTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundReserveBal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundReserveBal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundReserveBal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DepositTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllReserveStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllReserveStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllReserveStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOutFromReserveToLenders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOutFromReserveToLenders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOutFromReserveForAuction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOutFromReserveForAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInFromLiqPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountInFromLiqPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInFromRepayments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountInFromRepayments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmountOutToLenders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmountOutToLenders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToPairSingleMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToPairSingleMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToPairSingleMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData, &AssetDataPoolMapping{})
			if err := m.AssetData[len(m.AssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUsdValueLeft", wireType)
			}
			m.MinUsdValueLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUsdValueLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInterestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInterestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInterestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendInterest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LendInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInterest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInterest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInterest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInterestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolInterestData = append(m.PoolInterestData, PoolInterestData{})
			if err := m.PoolInterestData[len(m.PoolInterestData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInterestDataB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInterestDataB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInterestDataB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInterestB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInterestB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInterestB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInterestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolInterestData = append(m.PoolInterestData, PoolInterestDataB{})
			if err := m.PoolInterestData[len(m.PoolInterestData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetRatesPoolPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetRatesPoolPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetRatesPoolPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UOptimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UOptimal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStableBorrow = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ltv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationBonus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationBonus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetID", wireType)
			}
			m.CAssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CAssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData, &AssetDataPoolMapping{})
			if err := m.AssetData[len(m.AssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUsdValueLeft", wireType)
			}
			m.MinUsdValueLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUsdValueLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolDepreciate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDepreciate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDepreciate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndividualPoolDepreciate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndividualPoolDepreciate = append(m.IndividualPoolDepreciate, IndividualPoolDepreciate{})
			if err := m.IndividualPoolDepreciate[len(m.IndividualPoolDepreciate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndividualPoolDepreciate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualPoolDepreciate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualPoolDepreciate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPoolDepreciated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPoolDepreciated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLend = fmt.Errorf("proto: unexpected end of group")
)
