// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/lend/v1beta1/lend.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LendAsset struct {
	ID                 uint64                                  `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	AssetId            uint64                                  `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolId             uint64                                  `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Owner              string                                  `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	LendingTime        time.Time                               `protobuf:"bytes,6,opt,name=lending_time,json=lendingTime,proto3,stdtime" json:"lending_time" yaml:"lending_time"`
	UpdatedAmountIn    github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,7,opt,name=updated_amount_in,json=updatedAmountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"updated_amount_in" yaml:"updated_amount_in"`
	AvailableToBorrow  github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,8,opt,name=available_to_borrow,json=availableToBorrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_to_borrow" yaml:"available_to_borrow"`
	Reward_Accumulated github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,9,opt,name=reward_Accumulated,json=rewardAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_Accumulated" yaml:"reward_accumulated"`
}

func (m *LendAsset) Reset()         { *m = LendAsset{} }
func (m *LendAsset) String() string { return proto.CompactTextString(m) }
func (*LendAsset) ProtoMessage()    {}
func (*LendAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{0}
}
func (m *LendAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendAsset.Merge(m, src)
}
func (m *LendAsset) XXX_Size() int {
	return m.Size()
}
func (m *LendAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_LendAsset.DiscardUnknown(m)
}

var xxx_messageInfo_LendAsset proto.InternalMessageInfo

func (m *LendAsset) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LendAsset) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *LendAsset) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LendAsset) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LendAsset) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LendAsset) GetLendingTime() time.Time {
	if m != nil {
		return m.LendingTime
	}
	return time.Time{}
}

type BorrowAsset struct {
	ID                   uint64                                  `protobuf:"varint,1,opt,name=borrowing_id,json=borrowingId,proto3" json:"borrowing_id,omitempty" yaml:"borrowing_id"`
	LendingID            uint64                                  `protobuf:"varint,2,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	IsStableBorrow       bool                                    `protobuf:"varint,3,opt,name=is_stable_borrow,json=isStableBorrow,proto3" json:"is_stable_borrow,omitempty" yaml:"is_stable_borrow"`
	PairID               uint64                                  `protobuf:"varint,4,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	AmountIn             github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	AmountOut            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_out" yaml:"amount_out"`
	BridgedAssetID       uint64                                  `protobuf:"varint,7,opt,name=bridged_asset_id,json=bridgedAssetId,proto3" json:"bridged_asset_id,omitempty" yaml:"bridged_asset_id"`
	BorrowingTime        time.Time                               `protobuf:"bytes,8,opt,name=borrowing_time,json=borrowingTime,proto3,stdtime" json:"borrowing_time" yaml:"borrowing_time"`
	StableBorrowRate     github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,9,opt,name=stable_borrow_rate,json=stableBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_rate" yaml:"stable_borrow_rate"`
	UpdatedAmountOut     github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,10,opt,name=updated_amount_out,json=updatedAmountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"updated_amount_out" yaml:"updated_amount_out"`
	Interest_Accumulated github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,11,opt,name=interest_Accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"interest_Accumulated" yaml:"interest_accumulated"`
}

func (m *BorrowAsset) Reset()         { *m = BorrowAsset{} }
func (m *BorrowAsset) String() string { return proto.CompactTextString(m) }
func (*BorrowAsset) ProtoMessage()    {}
func (*BorrowAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{1}
}
func (m *BorrowAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowAsset.Merge(m, src)
}
func (m *BorrowAsset) XXX_Size() int {
	return m.Size()
}
func (m *BorrowAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowAsset.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowAsset proto.InternalMessageInfo

func (m *BorrowAsset) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BorrowAsset) GetLendingID() uint64 {
	if m != nil {
		return m.LendingID
	}
	return 0
}

func (m *BorrowAsset) GetIsStableBorrow() bool {
	if m != nil {
		return m.IsStableBorrow
	}
	return false
}

func (m *BorrowAsset) GetPairID() uint64 {
	if m != nil {
		return m.PairID
	}
	return 0
}

func (m *BorrowAsset) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAsset) GetAmountOut() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountOut
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAsset) GetBridgedAssetID() uint64 {
	if m != nil {
		return m.BridgedAssetID
	}
	return 0
}

func (m *BorrowAsset) GetBorrowingTime() time.Time {
	if m != nil {
		return m.BorrowingTime
	}
	return time.Time{}
}

type Pool struct {
	PoolId               uint64                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleName           string                 `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	MainAssetId          uint64                 `protobuf:"varint,3,opt,name=main_asset_id,json=mainAssetId,proto3" json:"main_asset_id,omitempty" yaml:"main_asset_id"`
	FirstBridgedAssetId  uint64                 `protobuf:"varint,4,opt,name=first_bridged_asset_id,json=firstBridgedAssetId,proto3" json:"first_bridged_asset_id,omitempty" yaml:"first_bridged_asset_id"`
	SecondBridgedAssetId uint64                 `protobuf:"varint,5,opt,name=second_bridged_asset_id,json=secondBridgedAssetId,proto3" json:"second_bridged_asset_id,omitempty" yaml:"second_bridged_asset_id"`
	AssetData            []AssetDataPoolMapping `protobuf:"bytes,6,rep,name=asset_data,json=assetData,proto3" json:"asset_data" yaml:"asset_data"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{2}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Pool) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *Pool) GetMainAssetId() uint64 {
	if m != nil {
		return m.MainAssetId
	}
	return 0
}

func (m *Pool) GetFirstBridgedAssetId() uint64 {
	if m != nil {
		return m.FirstBridgedAssetId
	}
	return 0
}

func (m *Pool) GetSecondBridgedAssetId() uint64 {
	if m != nil {
		return m.SecondBridgedAssetId
	}
	return 0
}

func (m *Pool) GetAssetData() []AssetDataPoolMapping {
	if m != nil {
		return m.AssetData
	}
	return nil
}

type AssetDataPoolMapping struct {
	AssetId   uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	IsBridged bool   `protobuf:"varint,2,opt,name=is_bridged,json=isBridged,proto3" json:"is_bridged,omitempty" yaml:"is_bridged"`
}

func (m *AssetDataPoolMapping) Reset()         { *m = AssetDataPoolMapping{} }
func (m *AssetDataPoolMapping) String() string { return proto.CompactTextString(m) }
func (*AssetDataPoolMapping) ProtoMessage()    {}
func (*AssetDataPoolMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{3}
}
func (m *AssetDataPoolMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetDataPoolMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetDataPoolMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetDataPoolMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetDataPoolMapping.Merge(m, src)
}
func (m *AssetDataPoolMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetDataPoolMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetDataPoolMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetDataPoolMapping proto.InternalMessageInfo

func (m *AssetDataPoolMapping) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AssetDataPoolMapping) GetIsBridged() bool {
	if m != nil {
		return m.IsBridged
	}
	return false
}

type Extended_Pair struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetIn        uint64 `protobuf:"varint,2,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty" yaml:"asset_in"`
	AssetOut       uint64 `protobuf:"varint,3,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty" yaml:"asset_out"`
	IsInterPool    bool   `protobuf:"varint,4,opt,name=is_inter_pool,json=isInterPool,proto3" json:"is_inter_pool,omitempty" yaml:"is_inter_pool"`
	AssetOutPoolId uint64 `protobuf:"varint,5,opt,name=asset_out_pool_id,json=assetOutPoolId,proto3" json:"asset_out_pool_id,omitempty" yaml:"asset_out_pool_id"`
}

func (m *Extended_Pair) Reset()         { *m = Extended_Pair{} }
func (m *Extended_Pair) String() string { return proto.CompactTextString(m) }
func (*Extended_Pair) ProtoMessage()    {}
func (*Extended_Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{4}
}
func (m *Extended_Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extended_Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extended_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extended_Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extended_Pair.Merge(m, src)
}
func (m *Extended_Pair) XXX_Size() int {
	return m.Size()
}
func (m *Extended_Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Extended_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Extended_Pair proto.InternalMessageInfo

func (m *Extended_Pair) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Extended_Pair) GetAssetIn() uint64 {
	if m != nil {
		return m.AssetIn
	}
	return 0
}

func (m *Extended_Pair) GetAssetOut() uint64 {
	if m != nil {
		return m.AssetOut
	}
	return 0
}

func (m *Extended_Pair) GetIsInterPool() bool {
	if m != nil {
		return m.IsInterPool
	}
	return false
}

func (m *Extended_Pair) GetAssetOutPoolId() uint64 {
	if m != nil {
		return m.AssetOutPoolId
	}
	return 0
}

type AssetToPairMapping struct {
	AssetId uint64   `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolId  uint64   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	PairId  []uint64 `protobuf:"varint,3,rep,packed,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
}

func (m *AssetToPairMapping) Reset()         { *m = AssetToPairMapping{} }
func (m *AssetToPairMapping) String() string { return proto.CompactTextString(m) }
func (*AssetToPairMapping) ProtoMessage()    {}
func (*AssetToPairMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{5}
}
func (m *AssetToPairMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToPairMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToPairMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToPairMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToPairMapping.Merge(m, src)
}
func (m *AssetToPairMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetToPairMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToPairMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToPairMapping proto.InternalMessageInfo

func (m *AssetToPairMapping) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AssetToPairMapping) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *AssetToPairMapping) GetPairId() []uint64 {
	if m != nil {
		return m.PairId
	}
	return nil
}

type UserLendIdMapping struct {
	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	LendIds []uint64 `protobuf:"varint,2,rep,packed,name=lend_ids,json=lendIds,proto3" json:"lend_ids,omitempty" yaml:"lend_ids"`
}

func (m *UserLendIdMapping) Reset()         { *m = UserLendIdMapping{} }
func (m *UserLendIdMapping) String() string { return proto.CompactTextString(m) }
func (*UserLendIdMapping) ProtoMessage()    {}
func (*UserLendIdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{6}
}
func (m *UserLendIdMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLendIdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLendIdMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLendIdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLendIdMapping.Merge(m, src)
}
func (m *UserLendIdMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserLendIdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLendIdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserLendIdMapping proto.InternalMessageInfo

func (m *UserLendIdMapping) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserLendIdMapping) GetLendIds() []uint64 {
	if m != nil {
		return m.LendIds
	}
	return nil
}

type LendIdByOwnerAndPoolMapping struct {
	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	PoolId  uint64   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	LendIds []uint64 `protobuf:"varint,3,rep,packed,name=lendIds,proto3" json:"lendIds,omitempty" yaml:"lend_ids"`
}

func (m *LendIdByOwnerAndPoolMapping) Reset()         { *m = LendIdByOwnerAndPoolMapping{} }
func (m *LendIdByOwnerAndPoolMapping) String() string { return proto.CompactTextString(m) }
func (*LendIdByOwnerAndPoolMapping) ProtoMessage()    {}
func (*LendIdByOwnerAndPoolMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{7}
}
func (m *LendIdByOwnerAndPoolMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendIdByOwnerAndPoolMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendIdByOwnerAndPoolMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendIdByOwnerAndPoolMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendIdByOwnerAndPoolMapping.Merge(m, src)
}
func (m *LendIdByOwnerAndPoolMapping) XXX_Size() int {
	return m.Size()
}
func (m *LendIdByOwnerAndPoolMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LendIdByOwnerAndPoolMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LendIdByOwnerAndPoolMapping proto.InternalMessageInfo

func (m *LendIdByOwnerAndPoolMapping) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LendIdByOwnerAndPoolMapping) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LendIdByOwnerAndPoolMapping) GetLendIds() []uint64 {
	if m != nil {
		return m.LendIds
	}
	return nil
}

type BorrowIdByOwnerAndPoolMapping struct {
	Owner     string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	PoolId    uint64   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	BorrowIds []uint64 `protobuf:"varint,3,rep,packed,name=borrowIds,proto3" json:"borrowIds,omitempty" yaml:"borrow_ids"`
}

func (m *BorrowIdByOwnerAndPoolMapping) Reset()         { *m = BorrowIdByOwnerAndPoolMapping{} }
func (m *BorrowIdByOwnerAndPoolMapping) String() string { return proto.CompactTextString(m) }
func (*BorrowIdByOwnerAndPoolMapping) ProtoMessage()    {}
func (*BorrowIdByOwnerAndPoolMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{8}
}
func (m *BorrowIdByOwnerAndPoolMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowIdByOwnerAndPoolMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowIdByOwnerAndPoolMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowIdByOwnerAndPoolMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowIdByOwnerAndPoolMapping.Merge(m, src)
}
func (m *BorrowIdByOwnerAndPoolMapping) XXX_Size() int {
	return m.Size()
}
func (m *BorrowIdByOwnerAndPoolMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowIdByOwnerAndPoolMapping.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowIdByOwnerAndPoolMapping proto.InternalMessageInfo

func (m *BorrowIdByOwnerAndPoolMapping) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *BorrowIdByOwnerAndPoolMapping) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *BorrowIdByOwnerAndPoolMapping) GetBorrowIds() []uint64 {
	if m != nil {
		return m.BorrowIds
	}
	return nil
}

type UserBorrowIdMapping struct {
	Owner     string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	BorrowIds []uint64 `protobuf:"varint,2,rep,packed,name=borrow_ids,json=borrowIds,proto3" json:"borrow_ids,omitempty" yaml:"borrow_ids"`
}

func (m *UserBorrowIdMapping) Reset()         { *m = UserBorrowIdMapping{} }
func (m *UserBorrowIdMapping) String() string { return proto.CompactTextString(m) }
func (*UserBorrowIdMapping) ProtoMessage()    {}
func (*UserBorrowIdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{9}
}
func (m *UserBorrowIdMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBorrowIdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBorrowIdMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBorrowIdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBorrowIdMapping.Merge(m, src)
}
func (m *UserBorrowIdMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserBorrowIdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBorrowIdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserBorrowIdMapping proto.InternalMessageInfo

func (m *UserBorrowIdMapping) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserBorrowIdMapping) GetBorrowIds() []uint64 {
	if m != nil {
		return m.BorrowIds
	}
	return nil
}

type LendIdToBorrowIdMapping struct {
	LendingID   uint64   `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	BorrowingID []uint64 `protobuf:"varint,2,rep,packed,name=borrowing_id,json=borrowingId,proto3" json:"borrowing_id,omitempty" yaml:"borrowing_id"`
}

func (m *LendIdToBorrowIdMapping) Reset()         { *m = LendIdToBorrowIdMapping{} }
func (m *LendIdToBorrowIdMapping) String() string { return proto.CompactTextString(m) }
func (*LendIdToBorrowIdMapping) ProtoMessage()    {}
func (*LendIdToBorrowIdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{10}
}
func (m *LendIdToBorrowIdMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendIdToBorrowIdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendIdToBorrowIdMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendIdToBorrowIdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendIdToBorrowIdMapping.Merge(m, src)
}
func (m *LendIdToBorrowIdMapping) XXX_Size() int {
	return m.Size()
}
func (m *LendIdToBorrowIdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LendIdToBorrowIdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LendIdToBorrowIdMapping proto.InternalMessageInfo

func (m *LendIdToBorrowIdMapping) GetLendingID() uint64 {
	if m != nil {
		return m.LendingID
	}
	return 0
}

func (m *LendIdToBorrowIdMapping) GetBorrowingID() []uint64 {
	if m != nil {
		return m.BorrowingID
	}
	return nil
}

type AssetStats struct {
	PoolId              uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	AssetId             uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	TotalBorrowed       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_borrowed,json=totalBorrowed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_borrowed" yaml:"total_borrowed"`
	TotalStableBorrowed github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_stable_borrowed,json=totalStableBorrowed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_stable_borrowed" yaml:"total_stable_borrowed"`
	TotalLend           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_lend,json=totalLend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_lend" yaml:"total_lend"`
	LendApr             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=lend_apr,json=lendApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lend_apr" yaml:"lend_apr"`
	BorrowApr           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=borrow_apr,json=borrowApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrow_apr" yaml:"borrow_apr"`
	StableBorrowApr     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=stable_borrow_apr,json=stableBorrowApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_apr" yaml:"stable_borrow_apr"`
	UtilisationRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=utilisation_ratio,json=utilisationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"utilisation_ratio" yaml:"utilisation_ratio"`
}

func (m *AssetStats) Reset()         { *m = AssetStats{} }
func (m *AssetStats) String() string { return proto.CompactTextString(m) }
func (*AssetStats) ProtoMessage()    {}
func (*AssetStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{11}
}
func (m *AssetStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetStats.Merge(m, src)
}
func (m *AssetStats) XXX_Size() int {
	return m.Size()
}
func (m *AssetStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetStats.DiscardUnknown(m)
}

var xxx_messageInfo_AssetStats proto.InternalMessageInfo

func (m *AssetStats) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *AssetStats) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type AssetRatesStats struct {
	AssetId              uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	UOptimal             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=u_optimal,json=uOptimal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_optimal" yaml:"u_optimal"`
	Base                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base" yaml:"base"`
	Slope1               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=slope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope1" yaml:"slope1"`
	Slope2               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=slope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope2" yaml:"slope2"`
	EnableStableBorrow   bool                                   `protobuf:"varint,6,opt,name=enable_stable_borrow,json=enableStableBorrow,proto3" json:"enable_stable_borrow,omitempty" yaml:"enable_stable_borrow"`
	StableBase           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=stable_base,json=stableBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_base" yaml:"stable_base"`
	StableSlope1         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=stable_slope1,json=stableSlope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope1" yaml:"stable_slope1"`
	StableSlope2         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=stable_slope2,json=stableSlope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_slope2" yaml:"stable_slope2"`
	Ltv                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=ltv,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ltv" yaml:"ltv"`
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold" yaml:"liquidation_threshold"`
	LiquidationPenalty   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty" yaml:"liquidation_penalty"`
	ReserveFactor        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor" yaml:"reserve_factor"`
	CAssetId             uint64                                 `protobuf:"varint,14,opt,name=c_asset_id,json=cAssetId,proto3" json:"c_asset_id,omitempty" yaml:"c_asset_id"`
}

func (m *AssetRatesStats) Reset()         { *m = AssetRatesStats{} }
func (m *AssetRatesStats) String() string { return proto.CompactTextString(m) }
func (*AssetRatesStats) ProtoMessage()    {}
func (*AssetRatesStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{12}
}
func (m *AssetRatesStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetRatesStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetRatesStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetRatesStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetRatesStats.Merge(m, src)
}
func (m *AssetRatesStats) XXX_Size() int {
	return m.Size()
}
func (m *AssetRatesStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetRatesStats.DiscardUnknown(m)
}

var xxx_messageInfo_AssetRatesStats proto.InternalMessageInfo

func (m *AssetRatesStats) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AssetRatesStats) GetEnableStableBorrow() bool {
	if m != nil {
		return m.EnableStableBorrow
	}
	return false
}

func (m *AssetRatesStats) GetCAssetId() uint64 {
	if m != nil {
		return m.CAssetId
	}
	return 0
}

type LendMapping struct {
	LendIds []uint64 `protobuf:"varint,1,rep,packed,name=lend_ids,json=lendIds,proto3" json:"lend_ids,omitempty" yaml:"lend_ids"`
}

func (m *LendMapping) Reset()         { *m = LendMapping{} }
func (m *LendMapping) String() string { return proto.CompactTextString(m) }
func (*LendMapping) ProtoMessage()    {}
func (*LendMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{13}
}
func (m *LendMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendMapping.Merge(m, src)
}
func (m *LendMapping) XXX_Size() int {
	return m.Size()
}
func (m *LendMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LendMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LendMapping proto.InternalMessageInfo

func (m *LendMapping) GetLendIds() []uint64 {
	if m != nil {
		return m.LendIds
	}
	return nil
}

type BorrowMapping struct {
	BorrowIds []uint64 `protobuf:"varint,1,rep,packed,name=borrow_ids,json=borrowIds,proto3" json:"borrow_ids,omitempty" yaml:"borrow_ids"`
}

func (m *BorrowMapping) Reset()         { *m = BorrowMapping{} }
func (m *BorrowMapping) String() string { return proto.CompactTextString(m) }
func (*BorrowMapping) ProtoMessage()    {}
func (*BorrowMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{14}
}
func (m *BorrowMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowMapping.Merge(m, src)
}
func (m *BorrowMapping) XXX_Size() int {
	return m.Size()
}
func (m *BorrowMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowMapping.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowMapping proto.InternalMessageInfo

func (m *BorrowMapping) GetBorrowIds() []uint64 {
	if m != nil {
		return m.BorrowIds
	}
	return nil
}

type StableBorrowMapping struct {
	StableBorrowIds []uint64 `protobuf:"varint,1,rep,packed,name=stable_borrow_ids,json=stableBorrowIds,proto3" json:"stable_borrow_ids,omitempty" yaml:"stable_borrow_ids"`
}

func (m *StableBorrowMapping) Reset()         { *m = StableBorrowMapping{} }
func (m *StableBorrowMapping) String() string { return proto.CompactTextString(m) }
func (*StableBorrowMapping) ProtoMessage()    {}
func (*StableBorrowMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{15}
}
func (m *StableBorrowMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StableBorrowMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StableBorrowMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StableBorrowMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StableBorrowMapping.Merge(m, src)
}
func (m *StableBorrowMapping) XXX_Size() int {
	return m.Size()
}
func (m *StableBorrowMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_StableBorrowMapping.DiscardUnknown(m)
}

var xxx_messageInfo_StableBorrowMapping proto.InternalMessageInfo

func (m *StableBorrowMapping) GetStableBorrowIds() []uint64 {
	if m != nil {
		return m.StableBorrowIds
	}
	return nil
}

type ModuleBalance struct {
	PoolId             uint64               `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleBalanceStats []ModuleBalanceStats `protobuf:"bytes,2,rep,name=module_balance_stats,json=moduleBalanceStats,proto3" json:"module_balance_stats" yaml:"module_balance_stats"`
}

func (m *ModuleBalance) Reset()         { *m = ModuleBalance{} }
func (m *ModuleBalance) String() string { return proto.CompactTextString(m) }
func (*ModuleBalance) ProtoMessage()    {}
func (*ModuleBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{16}
}
func (m *ModuleBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalance.Merge(m, src)
}
func (m *ModuleBalance) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalance.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalance proto.InternalMessageInfo

func (m *ModuleBalance) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *ModuleBalance) GetModuleBalanceStats() []ModuleBalanceStats {
	if m != nil {
		return m.ModuleBalanceStats
	}
	return nil
}

type ModuleBalanceStats struct {
	AssetId uint64                                  `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Balance github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=balance,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance" yaml:"balance"`
}

func (m *ModuleBalanceStats) Reset()         { *m = ModuleBalanceStats{} }
func (m *ModuleBalanceStats) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceStats) ProtoMessage()    {}
func (*ModuleBalanceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{17}
}
func (m *ModuleBalanceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceStats.Merge(m, src)
}
func (m *ModuleBalanceStats) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceStats.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceStats proto.InternalMessageInfo

func (m *ModuleBalanceStats) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *ModuleBalanceStats) GetBalance() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Balance
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func init() {
	proto.RegisterType((*LendAsset)(nil), "comdex.lend.v1beta1.LendAsset")
	proto.RegisterType((*BorrowAsset)(nil), "comdex.lend.v1beta1.BorrowAsset")
	proto.RegisterType((*Pool)(nil), "comdex.lend.v1beta1.Pool")
	proto.RegisterType((*AssetDataPoolMapping)(nil), "comdex.lend.v1beta1.AssetDataPoolMapping")
	proto.RegisterType((*Extended_Pair)(nil), "comdex.lend.v1beta1.Extended_Pair")
	proto.RegisterType((*AssetToPairMapping)(nil), "comdex.lend.v1beta1.AssetToPairMapping")
	proto.RegisterType((*UserLendIdMapping)(nil), "comdex.lend.v1beta1.UserLendIdMapping")
	proto.RegisterType((*LendIdByOwnerAndPoolMapping)(nil), "comdex.lend.v1beta1.LendIdByOwnerAndPoolMapping")
	proto.RegisterType((*BorrowIdByOwnerAndPoolMapping)(nil), "comdex.lend.v1beta1.BorrowIdByOwnerAndPoolMapping")
	proto.RegisterType((*UserBorrowIdMapping)(nil), "comdex.lend.v1beta1.UserBorrowIdMapping")
	proto.RegisterType((*LendIdToBorrowIdMapping)(nil), "comdex.lend.v1beta1.LendIdToBorrowIdMapping")
	proto.RegisterType((*AssetStats)(nil), "comdex.lend.v1beta1.AssetStats")
	proto.RegisterType((*AssetRatesStats)(nil), "comdex.lend.v1beta1.AssetRatesStats")
	proto.RegisterType((*LendMapping)(nil), "comdex.lend.v1beta1.LendMapping")
	proto.RegisterType((*BorrowMapping)(nil), "comdex.lend.v1beta1.BorrowMapping")
	proto.RegisterType((*StableBorrowMapping)(nil), "comdex.lend.v1beta1.StableBorrowMapping")
	proto.RegisterType((*ModuleBalance)(nil), "comdex.lend.v1beta1.ModuleBalance")
	proto.RegisterType((*ModuleBalanceStats)(nil), "comdex.lend.v1beta1.ModuleBalanceStats")
}

func init() { proto.RegisterFile("comdex/lend/v1beta1/lend.proto", fileDescriptor_b87bb4bef8334ddd) }

var fileDescriptor_b87bb4bef8334ddd = []byte{
	// 2040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x4a, 0xb2, 0x44, 0x3e, 0x8a, 0x94, 0x38, 0xa4, 0x6a, 0x46, 0x8a, 0xb9, 0xca, 0xb4,
	0xb0, 0xdd, 0x83, 0x49, 0x58, 0x6d, 0x81, 0xc4, 0x48, 0x91, 0x70, 0x2d, 0xbb, 0x51, 0x13, 0xdb,
	0xc9, 0xd8, 0x45, 0xd0, 0x0f, 0x74, 0x31, 0xe4, 0x8e, 0xe4, 0x45, 0x96, 0xbb, 0xcc, 0xee, 0x50,
	0x8e, 0xfa, 0x11, 0x04, 0xed, 0xa1, 0x40, 0x4f, 0xb9, 0xf7, 0x5c, 0xf4, 0xda, 0x53, 0x6f, 0x05,
	0x7a, 0x69, 0x9b, 0x43, 0x0f, 0x39, 0x16, 0x3d, 0x6c, 0x0b, 0xfa, 0x3f, 0xd0, 0xb1, 0xa7, 0x62,
	0x3e, 0xf6, 0x4b, 0x64, 0x1d, 0xaf, 0x14, 0x20, 0x27, 0x71, 0x67, 0xde, 0xfb, 0xfd, 0xde, 0xbc,
	0x99, 0xf7, 0x31, 0x23, 0xe8, 0x8e, 0x82, 0xb1, 0xc3, 0x3e, 0xea, 0x7b, 0xcc, 0x77, 0xfa, 0xc7,
	0xb7, 0x86, 0x8c, 0xd3, 0x5b, 0xf2, 0xa3, 0x37, 0x09, 0x03, 0x1e, 0xa0, 0x96, 0x9a, 0xef, 0xc9,
	0x21, 0x3d, 0xbf, 0xdd, 0x3e, 0x0a, 0x8e, 0x02, 0x39, 0xdf, 0x17, 0xbf, 0x94, 0xe8, 0xb6, 0x79,
	0x14, 0x04, 0x47, 0x1e, 0xeb, 0xcb, 0xaf, 0xe1, 0xf4, 0xb0, 0xcf, 0xdd, 0x31, 0x8b, 0x38, 0x1d,
	0x4f, 0xb4, 0x40, 0x77, 0x14, 0x44, 0xe3, 0x20, 0xea, 0x0f, 0x69, 0xc4, 0x52, 0xae, 0x51, 0xe0,
	0xfa, 0x6a, 0x1e, 0xff, 0x71, 0x15, 0xaa, 0xef, 0x30, 0xdf, 0x19, 0x44, 0x11, 0xe3, 0xe8, 0x36,
	0x80, 0x20, 0x75, 0xfd, 0x23, 0xdb, 0x75, 0x3a, 0xc6, 0xae, 0x71, 0x63, 0xc5, 0xda, 0x99, 0xc5,
	0xe6, 0xd2, 0xc1, 0xfe, 0x69, 0x6c, 0x36, 0x4f, 0xe8, 0xd8, 0xbb, 0x8d, 0x33, 0x09, 0x4c, 0xaa,
	0xfa, 0xe3, 0xc0, 0x41, 0xaf, 0x41, 0x85, 0x0a, 0x10, 0xa1, 0xb9, 0x24, 0x35, 0xbb, 0xb3, 0xd8,
	0x5c, 0x93, 0xc0, 0x07, 0xce, 0x69, 0x6c, 0x6e, 0x28, 0xf5, 0x44, 0x08, 0x93, 0x35, 0xaa, 0xe6,
	0xd0, 0x77, 0x60, 0x6d, 0x12, 0x04, 0x9e, 0xd0, 0x5c, 0x96, 0x9a, 0x2f, 0xcf, 0x62, 0x73, 0xf5,
	0xdd, 0x20, 0xf0, 0xa4, 0x62, 0x43, 0x29, 0x6a, 0x11, 0x4c, 0x56, 0x27, 0x72, 0x06, 0x5d, 0x83,
	0xcb, 0xc1, 0x53, 0x9f, 0x85, 0x9d, 0x95, 0x5d, 0xe3, 0x46, 0xd5, 0xda, 0x3c, 0x8d, 0xcd, 0x75,
	0x25, 0x2a, 0x87, 0x31, 0x51, 0xd3, 0xe8, 0xe7, 0x50, 0xa5, 0xe3, 0x60, 0xea, 0x73, 0xdb, 0xf5,
	0x3b, 0x97, 0x77, 0x8d, 0x1b, 0xb5, 0xbd, 0x97, 0x7a, 0xca, 0x2f, 0x3d, 0xe1, 0x97, 0xc4, 0xc7,
	0xbd, 0x3b, 0x81, 0xeb, 0x5b, 0x77, 0x3e, 0x8b, 0xcd, 0x4b, 0xa7, 0xb1, 0xb9, 0xa9, 0xcd, 0x4d,
	0x34, 0xf1, 0x7f, 0x63, 0xf3, 0xfa, 0x91, 0xcb, 0x9f, 0x4c, 0x87, 0xbd, 0x51, 0x30, 0xee, 0x6b,
	0xc7, 0xaa, 0x3f, 0x37, 0x23, 0xe7, 0x83, 0x3e, 0x3f, 0x99, 0xb0, 0x48, 0x82, 0x90, 0x8a, 0x52,
	0x3b, 0xf0, 0xd1, 0x4f, 0x61, 0x3d, 0x71, 0x98, 0xd8, 0x9b, 0xce, 0xaa, 0xe4, 0xdf, 0xee, 0xa9,
	0x8d, 0xeb, 0x25, 0x1b, 0xd7, 0x7b, 0x9c, 0x6c, 0x9c, 0x65, 0x6a, 0x03, 0x5a, 0x45, 0x77, 0x0b,
	0x6d, 0xfc, 0xe9, 0xbf, 0x4d, 0x83, 0xd4, 0xf4, 0x90, 0x50, 0x41, 0xc7, 0xd0, 0x9c, 0x4e, 0x1c,
	0xca, 0x99, 0x63, 0x67, 0x8b, 0x5c, 0x93, 0x0e, 0xf9, 0xbe, 0x00, 0xfa, 0x57, 0x6c, 0x5e, 0x7b,
	0x01, 0xab, 0x0f, 0x7c, 0x7e, 0x1a, 0x9b, 0x1d, 0x45, 0x39, 0x07, 0x88, 0xc9, 0x86, 0x1e, 0x1b,
	0x24, 0xeb, 0xfa, 0x05, 0xb4, 0xe8, 0x31, 0x75, 0x3d, 0x3a, 0xf4, 0x98, 0xcd, 0x03, 0x7b, 0x18,
	0x84, 0x61, 0xf0, 0xb4, 0x53, 0x91, 0xcc, 0xef, 0x94, 0x66, 0xde, 0xd6, 0xde, 0x9e, 0x87, 0xc4,
	0xa4, 0x99, 0x8e, 0x3e, 0x0e, 0x2c, 0x39, 0x86, 0x7e, 0x06, 0x28, 0x64, 0x4f, 0x69, 0xe8, 0xd8,
	0x83, 0xd1, 0x68, 0x3a, 0x9e, 0x7a, 0xc2, 0xb6, 0x4e, 0x55, 0x92, 0xbf, 0x5d, 0x9a, 0xfc, 0x25,
	0x45, 0xae, 0x11, 0x69, 0x86, 0x88, 0x49, 0x53, 0x0d, 0xe6, 0x58, 0xf0, 0x5f, 0x2b, 0x50, 0x53,
	0x66, 0xa8, 0xa0, 0x79, 0x13, 0xd6, 0x95, 0xa5, 0x85, 0xb0, 0xb9, 0x9a, 0x86, 0x8d, 0xde, 0xc7,
	0xbc, 0x0c, 0x26, 0xb5, 0xf4, 0xf3, 0xc0, 0x41, 0x83, 0x42, 0xd8, 0xa9, 0xe0, 0xc1, 0xb3, 0xd8,
	0x94, 0x91, 0x29, 0x44, 0xbe, 0x38, 0xfa, 0xee, 0xc2, 0xa6, 0x1b, 0xd9, 0x11, 0x97, 0xbe, 0xd3,
	0x7b, 0x21, 0x62, 0xa9, 0x62, 0xed, 0x9c, 0xc6, 0xe6, 0x15, 0xa5, 0x7b, 0x56, 0x02, 0x93, 0x86,
	0x1b, 0x3d, 0x92, 0x23, 0xda, 0xaf, 0x22, 0x12, 0xa9, 0x1b, 0x0a, 0x33, 0x56, 0x72, 0x91, 0x48,
	0xdd, 0x50, 0xda, 0x90, 0x44, 0xa2, 0x12, 0x11, 0x91, 0x28, 0x66, 0x9c, 0xaf, 0x36, 0xc2, 0x3e,
	0x06, 0xd0, 0x10, 0xc1, 0x94, 0xeb, 0xf8, 0x7a, 0x0e, 0xfb, 0xbe, 0x66, 0x6f, 0x16, 0xd8, 0x83,
	0x29, 0x2f, 0x45, 0xaf, 0xd7, 0xfb, 0x70, 0xca, 0xd1, 0xfb, 0xb0, 0x39, 0x0c, 0x5d, 0xe7, 0x48,
	0x04, 0x4c, 0x92, 0x00, 0xd7, 0xa4, 0xf3, 0x6e, 0xce, 0x62, 0xb3, 0x61, 0xa9, 0x39, 0x95, 0x07,
	0xf7, 0xb3, 0xcd, 0x38, 0xab, 0x83, 0x49, 0x63, 0x98, 0x17, 0x75, 0x90, 0x03, 0x8d, 0xec, 0xd0,
	0xc8, 0xe4, 0x51, 0xf9, 0xc2, 0xe4, 0xf1, 0x8a, 0x5e, 0xdd, 0xd6, 0xd9, 0x43, 0x97, 0xa5, 0x8f,
	0x7a, 0x3a, 0x28, 0x13, 0xc8, 0x09, 0xa0, 0xc2, 0xa1, 0xb0, 0x43, 0xca, 0xd9, 0x39, 0x42, 0x69,
	0x9f, 0x8d, 0xb2, 0x50, 0x9a, 0x47, 0xc4, 0x64, 0x33, 0xca, 0x9d, 0x34, 0x42, 0xb9, 0xa4, 0x3e,
	0x93, 0x6a, 0xc4, 0x0e, 0xc2, 0xc5, 0xa2, 0x78, 0x1e, 0x11, 0x93, 0xcd, 0x42, 0xf6, 0x12, 0x9b,
	0xf6, 0x89, 0x01, 0x6d, 0xd7, 0xe7, 0x2c, 0x64, 0x11, 0x2f, 0xe4, 0x90, 0x9a, 0x64, 0xbf, 0x5f,
	0x9a, 0x7d, 0x47, 0x87, 0x58, 0x82, 0x59, 0xc8, 0x22, 0xad, 0x64, 0x38, 0x9f, 0x47, 0x7e, 0xbf,
	0x02, 0x2b, 0xa2, 0xc6, 0xe5, 0xcb, 0x9f, 0x51, 0xa2, 0xfc, 0xdd, 0x85, 0xda, 0x38, 0x70, 0xa6,
	0x1e, 0xb3, 0x7d, 0x3a, 0x66, 0x32, 0x6d, 0x54, 0xad, 0x6f, 0xcc, 0x62, 0x13, 0xee, 0xcb, 0xe1,
	0x07, 0x74, 0xcc, 0x4e, 0x63, 0x13, 0x29, 0xf5, 0x9c, 0x28, 0x26, 0x30, 0x4e, 0x25, 0xd0, 0xdb,
	0x50, 0x1f, 0x53, 0xd7, 0xcf, 0xce, 0xae, 0x2a, 0xc1, 0xd7, 0x67, 0xb1, 0x59, 0xbb, 0x4f, 0x5d,
	0x3f, 0x2b, 0xe0, 0x6d, 0x8d, 0x94, 0x97, 0xc6, 0xa4, 0x36, 0xce, 0x84, 0xd0, 0x18, 0xbe, 0x76,
	0xe8, 0x86, 0x11, 0xb7, 0xe7, 0x22, 0x42, 0xa5, 0x93, 0x57, 0x67, 0xb1, 0xd9, 0xba, 0x27, 0x24,
	0x0a, 0x61, 0x21, 0xd0, 0xaf, 0x2a, 0xf4, 0xc5, 0xea, 0x98, 0xb4, 0x0e, 0xe7, 0xb5, 0xd0, 0x87,
	0x70, 0x25, 0x62, 0xa3, 0xc0, 0x77, 0xe6, 0xf9, 0x2e, 0x4b, 0xbe, 0xdb, 0xb3, 0xd8, 0x6c, 0x3f,
	0x92, 0x22, 0x73, 0x84, 0x5d, 0x7d, 0x54, 0x17, 0x03, 0x60, 0xd2, 0x8e, 0x16, 0xe8, 0xa1, 0x09,
	0x80, 0x12, 0x71, 0x28, 0xa7, 0x9d, 0xd5, 0xdd, 0xe5, 0x1b, 0xb5, 0xbd, 0x6f, 0xf6, 0x16, 0x74,
	0x6c, 0x3d, 0xa9, 0xb1, 0x4f, 0x39, 0x15, 0x3b, 0x79, 0x9f, 0x4e, 0x26, 0xae, 0x7f, 0x64, 0x5d,
	0x13, 0x07, 0x4b, 0xa4, 0xf6, 0x74, 0x36, 0x97, 0x8a, 0x52, 0x5c, 0x4c, 0xaa, 0x34, 0x99, 0xc7,
	0xbf, 0x31, 0xa0, 0xbd, 0x08, 0xab, 0xd0, 0x71, 0x19, 0xe5, 0x3a, 0xae, 0x6f, 0x03, 0xb8, 0x51,
	0xb2, 0x66, 0x79, 0x74, 0x2a, 0xd6, 0x56, 0x66, 0x49, 0x36, 0x87, 0x49, 0xd5, 0x8d, 0xb4, 0x0b,
	0xf0, 0xef, 0x96, 0xa0, 0x7e, 0xf7, 0x23, 0xce, 0x7c, 0x87, 0x39, 0xb6, 0x28, 0x0a, 0xa8, 0x01,
	0x4b, 0x09, 0x39, 0x59, 0x72, 0x1d, 0xd4, 0x4b, 0x4d, 0xf2, 0x75, 0x1d, 0x6b, 0xcd, 0xd9, 0xe1,
	0xa7, 0x76, 0xf8, 0xe8, 0x16, 0xa8, 0x85, 0xca, 0xc0, 0x57, 0x07, 0xaf, 0x9d, 0xab, 0x0c, 0xc9,
	0x14, 0x26, 0x0a, 0x56, 0x44, 0xee, 0xeb, 0x50, 0x77, 0x23, 0x5b, 0x06, 0x94, 0x2d, 0x22, 0x41,
	0x9e, 0xac, 0x8a, 0xd5, 0xc9, 0x0e, 0x68, 0x61, 0x1a, 0x93, 0x9a, 0x1b, 0x1d, 0x88, 0x4f, 0x19,
	0x6b, 0x3f, 0x84, 0x66, 0x8a, 0x6a, 0x27, 0x51, 0xa7, 0xce, 0x4a, 0x4f, 0x64, 0xeb, 0x81, 0xa6,
	0x49, 0xa3, 0xaf, 0x73, 0xc6, 0x14, 0x3b, 0x8d, 0xc3, 0x06, 0x2d, 0xc8, 0xe2, 0x3f, 0x1b, 0x80,
	0xa4, 0xfa, 0xe3, 0x40, 0xf8, 0xe6, 0x4b, 0xd8, 0xa5, 0x5c, 0x62, 0x58, 0x2a, 0x91, 0x18, 0x72,
	0x45, 0x7c, 0x79, 0x77, 0xb9, 0x50, 0xc4, 0x9d, 0xff, 0x5f, 0xc4, 0xf1, 0x31, 0x34, 0x7f, 0x10,
	0xb1, 0x50, 0xf4, 0x1c, 0x07, 0x4e, 0x62, 0x7d, 0xda, 0x63, 0x1b, 0xcf, 0xef, 0xb1, 0x5f, 0x83,
	0x8a, 0x38, 0xfc, 0xb6, 0xeb, 0x44, 0x9d, 0x25, 0x49, 0x2a, 0x57, 0xa9, 0xc0, 0xa2, 0x6c, 0x95,
	0x89, 0x10, 0x26, 0x6b, 0x9e, 0x9a, 0xc3, 0x7f, 0x32, 0x60, 0x47, 0xc9, 0x59, 0x27, 0x0f, 0x05,
	0xd8, 0xc0, 0x77, 0xf2, 0xc7, 0xfc, 0x45, 0x4d, 0x38, 0xa7, 0xb7, 0x5e, 0x85, 0xc4, 0x12, 0xed,
	0xad, 0x17, 0x36, 0xfc, 0x2f, 0x06, 0x5c, 0x55, 0xd5, 0xec, 0x2b, 0x32, 0xfd, 0x4d, 0xa8, 0x0e,
	0x35, 0x7f, 0x62, 0xbc, 0x6c, 0x1b, 0x13, 0xa3, 0xa2, 0x2c, 0xa2, 0x75, 0x25, 0x96, 0x0b, 0xc8,
	0x94, 0xf0, 0x27, 0x06, 0xb4, 0xc4, 0xa6, 0x27, 0x1a, 0x65, 0x0d, 0x1f, 0x00, 0x64, 0xc8, 0x7a,
	0xe3, 0x4b, 0x9a, 0xf0, 0x07, 0x03, 0xae, 0x28, 0x6f, 0x27, 0xdd, 0x7d, 0x66, 0xc6, 0x60, 0xc1,
	0x7d, 0xb4, 0x64, 0x63, 0x7c, 0x70, 0xa6, 0x3b, 0x57, 0x36, 0x5e, 0x13, 0xd5, 0xcd, 0x4a, 0x5b,
	0xf0, 0x17, 0x6a, 0xd3, 0xf1, 0x6f, 0xd7, 0x00, 0x64, 0xd8, 0x3e, 0xe2, 0x94, 0x47, 0xe7, 0x2d,
	0xdb, 0x17, 0xb8, 0x27, 0xfb, 0xd0, 0xe0, 0x01, 0xa7, 0x9e, 0xee, 0xab, 0x98, 0xaa, 0xd5, 0x55,
	0xeb, 0x7b, 0xa5, 0xbb, 0x15, 0xdd, 0x1e, 0x16, 0xd1, 0x30, 0xa9, 0xcb, 0x01, 0x4b, 0x7f, 0xa3,
	0x5f, 0x19, 0xb0, 0xa5, 0x44, 0x0a, 0xfd, 0x1c, 0x73, 0xf4, 0x8d, 0xfb, 0x41, 0x69, 0xde, 0x97,
	0xf3, 0xbc, 0x67, 0x40, 0x31, 0x69, 0xc9, 0xf1, 0xfc, 0x85, 0x84, 0x39, 0x68, 0x08, 0xa0, 0xc4,
	0xc5, 0x9e, 0xca, 0x54, 0x5d, 0x55, 0x37, 0x88, 0x52, 0xc4, 0xcd, 0x3c, 0xb1, 0x40, 0xc2, 0xa4,
	0x2a, 0x3f, 0xc4, 0x49, 0x42, 0x3f, 0xd1, 0xd9, 0x8b, 0x4e, 0x42, 0x79, 0x81, 0xa8, 0x5a, 0x83,
	0xd2, 0x9d, 0x6f, 0x3e, 0x4f, 0xd0, 0x49, 0xa8, 0xf3, 0xc4, 0x60, 0x12, 0x8a, 0x15, 0xe8, 0xb3,
	0x2f, 0xf0, 0xd7, 0x4a, 0xaf, 0x40, 0xe1, 0x17, 0xa3, 0x48, 0x32, 0xe8, 0x28, 0x12, 0x1c, 0xc7,
	0xd0, 0x2c, 0xf6, 0xdc, 0x82, 0xaa, 0x52, 0xfa, 0x19, 0x40, 0x51, 0x75, 0x16, 0x35, 0xf1, 0x92,
	0x71, 0x23, 0xdf, 0xc3, 0x0b, 0xde, 0xa7, 0xd0, 0x9c, 0x72, 0xd7, 0x73, 0x23, 0xca, 0xdd, 0xc0,
	0x17, 0x9d, 0xbe, 0x1b, 0xe8, 0xcb, 0xc3, 0xb9, 0x79, 0xe7, 0x00, 0x45, 0x03, 0x9f, 0x8d, 0x11,
	0x39, 0xf4, 0x0f, 0x80, 0x0d, 0x19, 0x33, 0xe2, 0x26, 0x11, 0xa9, 0x88, 0xbc, 0x40, 0xa9, 0xb5,
	0xa1, 0x3a, 0xb5, 0x83, 0x09, 0x77, 0xc7, 0xd4, 0xd3, 0xad, 0xb4, 0x55, 0xda, 0x7e, 0xdd, 0xb6,
	0xa4, 0x40, 0x98, 0x54, 0xa6, 0x0f, 0xd5, 0x4f, 0xf4, 0x1e, 0xac, 0x88, 0xbb, 0xa8, 0x8e, 0xd8,
	0xef, 0x96, 0xc6, 0xae, 0xe9, 0xed, 0xa7, 0x11, 0xc3, 0x44, 0x42, 0xa1, 0xf7, 0x61, 0x35, 0xf2,
	0x82, 0x09, 0xbb, 0xa5, 0xc3, 0xf1, 0x8d, 0xd2, 0xa0, 0x75, 0xbd, 0xd1, 0x12, 0x05, 0x13, 0x0d,
	0x97, 0x02, 0xef, 0xe9, 0x70, 0xbb, 0x18, 0xf0, 0x5e, 0x02, 0xbc, 0x87, 0xde, 0x83, 0x36, 0xf3,
	0xe5, 0xa1, 0x2a, 0xbe, 0x54, 0xac, 0xca, 0x16, 0xce, 0xcc, 0xae, 0x51, 0x8b, 0xa4, 0x30, 0x41,
	0x6a, 0xb8, 0xf0, 0x62, 0xc1, 0xa0, 0x96, 0x48, 0x09, 0xf7, 0xaa, 0xe8, 0xda, 0x2f, 0x6d, 0x30,
	0x2a, 0x1e, 0x79, 0xe9, 0x65, 0xd0, 0x87, 0x5d, 0xf8, 0xfa, 0x03, 0xa8, 0xeb, 0x39, 0xed, 0x72,
	0x15, 0x5b, 0xf7, 0x4a, 0x13, 0xb5, 0x0b, 0x44, 0x89, 0xe7, 0xd7, 0xd5, 0xf7, 0x23, 0xe5, 0xff,
	0x33, 0x64, 0x7b, 0x3a, 0xa0, 0xbe, 0x14, 0xb2, 0xbd, 0x22, 0xd9, 0x1e, 0x7a, 0x00, 0xcb, 0x1e,
	0x3f, 0xd6, 0xb7, 0xee, 0xd7, 0x4b, 0x53, 0x80, 0x4e, 0x7b, 0xfc, 0x18, 0x13, 0x01, 0x84, 0x7e,
	0x6d, 0xc0, 0x96, 0xe7, 0x7e, 0x38, 0x75, 0x1d, 0x15, 0xc1, 0xfc, 0x49, 0xc8, 0xa2, 0x27, 0x81,
	0x97, 0x5c, 0xad, 0x1f, 0x94, 0xa6, 0xd0, 0x45, 0x63, 0x21, 0x28, 0x26, 0xed, 0xdc, 0xf8, 0xe3,
	0x64, 0x18, 0xfd, 0x12, 0x5a, 0x79, 0xf9, 0x09, 0xf3, 0xa9, 0xc7, 0x4f, 0x3a, 0xeb, 0xa5, 0x9f,
	0x27, 0x95, 0x09, 0xdb, 0xf3, 0x26, 0x68, 0x48, 0x4c, 0x50, 0x6e, 0xf4, 0x5d, 0x35, 0x28, 0x2a,
	0x75, 0xc8, 0x22, 0x16, 0x1e, 0x33, 0xfb, 0x90, 0x8e, 0x78, 0x10, 0x76, 0xea, 0xa5, 0x2b, 0xb5,
	0x62, 0xde, 0x4a, 0xde, 0x26, 0xf3, 0x68, 0x98, 0xd4, 0xf5, 0xc0, 0x3d, 0xf9, 0x8d, 0xde, 0x00,
	0x18, 0x65, 0x77, 0xdf, 0x86, 0xcc, 0x7d, 0xaf, 0xcc, 0x62, 0xb3, 0x72, 0x27, 0x4b, 0x7e, 0xba,
	0x80, 0x8c, 0x72, 0x57, 0xdc, 0xca, 0x48, 0x4f, 0xe3, 0xb7, 0xa0, 0x26, 0x2a, 0x61, 0xee, 0xd2,
	0x92, 0xb6, 0xf3, 0x46, 0xb9, 0xae, 0x98, 0x40, 0x5d, 0x85, 0x66, 0xae, 0x89, 0xcb, 0xf5, 0x88,
	0xc6, 0x79, 0x7a, 0xc4, 0x10, 0x5a, 0xf9, 0xa0, 0x4f, 0x90, 0x7f, 0x7c, 0xb6, 0xe8, 0x65, 0x04,
	0xfd, 0x59, 0x6c, 0x6e, 0xe4, 0x75, 0x14, 0xcd, 0xc2, 0xca, 0x26, 0xd9, 0x0a, 0x95, 0x4d, 0x70,
	0xfe, 0xcd, 0x80, 0xba, 0x7a, 0x48, 0xb1, 0xa8, 0x47, 0xfd, 0x11, 0x3b, 0x6f, 0xc3, 0xf7, 0x31,
	0xb4, 0xf5, 0xe3, 0xcb, 0x50, 0x01, 0x89, 0xb4, 0xc6, 0x55, 0xb7, 0x5c, 0xdb, 0xbb, 0xbe, 0xf0,
	0xed, 0xa0, 0x40, 0x2c, 0x8b, 0x9b, 0xf5, 0x75, 0xfd, 0xb2, 0xb7, 0x53, 0x78, 0xcf, 0x29, 0x40,
	0x62, 0x82, 0xc6, 0x73, 0x8a, 0xf8, 0xef, 0x06, 0xa0, 0x79, 0xbc, 0x8b, 0x14, 0xcb, 0x63, 0x58,
	0xd3, 0xbc, 0xb2, 0x54, 0x3e, 0xf7, 0xb9, 0x75, 0xa0, 0xcd, 0x6e, 0x24, 0xf5, 0x4b, 0xea, 0x95,
	0x7a, 0x6b, 0x4d, 0xc8, 0xac, 0xb7, 0x3e, 0x9b, 0x75, 0x8d, 0xcf, 0x67, 0x5d, 0xe3, 0x3f, 0xb3,
	0xae, 0xf1, 0xe9, 0xb3, 0xee, 0xa5, 0xcf, 0x9f, 0x75, 0x2f, 0xfd, 0xf3, 0x59, 0xf7, 0xd2, 0x8f,
	0x7a, 0x05, 0x2c, 0xe1, 0xcf, 0x9b, 0xc1, 0xe1, 0xa1, 0x3b, 0x72, 0xa9, 0xa7, 0xbf, 0xfb, 0xfa,
	0xff, 0x6d, 0x12, 0x77, 0xb8, 0x2a, 0x9f, 0x4e, 0xbf, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x60, 0xb6, 0x41, 0xf2, 0x8b, 0x1b, 0x00, 0x00,
}

func (m *LendAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward_Accumulated.Size()
		i -= size
		if _, err := m.Reward_Accumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.AvailableToBorrow.Size()
		i -= size
		if _, err := m.AvailableToBorrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.UpdatedAmountIn.Size()
		i -= size
		if _, err := m.UpdatedAmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LendingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLend(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Interest_Accumulated.Size()
		i -= size
		if _, err := m.Interest_Accumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.UpdatedAmountOut.Size()
		i -= size
		if _, err := m.UpdatedAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableBorrowRate.Size()
		i -= size
		if _, err := m.StableBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BorrowingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLend(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	if m.BridgedAssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.BridgedAssetID))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.AmountOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.PairID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x20
	}
	if m.IsStableBorrow {
		i--
		if m.IsStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LendingID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendingID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetData) > 0 {
		for iNdEx := len(m.AssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SecondBridgedAssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.SecondBridgedAssetId))
		i--
		dAtA[i] = 0x28
	}
	if m.FirstBridgedAssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.FirstBridgedAssetId))
		i--
		dAtA[i] = 0x20
	}
	if m.MainAssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.MainAssetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetDataPoolMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetDataPoolMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetDataPoolMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBridged {
		i--
		if m.IsBridged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Extended_Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extended_Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extended_Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetOutPoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetOutPoolId))
		i--
		dAtA[i] = 0x28
	}
	if m.IsInterPool {
		i--
		if m.IsInterPool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AssetOut != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetOut))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetIn != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetIn))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToPairMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToPairMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToPairMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairId) > 0 {
		dAtA7 := make([]byte, len(m.PairId)*10)
		var j6 int
		for _, num := range m.PairId {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintLend(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLendIdMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLendIdMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLendIdMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LendIds) > 0 {
		dAtA9 := make([]byte, len(m.LendIds)*10)
		var j8 int
		for _, num := range m.LendIds {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintLend(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LendIdByOwnerAndPoolMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendIdByOwnerAndPoolMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendIdByOwnerAndPoolMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LendIds) > 0 {
		dAtA11 := make([]byte, len(m.LendIds)*10)
		var j10 int
		for _, num := range m.LendIds {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintLend(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BorrowIdByOwnerAndPoolMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowIdByOwnerAndPoolMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowIdByOwnerAndPoolMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowIds) > 0 {
		dAtA13 := make([]byte, len(m.BorrowIds)*10)
		var j12 int
		for _, num := range m.BorrowIds {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintLend(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserBorrowIdMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBorrowIdMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBorrowIdMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowIds) > 0 {
		dAtA15 := make([]byte, len(m.BorrowIds)*10)
		var j14 int
		for _, num := range m.BorrowIds {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintLend(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LendIdToBorrowIdMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendIdToBorrowIdMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendIdToBorrowIdMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowingID) > 0 {
		dAtA17 := make([]byte, len(m.BorrowingID)*10)
		var j16 int
		for _, num := range m.BorrowingID {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintLend(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if m.LendingID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendingID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UtilisationRatio.Size()
		i -= size
		if _, err := m.UtilisationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.StableBorrowApr.Size()
		i -= size
		if _, err := m.StableBorrowApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.BorrowApr.Size()
		i -= size
		if _, err := m.BorrowApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.LendApr.Size()
		i -= size
		if _, err := m.LendApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalLend.Size()
		i -= size
		if _, err := m.TotalLend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalStableBorrowed.Size()
		i -= size
		if _, err := m.TotalStableBorrowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalBorrowed.Size()
		i -= size
		if _, err := m.TotalBorrowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetRatesStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetRatesStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetRatesStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CAssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.CAssetId))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Ltv.Size()
		i -= size
		if _, err := m.Ltv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableSlope2.Size()
		i -= size
		if _, err := m.StableSlope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.StableSlope1.Size()
		i -= size
		if _, err := m.StableSlope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.StableBase.Size()
		i -= size
		if _, err := m.StableBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.EnableStableBorrow {
		i--
		if m.EnableStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Slope2.Size()
		i -= size
		if _, err := m.Slope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Slope1.Size()
		i -= size
		if _, err := m.Slope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Base.Size()
		i -= size
		if _, err := m.Base.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.UOptimal.Size()
		i -= size
		if _, err := m.UOptimal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LendMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LendIds) > 0 {
		dAtA19 := make([]byte, len(m.LendIds)*10)
		var j18 int
		for _, num := range m.LendIds {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintLend(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BorrowMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowIds) > 0 {
		dAtA21 := make([]byte, len(m.BorrowIds)*10)
		var j20 int
		for _, num := range m.BorrowIds {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintLend(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StableBorrowMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StableBorrowMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StableBorrowMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StableBorrowIds) > 0 {
		dAtA23 := make([]byte, len(m.StableBorrowIds)*10)
		var j22 int
		for _, num := range m.StableBorrowIds {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintLend(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleBalanceStats) > 0 {
		for iNdEx := len(m.ModuleBalanceStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleBalanceStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleBalanceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLend(dAtA []byte, offset int, v uint64) int {
	offset -= sovLend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LendAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.UpdatedAmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AvailableToBorrow.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Reward_Accumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *BorrowAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.LendingID != 0 {
		n += 1 + sovLend(uint64(m.LendingID))
	}
	if m.IsStableBorrow {
		n += 2
	}
	if m.PairID != 0 {
		n += 1 + sovLend(uint64(m.PairID))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.BridgedAssetID != 0 {
		n += 1 + sovLend(uint64(m.BridgedAssetID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.StableBorrowRate.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.UpdatedAmountOut.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Interest_Accumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.MainAssetId != 0 {
		n += 1 + sovLend(uint64(m.MainAssetId))
	}
	if m.FirstBridgedAssetId != 0 {
		n += 1 + sovLend(uint64(m.FirstBridgedAssetId))
	}
	if m.SecondBridgedAssetId != 0 {
		n += 1 + sovLend(uint64(m.SecondBridgedAssetId))
	}
	if len(m.AssetData) > 0 {
		for _, e := range m.AssetData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *AssetDataPoolMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	if m.IsBridged {
		n += 2
	}
	return n
}

func (m *Extended_Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLend(uint64(m.Id))
	}
	if m.AssetIn != 0 {
		n += 1 + sovLend(uint64(m.AssetIn))
	}
	if m.AssetOut != 0 {
		n += 1 + sovLend(uint64(m.AssetOut))
	}
	if m.IsInterPool {
		n += 2
	}
	if m.AssetOutPoolId != 0 {
		n += 1 + sovLend(uint64(m.AssetOutPoolId))
	}
	return n
}

func (m *AssetToPairMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if len(m.PairId) > 0 {
		l = 0
		for _, e := range m.PairId {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *UserLendIdMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if len(m.LendIds) > 0 {
		l = 0
		for _, e := range m.LendIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *LendIdByOwnerAndPoolMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if len(m.LendIds) > 0 {
		l = 0
		for _, e := range m.LendIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *BorrowIdByOwnerAndPoolMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if len(m.BorrowIds) > 0 {
		l = 0
		for _, e := range m.BorrowIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *UserBorrowIdMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if len(m.BorrowIds) > 0 {
		l = 0
		for _, e := range m.BorrowIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *LendIdToBorrowIdMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LendingID != 0 {
		n += 1 + sovLend(uint64(m.LendingID))
	}
	if len(m.BorrowingID) > 0 {
		l = 0
		for _, e := range m.BorrowingID {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *AssetStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	l = m.TotalBorrowed.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalStableBorrowed.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.TotalLend.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LendApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.BorrowApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableBorrowApr.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.UtilisationRatio.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func (m *AssetRatesStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	l = m.UOptimal.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Base.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Slope2.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.EnableStableBorrow {
		n += 2
	}
	l = m.StableBase.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope1.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.StableSlope2.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Ltv.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.ReserveFactor.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.CAssetId != 0 {
		n += 1 + sovLend(uint64(m.CAssetId))
	}
	return n
}

func (m *LendMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LendIds) > 0 {
		l = 0
		for _, e := range m.LendIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *BorrowMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BorrowIds) > 0 {
		l = 0
		for _, e := range m.BorrowIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *StableBorrowMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StableBorrowIds) > 0 {
		l = 0
		for _, e := range m.StableBorrowIds {
			l += sovLend(uint64(e))
		}
		n += 1 + sovLend(uint64(l)) + l
	}
	return n
}

func (m *ModuleBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovLend(uint64(m.PoolId))
	}
	if len(m.ModuleBalanceStats) > 0 {
		for _, e := range m.ModuleBalanceStats {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *ModuleBalanceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLend(uint64(m.AssetId))
	}
	l = m.Balance.Size()
	n += 1 + l + sovLend(uint64(l))
	return n
}

func sovLend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLend(x uint64) (n int) {
	return sovLend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LendAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LendingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableToBorrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward_Accumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward_Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingID", wireType)
			}
			m.LendingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStableBorrow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgedAssetID", wireType)
			}
			m.BridgedAssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgedAssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BorrowingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest_Accumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest_Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainAssetId", wireType)
			}
			m.MainAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBridgedAssetId", wireType)
			}
			m.FirstBridgedAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstBridgedAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondBridgedAssetId", wireType)
			}
			m.SecondBridgedAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondBridgedAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData, AssetDataPoolMapping{})
			if err := m.AssetData[len(m.AssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetDataPoolMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetDataPoolMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetDataPoolMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBridged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBridged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extended_Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extended_Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extended_Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIn", wireType)
			}
			m.AssetIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			m.AssetOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInterPool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInterPool = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutPoolId", wireType)
			}
			m.AssetOutPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToPairMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToPairMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToPairMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PairId = append(m.PairId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PairId) == 0 {
					m.PairId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PairId = append(m.PairId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLendIdMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLendIdMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLendIdMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LendIds = append(m.LendIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LendIds) == 0 {
					m.LendIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LendIds = append(m.LendIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LendIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendIdByOwnerAndPoolMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendIdByOwnerAndPoolMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendIdByOwnerAndPoolMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LendIds = append(m.LendIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LendIds) == 0 {
					m.LendIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LendIds = append(m.LendIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LendIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowIdByOwnerAndPoolMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowIdByOwnerAndPoolMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowIdByOwnerAndPoolMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowIds = append(m.BorrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowIds) == 0 {
					m.BorrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowIds = append(m.BorrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBorrowIdMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBorrowIdMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBorrowIdMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowIds = append(m.BorrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowIds) == 0 {
					m.BorrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowIds = append(m.BorrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendIdToBorrowIdMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendIdToBorrowIdMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendIdToBorrowIdMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingID", wireType)
			}
			m.LendingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowingID = append(m.BorrowingID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowingID) == 0 {
					m.BorrowingID = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowingID = append(m.BorrowingID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBorrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStableBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStableBorrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LendApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilisationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UtilisationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetRatesStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetRatesStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetRatesStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UOptimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UOptimal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStableBorrow = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableSlope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableSlope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ltv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetId", wireType)
			}
			m.CAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LendIds = append(m.LendIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LendIds) == 0 {
					m.LendIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LendIds = append(m.LendIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LendIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BorrowIds = append(m.BorrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BorrowIds) == 0 {
					m.BorrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BorrowIds = append(m.BorrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StableBorrowMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StableBorrowMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StableBorrowMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StableBorrowIds = append(m.StableBorrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLend
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLend
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StableBorrowIds) == 0 {
					m.StableBorrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StableBorrowIds = append(m.StableBorrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBalanceStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleBalanceStats = append(m.ModuleBalanceStats, ModuleBalanceStats{})
			if err := m.ModuleBalanceStats[len(m.ModuleBalanceStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalanceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLend = fmt.Errorf("proto: unexpected end of group")
)
