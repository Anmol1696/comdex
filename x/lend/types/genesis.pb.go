// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/lend/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisState struct {
	BorrowAsset                []BorrowAsset                `protobuf:"bytes,1,rep,name=borrowAsset,proto3" json:"borrowAsset" yaml:"borrowAsset"`
	BorrowInterestTracker      []BorrowInterestTracker      `protobuf:"bytes,2,rep,name=borrowInterestTracker,proto3" json:"borrowInterestTracker" yaml:"borrowInterestTracker"`
	LendAsset                  []LendAsset                  `protobuf:"bytes,3,rep,name=lendAsset,proto3" json:"lendAsset" yaml:"lendAsset"`
	Pool                       []Pool                       `protobuf:"bytes,4,rep,name=pool,proto3" json:"pool" yaml:"pool"`
	AssetToPairMapping         []AssetToPairMapping         `protobuf:"bytes,5,rep,name=assetToPairMapping,proto3" json:"assetToPairMapping" yaml:"assetToPairMapping"`
	PoolAssetLBMapping         []PoolAssetLBMapping         `protobuf:"bytes,6,rep,name=poolAssetLBMapping,proto3" json:"poolAssetLBMapping" yaml:"poolAssetLBMapping"`
	LendRewardsTracker         []LendRewardsTracker         `protobuf:"bytes,7,rep,name=lendRewardsTracker,proto3" json:"lendRewardsTracker" yaml:"lendRewardsTracker"`
	UserAssetLendBorrowMapping []UserAssetLendBorrowMapping `protobuf:"bytes,8,rep,name=userAssetLendBorrowMapping,proto3" json:"userAssetLendBorrowMapping" yaml:"userAssetLendBorrowMapping"`
	ReserveBuybackAssetData    []ReserveBuybackAssetData    `protobuf:"bytes,9,rep,name=reserveBuybackAssetData,proto3" json:"reserveBuybackAssetData" yaml:"reserveBuybackAssetData"`
	Extended_Pair              []Extended_Pair              `protobuf:"bytes,10,rep,name=extended_Pair,json=extendedPair,proto3" json:"extended_Pair" yaml:"extended_Pair"`
	AuctionParams              []AuctionParams              `protobuf:"bytes,11,rep,name=auctionParams,proto3" json:"auctionParams" yaml:"auctionParams"`
	AssetRatesParams           []AssetRatesParams           `protobuf:"bytes,12,rep,name=assetRatesParams,proto3" json:"assetRatesParams" yaml:"assetRatesParams"`
	StableBorrowMapping        StableBorrowMapping          `protobuf:"bytes,13,opt,name=stableBorrowMapping,proto3" json:"stableBorrowMapping" yaml:"stableBorrowMapping"`
	Params                     Params                       `protobuf:"bytes,14,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df703d992154ae9, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetBorrowAsset() []BorrowAsset {
	if m != nil {
		return m.BorrowAsset
	}
	return nil
}

func (m *GenesisState) GetBorrowInterestTracker() []BorrowInterestTracker {
	if m != nil {
		return m.BorrowInterestTracker
	}
	return nil
}

func (m *GenesisState) GetLendAsset() []LendAsset {
	if m != nil {
		return m.LendAsset
	}
	return nil
}

func (m *GenesisState) GetPool() []Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *GenesisState) GetAssetToPairMapping() []AssetToPairMapping {
	if m != nil {
		return m.AssetToPairMapping
	}
	return nil
}

func (m *GenesisState) GetPoolAssetLBMapping() []PoolAssetLBMapping {
	if m != nil {
		return m.PoolAssetLBMapping
	}
	return nil
}

func (m *GenesisState) GetLendRewardsTracker() []LendRewardsTracker {
	if m != nil {
		return m.LendRewardsTracker
	}
	return nil
}

func (m *GenesisState) GetUserAssetLendBorrowMapping() []UserAssetLendBorrowMapping {
	if m != nil {
		return m.UserAssetLendBorrowMapping
	}
	return nil
}

func (m *GenesisState) GetReserveBuybackAssetData() []ReserveBuybackAssetData {
	if m != nil {
		return m.ReserveBuybackAssetData
	}
	return nil
}

func (m *GenesisState) GetExtended_Pair() []Extended_Pair {
	if m != nil {
		return m.Extended_Pair
	}
	return nil
}

func (m *GenesisState) GetAuctionParams() []AuctionParams {
	if m != nil {
		return m.AuctionParams
	}
	return nil
}

func (m *GenesisState) GetAssetRatesParams() []AssetRatesParams {
	if m != nil {
		return m.AssetRatesParams
	}
	return nil
}

func (m *GenesisState) GetStableBorrowMapping() StableBorrowMapping {
	if m != nil {
		return m.StableBorrowMapping
	}
	return StableBorrowMapping{}
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "comdex.lend.v1beta1.GenesisState")
}

func init() { proto.RegisterFile("comdex/lend/v1beta1/genesis.proto", fileDescriptor_4df703d992154ae9) }

var fileDescriptor_4df703d992154ae9 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x95, 0x4d, 0x4f, 0x13, 0x4f,
	0x1c, 0xc7, 0xbb, 0x7f, 0xf8, 0xa3, 0x4c, 0x8b, 0x21, 0x03, 0x86, 0xa5, 0x92, 0xa5, 0x4c, 0x7c,
	0x80, 0x44, 0xbb, 0x01, 0x4f, 0x7a, 0x63, 0xa2, 0x51, 0x13, 0x4c, 0x9a, 0x01, 0x3d, 0x78, 0xb0,
	0x99, 0xb6, 0x43, 0xdd, 0xb0, 0xec, 0x6c, 0x66, 0xa7, 0x3c, 0x18, 0xe3, 0xd9, 0x93, 0xf1, 0xec,
	0x1b, 0xf1, 0x2d, 0x70, 0xe4, 0xe8, 0x89, 0x18, 0x78, 0x07, 0xbe, 0x02, 0x33, 0x0f, 0x85, 0x6d,
	0x77, 0xb6, 0xb7, 0x4e, 0xe6, 0xfb, 0xfb, 0x7c, 0xbe, 0xdb, 0xce, 0x74, 0xc1, 0x5a, 0x97, 0x1f,
	0xf6, 0xd8, 0x49, 0x18, 0xb3, 0xa4, 0x17, 0x1e, 0x6d, 0x76, 0x98, 0xa4, 0x9b, 0x61, 0x9f, 0x25,
	0x2c, 0x8b, 0xb2, 0x66, 0x2a, 0xb8, 0xe4, 0x70, 0xc1, 0x44, 0x9a, 0x2a, 0xd2, 0xb4, 0x91, 0xfa,
	0x62, 0x9f, 0xf7, 0xb9, 0xde, 0x0f, 0xd5, 0x27, 0x13, 0xad, 0x07, 0x2e, 0x9a, 0x9e, 0x33, 0xfb,
	0x0d, 0xd7, 0x7e, 0x4a, 0x05, 0x3d, 0xb4, 0x32, 0xf4, 0xab, 0x06, 0x6a, 0xaf, 0x8c, 0x7e, 0x57,
	0x52, 0xc9, 0xe0, 0x47, 0x50, 0xed, 0x70, 0x21, 0xf8, 0xf1, 0x76, 0x96, 0x31, 0xe9, 0x7b, 0x8d,
	0xa9, 0xf5, 0xea, 0x56, 0xa3, 0xe9, 0xe8, 0xd4, 0xc4, 0x37, 0x39, 0x5c, 0x3f, 0xbb, 0x58, 0xad,
	0xfc, 0xbd, 0x58, 0x85, 0xa7, 0xf4, 0x30, 0x7e, 0x8e, 0x72, 0x08, 0x44, 0xf2, 0x40, 0xf8, 0xcd,
	0x03, 0x77, 0xcd, 0xfa, 0x4d, 0x22, 0x99, 0x60, 0x99, 0xdc, 0x13, 0xb4, 0x7b, 0xc0, 0x84, 0xff,
	0x9f, 0x56, 0x3d, 0x9e, 0xa0, 0x6a, 0x47, 0x76, 0xa4, 0x2d, 0xcd, 0x0c, 0xbe, 0x6f, 0xb5, 0x2b,
	0x79, 0xed, 0x18, 0x18, 0x11, 0xb7, 0x10, 0xbe, 0x07, 0xb3, 0x4a, 0x62, 0x1e, 0x74, 0x4a, 0xdb,
	0x03, 0xa7, 0x7d, 0x67, 0x98, 0xc2, 0xbe, 0xf5, 0xcd, 0x1b, 0xdf, 0xf5, 0x38, 0x22, 0x37, 0x28,
	0x88, 0xc1, 0x74, 0xca, 0x79, 0xec, 0x4f, 0x6b, 0xe4, 0xb2, 0x13, 0xd9, 0xe2, 0x3c, 0xc6, 0x0b,
	0x96, 0x56, 0x35, 0x34, 0x35, 0x84, 0x88, 0x9e, 0x85, 0x9f, 0x01, 0xa4, 0x0a, 0xb6, 0xc7, 0x5b,
	0x34, 0x12, 0x6f, 0x69, 0x9a, 0x46, 0x49, 0xdf, 0xff, 0x5f, 0x13, 0x1f, 0x39, 0x89, 0xdb, 0x85,
	0x38, 0x5e, 0xb3, 0xfc, 0x65, 0xc3, 0x2f, 0x02, 0x11, 0x71, 0x58, 0x94, 0x5b, 0x75, 0xd0, 0xc0,
	0x1d, 0x3c, 0x74, 0xcf, 0x4c, 0x70, 0xb7, 0x0a, 0xf1, 0x71, 0x77, 0x11, 0x88, 0x88, 0xc3, 0x02,
	0xbf, 0x00, 0xa8, 0xc8, 0x84, 0x1d, 0x53, 0xd1, 0xcb, 0x86, 0x47, 0xe3, 0x96, 0x76, 0x6f, 0x94,
	0xfe, 0x38, 0x6d, 0x61, 0xf2, 0xd7, 0xe7, 0x62, 0xcc, 0x5e, 0x44, 0x22, 0xe2, 0xf0, 0xc0, 0x9f,
	0x1e, 0xa8, 0x0f, 0x32, 0x26, 0x4c, 0x29, 0x96, 0xf4, 0xcc, 0xb9, 0x1b, 0x7e, 0x05, 0xb7, 0x75,
	0x8d, 0xd0, 0x59, 0xe3, 0x5d, 0xe9, 0x18, 0xde, 0xb0, 0x65, 0xd6, 0x4c, 0x99, 0x72, 0x01, 0x22,
	0x13, 0xec, 0xf0, 0xbb, 0x07, 0x96, 0x04, 0xcb, 0x98, 0x38, 0x62, 0x78, 0x70, 0xda, 0xa1, 0xdd,
	0x03, 0x1d, 0x7c, 0x41, 0x25, 0xf5, 0x67, 0x27, 0xdc, 0x1d, 0xe2, 0x9e, 0xc1, 0x0f, 0x6d, 0xad,
	0xc0, 0xd4, 0x2a, 0x41, 0x23, 0x52, 0x26, 0x85, 0x0c, 0xcc, 0xb1, 0x13, 0xc9, 0x92, 0x1e, 0xeb,
	0xb5, 0xd5, 0xf9, 0xf1, 0x81, 0x6e, 0x81, 0x9c, 0x2d, 0x5e, 0xe6, 0x93, 0x78, 0xc5, 0xba, 0x17,
	0x8d, 0x7b, 0x04, 0x83, 0x48, 0x6d, 0xb8, 0x56, 0x4b, 0xb8, 0x0f, 0xe6, 0xe8, 0xa0, 0x2b, 0x23,
	0x9e, 0xb4, 0xf4, 0x3f, 0x97, 0x5f, 0x9d, 0xa0, 0xd9, 0xce, 0x27, 0xc7, 0x35, 0x23, 0x18, 0x44,
	0x46, 0xb1, 0x50, 0x80, 0x79, 0x7d, 0x19, 0x08, 0x95, 0x2c, 0xb3, 0xaa, 0x9a, 0x56, 0x3d, 0x28,
	0xbf, 0x70, 0xb9, 0x30, 0x5e, 0xb5, 0xb6, 0xa5, 0xdc, 0x75, 0xcb, 0xed, 0x23, 0x52, 0xe0, 0xc3,
	0xaf, 0x60, 0x21, 0x93, 0xb4, 0x13, 0xb3, 0xd1, 0x83, 0x36, 0xd7, 0xf0, 0xd6, 0xab, 0x5b, 0xeb,
	0x4e, 0xed, 0x6e, 0x31, 0x8f, 0x91, 0x35, 0xd7, 0x8d, 0xd9, 0x81, 0x44, 0xc4, 0x25, 0x82, 0xcf,
	0xc0, 0x8c, 0x79, 0x1d, 0xf8, 0x77, 0xb4, 0xf2, 0x9e, 0xfb, 0x7a, 0x9b, 0xe7, 0x9b, 0x56, 0x16,
	0x62, 0x07, 0xf0, 0xeb, 0xb3, 0xcb, 0xc0, 0x3b, 0xbf, 0x0c, 0xbc, 0x3f, 0x97, 0x81, 0xf7, 0xe3,
	0x2a, 0xa8, 0x9c, 0x5f, 0x05, 0x95, 0xdf, 0x57, 0x41, 0xe5, 0x43, 0xb3, 0x1f, 0xc9, 0x4f, 0x83,
	0x8e, 0x42, 0x85, 0x06, 0xf7, 0x84, 0xef, 0xef, 0x47, 0xdd, 0x88, 0xc6, 0x76, 0x1d, 0xda, 0x57,
	0x92, 0x3c, 0x4d, 0x59, 0xd6, 0x99, 0xd1, 0xaf, 0xa2, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb2, 0xbc, 0x33, 0xa0, 0x1c, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.StableBorrowMapping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.AssetRatesParams) > 0 {
		for iNdEx := len(m.AssetRatesParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetRatesParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.AuctionParams) > 0 {
		for iNdEx := len(m.AuctionParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuctionParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Extended_Pair) > 0 {
		for iNdEx := len(m.Extended_Pair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extended_Pair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ReserveBuybackAssetData) > 0 {
		for iNdEx := len(m.ReserveBuybackAssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveBuybackAssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.UserAssetLendBorrowMapping) > 0 {
		for iNdEx := len(m.UserAssetLendBorrowMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAssetLendBorrowMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LendRewardsTracker) > 0 {
		for iNdEx := len(m.LendRewardsTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LendRewardsTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PoolAssetLBMapping) > 0 {
		for iNdEx := len(m.PoolAssetLBMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolAssetLBMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AssetToPairMapping) > 0 {
		for iNdEx := len(m.AssetToPairMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetToPairMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LendAsset) > 0 {
		for iNdEx := len(m.LendAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LendAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BorrowInterestTracker) > 0 {
		for iNdEx := len(m.BorrowInterestTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowInterestTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BorrowAsset) > 0 {
		for iNdEx := len(m.BorrowAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BorrowAsset) > 0 {
		for _, e := range m.BorrowAsset {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BorrowInterestTracker) > 0 {
		for _, e := range m.BorrowInterestTracker {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LendAsset) > 0 {
		for _, e := range m.LendAsset {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AssetToPairMapping) > 0 {
		for _, e := range m.AssetToPairMapping {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolAssetLBMapping) > 0 {
		for _, e := range m.PoolAssetLBMapping {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LendRewardsTracker) > 0 {
		for _, e := range m.LendRewardsTracker {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UserAssetLendBorrowMapping) > 0 {
		for _, e := range m.UserAssetLendBorrowMapping {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReserveBuybackAssetData) > 0 {
		for _, e := range m.ReserveBuybackAssetData {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Extended_Pair) > 0 {
		for _, e := range m.Extended_Pair {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AuctionParams) > 0 {
		for _, e := range m.AuctionParams {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AssetRatesParams) > 0 {
		for _, e := range m.AssetRatesParams {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.StableBorrowMapping.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowAsset = append(m.BorrowAsset, BorrowAsset{})
			if err := m.BorrowAsset[len(m.BorrowAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowInterestTracker = append(m.BorrowInterestTracker, BorrowInterestTracker{})
			if err := m.BorrowInterestTracker[len(m.BorrowInterestTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LendAsset = append(m.LendAsset, LendAsset{})
			if err := m.LendAsset[len(m.LendAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, Pool{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetToPairMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetToPairMapping = append(m.AssetToPairMapping, AssetToPairMapping{})
			if err := m.AssetToPairMapping[len(m.AssetToPairMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAssetLBMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAssetLBMapping = append(m.PoolAssetLBMapping, PoolAssetLBMapping{})
			if err := m.PoolAssetLBMapping[len(m.PoolAssetLBMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendRewardsTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LendRewardsTracker = append(m.LendRewardsTracker, LendRewardsTracker{})
			if err := m.LendRewardsTracker[len(m.LendRewardsTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssetLendBorrowMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAssetLendBorrowMapping = append(m.UserAssetLendBorrowMapping, UserAssetLendBorrowMapping{})
			if err := m.UserAssetLendBorrowMapping[len(m.UserAssetLendBorrowMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveBuybackAssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveBuybackAssetData = append(m.ReserveBuybackAssetData, ReserveBuybackAssetData{})
			if err := m.ReserveBuybackAssetData[len(m.ReserveBuybackAssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extended_Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extended_Pair = append(m.Extended_Pair, Extended_Pair{})
			if err := m.Extended_Pair[len(m.Extended_Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionParams = append(m.AuctionParams, AuctionParams{})
			if err := m.AuctionParams[len(m.AuctionParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetRatesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetRatesParams = append(m.AssetRatesParams, AssetRatesParams{})
			if err := m.AssetRatesParams[len(m.AssetRatesParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
